[
 {
  "topic": "React.js",
  "raw": "#### Q1. If you want to import just the Component from the React library, what syntax do you use?\n\n- [ ] `import React.Component from 'react'`\n- [ ] `import [ Component ] from 'react'`\n- [ ] `import Component from 'react'`\n- [x] `import { Component } from 'react'`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q1. If you want to import just the Component from the React library, what syntax do you use?</h4>",
   "text": "Q1. If you want to import just the Component from the React library, what syntax do you use?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>import React.Component from 'react'</code>",
    "text": "import React.Component from 'react'"
   },
   {
    "isCorrect": false,
    "html": "<code>import [ Component ] from 'react'</code>",
    "text": "import [ Component ] from 'react'"
   },
   {
    "isCorrect": false,
    "html": "<code>import Component from 'react'</code>",
    "text": "import Component from 'react'"
   },
   {
    "isCorrect": true,
    "html": "<code>import { Component } from 'react'</code>",
    "text": "import { Component } from 'react'"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q2. If a function component should always render the same way given the same props, what is a simple performance optimization available for it?\n\n- [x] Wrap it in the `React.memo` higher-order component.\n- [ ] Implement the `useReducer` Hook.\n- [ ] Implement the `useMemo` Hook.\n- [ ] Implement the `shouldComponentUpdate` lifecycle method.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q2. If a function component should always render the same way given the same props, what is a simple performance optimization available for it?</h4>",
   "text": "Q2. If a function component should always render the same way given the same props, what is a simple performance optimization available for it?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Wrap it in the <code>React.memo</code> higher-order component.",
    "text": "Wrap it in the React.memo higher-order component."
   },
   {
    "isCorrect": false,
    "html": "Implement the <code>useReducer</code> Hook.",
    "text": "Implement the useReducer Hook."
   },
   {
    "isCorrect": false,
    "html": "Implement the <code>useMemo</code> Hook.",
    "text": "Implement the useMemo Hook."
   },
   {
    "isCorrect": false,
    "html": "Implement the <code>shouldComponentUpdate</code> lifecycle method.",
    "text": "Implement the shouldComponentUpdate lifecycle method."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q3. How do you fix the syntax error that results from running this code?\n\n```javascript\nconst person =(firstName, lastName) =>\n{\n  first: firstName,\n  last: lastName\n}\nconsole.log(person(\"Jill\", \"Wilson\"))\n```\n\n- [x] Wrap the object in parentheses.\n- [ ] Call the function from another file.\n- [ ] Add a return statement before the first curly brace.\n- [ ] Replace the object with an array.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q3. How do you fix the syntax error that results from running this code?</h4>",
   "text": "Q3. How do you fix the syntax error that results from running this code?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">person</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> firstName<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> lastName\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wilson\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>",
   "text": "const person =(firstName, lastName) =>\n{\n  first: firstName,\n  last: lastName\n}\nconsole.log(person(\"Jill\", \"Wilson\"))\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Wrap the object in parentheses.",
    "text": "Wrap the object in parentheses."
   },
   {
    "isCorrect": false,
    "html": "Call the function from another file.",
    "text": "Call the function from another file."
   },
   {
    "isCorrect": false,
    "html": "Add a return statement before the first curly brace.",
    "text": "Add a return statement before the first curly brace."
   },
   {
    "isCorrect": false,
    "html": "Replace the object with an array.",
    "text": "Replace the object with an array."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q4. If you see the following import in a file, what is being used for state management in the component?\n\n`import React, {useState} from 'react';`\n\n- [x] React Hooks\n- [ ] stateful components\n- [ ] math\n- [ ] class components\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q4. If you see the following import in a file, what is being used for state management in the component?</h4>",
   "text": "Q4. If you see the following import in a file, what is being used for state management in the component?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "React Hooks",
    "text": "React Hooks"
   },
   {
    "isCorrect": false,
    "html": "stateful components",
    "text": "stateful components"
   },
   {
    "isCorrect": false,
    "html": "math",
    "text": "math"
   },
   {
    "isCorrect": false,
    "html": "class components",
    "text": "class components"
   }
  ],
  "reference": {
   "html": "<p><code>import React, {useState} from 'react';</code></p>",
   "text": "import React, {useState} from 'react';"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q5. Using object literal enhancement, you can put values back into an object. When you log person to the console, what is the output?\n\n```javascript\nconst name = 'Rachel';\nconst age = 31;\nconst person = { name, age };\nconsole.log(person);\n```\n\n- [ ] `{{name: \"Rachel\", age: 31}}`\n- [x] `{name: \"Rachel\", age: 31}`\n- [ ] `{person: \"Rachel\", person: 31}}`\n- [ ] `{person: {name: \"Rachel\", age: 31}}`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q5. Using object literal enhancement, you can put values back into an object. When you log person to the console, what is the output?</h4>",
   "text": "Q5. Using object literal enhancement, you can put values back into an object. When you log person to the console, what is the output?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Rachel'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const name = 'Rachel';\nconst age = 31;\nconst person = { name, age };\nconsole.log(person);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>{{name: \"Rachel\", age: 31}}</code>",
    "text": "{{name: \"Rachel\", age: 31}}"
   },
   {
    "isCorrect": true,
    "html": "<code>{name: \"Rachel\", age: 31}</code>",
    "text": "{name: \"Rachel\", age: 31}"
   },
   {
    "isCorrect": false,
    "html": "<code>{person: \"Rachel\", person: 31}}</code>",
    "text": "{person: \"Rachel\", person: 31}}"
   },
   {
    "isCorrect": false,
    "html": "<code>{person: {name: \"Rachel\", age: 31}}</code>",
    "text": "{person: {name: \"Rachel\", age: 31}}"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q6. What is the testing library most often associated with React?\n\n- [ ] Mocha\n- [ ] Chai\n- [ ] Sinon\n- [x] Jest\n\n[Reference](https://jestjs.io)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q6. What is the testing library most often associated with React?</h4>",
   "text": "Q6. What is the testing library most often associated with React?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Mocha",
    "text": "Mocha"
   },
   {
    "isCorrect": false,
    "html": "Chai",
    "text": "Chai"
   },
   {
    "isCorrect": false,
    "html": "Sinon",
    "text": "Sinon"
   },
   {
    "isCorrect": true,
    "html": "Jest",
    "text": "Jest"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://jestjs.io\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q7. To get the first item from the array (\"cooking\") using array destructuring, how do you adjust this line?\n\n```javascript\nconst topics = ['cooking', 'art', 'history'];\n```\n\n- [ ] `const first = [\"cooking\", \"art\", \"history\"]`\n- [ ] `const [] = [\"cooking\", \"art\", \"history\"]`\n- [ ] `const [, first][\"cooking\", \"art\", \"history\"]`\n- [x] `const [first] = [\"cooking\", \"art\", \"history\"]`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q7. To get the first item from the array (\"cooking\") using array destructuring, how do you adjust this line?</h4>",
   "text": "Q7. To get the first item from the array (\"cooking\") using array destructuring, how do you adjust this line?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cooking'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'art'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const topics = ['cooking', 'art', 'history'];\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>const first = [\"cooking\", \"art\", \"history\"]</code>",
    "text": "const first = [\"cooking\", \"art\", \"history\"]"
   },
   {
    "isCorrect": false,
    "html": "<code>const [] = [\"cooking\", \"art\", \"history\"]</code>",
    "text": "const [] = [\"cooking\", \"art\", \"history\"]"
   },
   {
    "isCorrect": false,
    "html": "<code>const [, first][\"cooking\", \"art\", \"history\"]</code>",
    "text": "const [, first][\"cooking\", \"art\", \"history\"]"
   },
   {
    "isCorrect": true,
    "html": "<code>const [first] = [\"cooking\", \"art\", \"history\"]</code>",
    "text": "const [first] = [\"cooking\", \"art\", \"history\"]"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q8. How do you handle passing through the component tree without having to pass props down manually at every level?\n\n- [ ] React Send\n- [ ] React Pinpoint\n- [ ] React Router\n- [x] React Context\n\n[Reference](https://reactjs.org/docs/context.html)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q8. How do you handle passing through the component tree without having to pass props down manually at every level?</h4>",
   "text": "Q8. How do you handle passing through the component tree without having to pass props down manually at every level?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "React Send",
    "text": "React Send"
   },
   {
    "isCorrect": false,
    "html": "React Pinpoint",
    "text": "React Pinpoint"
   },
   {
    "isCorrect": false,
    "html": "React Router",
    "text": "React Router"
   },
   {
    "isCorrect": true,
    "html": "React Context",
    "text": "React Context"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/context.html\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q9. What should the console read when the following code is run?\n\n```javascript\nconst [, , animal] = ['Horse', 'Mouse', 'Cat'];\nconsole.log(animal);\n```\n\n- [ ] Horse\n- [x] Cat\n- [ ] Mouse\n- [ ] undefined\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q9. What should the console read when the following code is run?</h4>",
   "text": "Q9. What should the console read when the following code is run?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> animal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Horse'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mouse'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const [, , animal] = ['Horse', 'Mouse', 'Cat'];\nconsole.log(animal);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Horse",
    "text": "Horse"
   },
   {
    "isCorrect": true,
    "html": "Cat",
    "text": "Cat"
   },
   {
    "isCorrect": false,
    "html": "Mouse",
    "text": "Mouse"
   },
   {
    "isCorrect": false,
    "html": "undefined",
    "text": "undefined"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q10. What is the name of the tool used to take JSX and turn it into createElement calls?\n\n- [ ] JSX Editor\n- [ ] ReactDOM\n- [ ] Browser Buddy\n- [x] Babel\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q10. What is the name of the tool used to take JSX and turn it into createElement calls?</h4>",
   "text": "Q10. What is the name of the tool used to take JSX and turn it into createElement calls?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "JSX Editor",
    "text": "JSX Editor"
   },
   {
    "isCorrect": false,
    "html": "ReactDOM",
    "text": "ReactDOM"
   },
   {
    "isCorrect": false,
    "html": "Browser Buddy",
    "text": "Browser Buddy"
   },
   {
    "isCorrect": true,
    "html": "Babel",
    "text": "Babel"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q11. Why might you use useReducer over useState in a React component?\n\n- [ ] when you want to replace Redux\n- [x] when you need to manage more complex state in an app\n- [ ] when you want to improve performance\n- [ ] when you want to break your production app\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q11. Why might you use useReducer over useState in a React component?</h4>",
   "text": "Q11. Why might you use useReducer over useState in a React component?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "when you want to replace Redux",
    "text": "when you want to replace Redux"
   },
   {
    "isCorrect": true,
    "html": "when you need to manage more complex state in an app",
    "text": "when you need to manage more complex state in an app"
   },
   {
    "isCorrect": false,
    "html": "when you want to improve performance",
    "text": "when you want to improve performance"
   },
   {
    "isCorrect": false,
    "html": "when you want to break your production app",
    "text": "when you want to break your production app"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q12. Which props from the props object is available to the component with the following syntax?\n\n```javascript\n<Message {...props} />\n```\n\n- [ ] any that have not changed\n- [x] all of them\n- [ ] child props\n- [ ] any that have changed\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q12. Which props from the props object is available to the component with the following syntax?</h4>",
   "text": "Q12. Which props from the props object is available to the component with the following syntax?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Message <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<Message {...props} />\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "any that have not changed",
    "text": "any that have not changed"
   },
   {
    "isCorrect": true,
    "html": "all of them",
    "text": "all of them"
   },
   {
    "isCorrect": false,
    "html": "child props",
    "text": "child props"
   },
   {
    "isCorrect": false,
    "html": "any that have changed",
    "text": "any that have changed"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q13. Consider the following code from React Router. What do you call :id in the path prop?\n\n```javascript\n<Route path=\"/:id\" />\n```\n\n- [ ] This is a route modal\n- [x] This is a route parameter\n- [ ] This is a route splitter\n- [ ] This is a route link\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q13. Consider the following code from React Router. What do you call :id in the path prop?</h4>",
   "text": "Q13. Consider the following code from React Router. What do you call :id in the path prop?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:id\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<Route path=\"/:id\" />\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "This is a route modal",
    "text": "This is a route modal"
   },
   {
    "isCorrect": true,
    "html": "This is a route parameter",
    "text": "This is a route parameter"
   },
   {
    "isCorrect": false,
    "html": "This is a route splitter",
    "text": "This is a route splitter"
   },
   {
    "isCorrect": false,
    "html": "This is a route link",
    "text": "This is a route link"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q14. If you created a component called Dish and rendered it to the DOM, what type of element would be rendered?\n\n```javascript\nfunction Dish() {\n  return <h1>Mac and Cheese</h1>;\n}\n\nReactDOM.render(<Dish />, document.getElementById('root'));\n```\n\n- [ ] `div`\n- [ ] section\n- [ ] component\n- [x] `h1`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q14. If you created a component called Dish and rendered it to the DOM, what type of element would be rendered?</h4>",
   "text": "Q14. If you created a component called Dish and rendered it to the DOM, what type of element would be rendered?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Mac and Cheese<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Dish <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "function Dish() {\n  return <h1>Mac and Cheese</h1>;\n}\n\nReactDOM.render(<Dish />, document.getElementById('root'));\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>div</code>",
    "text": "div"
   },
   {
    "isCorrect": false,
    "html": "section",
    "text": "section"
   },
   {
    "isCorrect": false,
    "html": "component",
    "text": "component"
   },
   {
    "isCorrect": true,
    "html": "<code>h1</code>",
    "text": "h1"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q15. What does this React element look like given the following function? (Alternative: Given the following code, what does this React element look like?)\n\n```javascript\nReact.createElement('h1', null, \"What's happening?\");\n```\n\n- [ ] `<h1 props={null}>What's happening?</h1>`\n- [x] `<h1>What's happening?</h1>`\n- [ ] `<h1 id=\"component\">What's happening?</h1>`\n- [ ] `<h1 id=\"element\">What's happening?</h1>`\n\n[Reference](https://www.geeksforgeeks.org/what-is-the-use-of-react-createelement/)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q15. What does this React element look like given the following function? (Alternative: Given the following code, what does this React element look like?)</h4>",
   "text": "Q15. What does this React element look like given the following function? (Alternative: Given the following code, what does this React element look like?)"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"What's happening?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "React.createElement('h1', null, \"What's happening?\");\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>&lt;h1 props={null}&gt;What's happening?&lt;/h1&gt;</code>",
    "text": "<h1 props={null}>What's happening?</h1>"
   },
   {
    "isCorrect": true,
    "html": "<code>&lt;h1&gt;What's happening?&lt;/h1&gt;</code>",
    "text": "<h1>What's happening?</h1>"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;h1 id=\"component\"&gt;What's happening?&lt;/h1&gt;</code>",
    "text": "<h1 id=\"component\">What's happening?</h1>"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;h1 id=\"element\"&gt;What's happening?&lt;/h1&gt;</code>",
    "text": "<h1 id=\"element\">What's happening?</h1>"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.geeksforgeeks.org/what-is-the-use-of-react-createelement/\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q16. What property do you need to add to the Suspense component in order to display a spinner or loading state?\n\n```javascript\nfunction MyComponent() {\n  return (\n    <Suspense>\n      <div>\n        <Message />\n      </div>\n    </Suspense>\n  );\n}\n```\n\n- [ ] lazy\n- [ ] loading\n- [x] fallback\n- [ ] spinner\n\n[Reference](https://linguinecode.com/post/how-react-suspense-works)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q16. What property do you need to add to the Suspense component in order to display a spinner or loading state?</h4>",
   "text": "Q16. What property do you need to add to the Suspense component in order to display a spinner or loading state?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Suspense<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Message <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "function MyComponent() {\n  return (\n    <Suspense>\n      <div>\n        <Message />\n      </div>\n    </Suspense>\n  );\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "lazy",
    "text": "lazy"
   },
   {
    "isCorrect": false,
    "html": "loading",
    "text": "loading"
   },
   {
    "isCorrect": true,
    "html": "fallback",
    "text": "fallback"
   },
   {
    "isCorrect": false,
    "html": "spinner",
    "text": "spinner"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://linguinecode.com/post/how-react-suspense-works\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q17. What do you call the message wrapped in curly braces below?\n\n```javascript\nconst message = 'Hi there';\nconst element = <p>{message}</p>;\n```\n\n- [ ] a JS function\n- [ ] a JS element\n- [x] a JS expression\n- [ ] a JSX wrapper\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q17. What do you call the message wrapped in curly braces below?</h4>",
   "text": "Q17. What do you call the message wrapped in curly braces below?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token string\">'Hi there'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const message = 'Hi there';\nconst element = <p>{message}</p>;\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a JS function",
    "text": "a JS function"
   },
   {
    "isCorrect": false,
    "html": "a JS element",
    "text": "a JS element"
   },
   {
    "isCorrect": true,
    "html": "a JS expression",
    "text": "a JS expression"
   },
   {
    "isCorrect": false,
    "html": "a JSX wrapper",
    "text": "a JSX wrapper"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q18. What can you use to handle code splitting?\n\n- [ ] `React.memo`\n- [ ] `React.split`\n- [x] `React.lazy`\n- [ ] `React.fallback`\n\n[Reference]()\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q18. What can you use to handle code splitting?</h4>",
   "text": "Q18. What can you use to handle code splitting?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>React.memo</code>",
    "text": "React.memo"
   },
   {
    "isCorrect": false,
    "html": "<code>React.split</code>",
    "text": "React.split"
   },
   {
    "isCorrect": true,
    "html": "<code>React.lazy</code>",
    "text": "React.lazy"
   },
   {
    "isCorrect": false,
    "html": "<code>React.fallback</code>",
    "text": "React.fallback"
   }
  ],
  "reference": {
   "html": "<p><a href=\"\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q19. When do you use `useLayoutEffect`?\n\n- [ ] to optimize for all devices\n- [ ] to complete the update\n- [ ] to change the layout of the screen\n- [x] when you need the browser to paint before the effect runs\n\n[Reference](https://www.knowledgehut.com/blog/web-development/react-uselayouteffect)\n\n[Answer confirmed by multiple members of the community in this internal discussion](https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes/issues/3946)\n\n**Explanation:**\n`useLayoutEffect` gets executed _before_ the `useEffect` hook without much concern for DOM mutation. Even though the React hook `useLayoutEffect` is set after the `useEffect` Hook, it gets triggered first!\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q19. When do you use <code>useLayoutEffect</code>?</h4>",
   "text": "Q19. When do you use useLayoutEffect?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "to optimize for all devices",
    "text": "to optimize for all devices"
   },
   {
    "isCorrect": false,
    "html": "to complete the update",
    "text": "to complete the update"
   },
   {
    "isCorrect": false,
    "html": "to change the layout of the screen",
    "text": "to change the layout of the screen"
   },
   {
    "isCorrect": true,
    "html": "when you need the browser to paint before the effect runs",
    "text": "when you need the browser to paint before the effect runs"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.knowledgehut.com/blog/web-development/react-uselayouteffect\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q20. What is the difference between the click behaviors of these two buttons (assuming that this.handleClick is bound correctly)?\n\n```javascript\nA. <button onClick={this.handleClick}>Click Me</button>\nB. <button onClick={event => this.handleClick(event)}>Click Me</button>\n```\n\n- [ ] Button A will not have access to the event object on click of the button.\n- [ ] Button B will not fire the handler this.handleClick successfully.\n- [ ] Button A will not fire the handler this.handleClick successfully.\n- [x] There is no difference.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q20. What is the difference between the click behaviors of these two buttons (assuming that this.handleClick is bound correctly)?</h4>",
   "text": "Q20. What is the difference between the click behaviors of these two buttons (assuming that this.handleClick is bound correctly)?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>Click Me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token constant\">B</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>Click Me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "A. <button onClick={this.handleClick}>Click Me</button>\nB. <button onClick={event => this.handleClick(event)}>Click Me</button>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Button A will not have access to the event object on click of the button.",
    "text": "Button A will not have access to the event object on click of the button."
   },
   {
    "isCorrect": false,
    "html": "Button B will not fire the handler this.handleClick successfully.",
    "text": "Button B will not fire the handler this.handleClick successfully."
   },
   {
    "isCorrect": false,
    "html": "Button A will not fire the handler this.handleClick successfully.",
    "text": "Button A will not fire the handler this.handleClick successfully."
   },
   {
    "isCorrect": true,
    "html": "There is no difference.",
    "text": "There is no difference."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q21. How do you destructure the properties that are sent to the Dish component?\n\n```javascript\nfunction Dish(props) {\n  return (\n    <h1>\n      {props.name} {props.cookingTime}\n    </h1>\n  );\n}\n```\n\n- [ ] `function Dish([name, cookingTime]) { return <h1>{name} {cookingTime}</h1>; }`\n- [x] `function Dish({name, cookingTime}) { return <h1>{name} {cookingTime}</h1>; }`\n- [ ] `function Dish(props) { return <h1>{name} {cookingTime}</h1>; }`\n- [ ] `function Dish(...props) { return <h1>{name} {cookingTime}</h1>; }`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q21. How do you destructure the properties that are sent to the Dish component?</h4>",
   "text": "Q21. How do you destructure the properties that are sent to the Dish component?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dish</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>cookingTime<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "function Dish(props) {\n  return (\n    <h1>\n      {props.name} {props.cookingTime}\n    </h1>\n  );\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>function Dish([name, cookingTime]) { return &lt;h1&gt;{name} {cookingTime}&lt;/h1&gt;; }</code>",
    "text": "function Dish([name, cookingTime]) { return <h1>{name} {cookingTime}</h1>; }"
   },
   {
    "isCorrect": true,
    "html": "<code>function Dish({name, cookingTime}) { return &lt;h1&gt;{name} {cookingTime}&lt;/h1&gt;; }</code>",
    "text": "function Dish({name, cookingTime}) { return <h1>{name} {cookingTime}</h1>; }"
   },
   {
    "isCorrect": false,
    "html": "<code>function Dish(props) { return &lt;h1&gt;{name} {cookingTime}&lt;/h1&gt;; }</code>",
    "text": "function Dish(props) { return <h1>{name} {cookingTime}</h1>; }"
   },
   {
    "isCorrect": false,
    "html": "<code>function Dish(...props) { return &lt;h1&gt;{name} {cookingTime}&lt;/h1&gt;; }</code>",
    "text": "function Dish(...props) { return <h1>{name} {cookingTime}</h1>; }"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q22. When might you use `React.PureComponent`?\n\n- [ ] when you do not want your component to have props\n- [ ] when you have sibling components that need to be compared\n- [x] when you want a default implementation of `shouldComponentUpdate()`\n- [ ] when you do not want your component to have state\n\n[Reference](https://reactjs.org/docs/react-api.html#reactpurecomponent)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q22. When might you use <code>React.PureComponent</code>?</h4>",
   "text": "Q22. When might you use React.PureComponent?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "when you do not want your component to have props",
    "text": "when you do not want your component to have props"
   },
   {
    "isCorrect": false,
    "html": "when you have sibling components that need to be compared",
    "text": "when you have sibling components that need to be compared"
   },
   {
    "isCorrect": true,
    "html": "when you want a default implementation of <code>shouldComponentUpdate()</code>",
    "text": "when you want a default implementation of shouldComponentUpdate()"
   },
   {
    "isCorrect": false,
    "html": "when you do not want your component to have state",
    "text": "when you do not want your component to have state"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/react-api.html#reactpurecomponent\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q23. Why is it important to avoid copying the values of props into a component's state where possible?\n\n- [ ] because you should never mutate state\n- [ ] because `getDerivedStateFromProps()` is an unsafe method to use\n- [x] because you want to allow a component to update in response to changes in the props\n- [ ] because you want to allow data to flow back up to the parent\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q23. Why is it important to avoid copying the values of props into a component's state where possible?</h4>",
   "text": "Q23. Why is it important to avoid copying the values of props into a component's state where possible?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "because you should never mutate state",
    "text": "because you should never mutate state"
   },
   {
    "isCorrect": false,
    "html": "because <code>getDerivedStateFromProps()</code> is an unsafe method to use",
    "text": "because getDerivedStateFromProps() is an unsafe method to use"
   },
   {
    "isCorrect": true,
    "html": "because you want to allow a component to update in response to changes in the props",
    "text": "because you want to allow a component to update in response to changes in the props"
   },
   {
    "isCorrect": false,
    "html": "because you want to allow data to flow back up to the parent",
    "text": "because you want to allow data to flow back up to the parent"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q24. What is the children prop?\n\n- [ ] a property that adds child components to state\n- [x] a special property that JSX creates on components that contain both an opening tag and a closing tag, referencing it's contents.\n- [ ] a property that lets you set an array as a property\n- [ ] a property that lets you pass data to child elements\n\n[Reference](https://reactjs.org/docs/jsx-in-depth.html#children-in-jsx)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q24. What is the children prop?</h4>",
   "text": "Q24. What is the children prop?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a property that adds child components to state",
    "text": "a property that adds child components to state"
   },
   {
    "isCorrect": true,
    "html": "a special property that JSX creates on components that contain both an opening tag and a closing tag, referencing it's contents.",
    "text": "a special property that JSX creates on components that contain both an opening tag and a closing tag, referencing it's contents."
   },
   {
    "isCorrect": false,
    "html": "a property that lets you set an array as a property",
    "text": "a property that lets you set an array as a property"
   },
   {
    "isCorrect": false,
    "html": "a property that lets you pass data to child elements",
    "text": "a property that lets you pass data to child elements"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/jsx-in-depth.html#children-in-jsx\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q25. Which attribute is React's replacement for using innerHTML in the browser DOM?\n\n- [ ] injectHTML\n- [x] dangerouslySetInnerHTML\n- [ ] weirdSetInnerHTML\n- [ ] strangeHTML\n\n[Reference](https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q25. Which attribute is React's replacement for using innerHTML in the browser DOM?</h4>",
   "text": "Q25. Which attribute is React's replacement for using innerHTML in the browser DOM?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "injectHTML",
    "text": "injectHTML"
   },
   {
    "isCorrect": true,
    "html": "dangerouslySetInnerHTML",
    "text": "dangerouslySetInnerHTML"
   },
   {
    "isCorrect": false,
    "html": "weirdSetInnerHTML",
    "text": "weirdSetInnerHTML"
   },
   {
    "isCorrect": false,
    "html": "strangeHTML",
    "text": "strangeHTML"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q26. Which of these terms commonly describe React applications?\n\n- [x] declarative\n- [ ] integrated\n- [ ] closed\n- [ ] imperative\n\n[Reference](https://levelup.gitconnected.com/why-react-is-declarative-a300d1e930b7)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q26. Which of these terms commonly describe React applications?</h4>",
   "text": "Q26. Which of these terms commonly describe React applications?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "declarative",
    "text": "declarative"
   },
   {
    "isCorrect": false,
    "html": "integrated",
    "text": "integrated"
   },
   {
    "isCorrect": false,
    "html": "closed",
    "text": "closed"
   },
   {
    "isCorrect": false,
    "html": "imperative",
    "text": "imperative"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://levelup.gitconnected.com/why-react-is-declarative-a300d1e930b7\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q27. When using webpack, why would you need to use a loader?\n\n- [ ] to put together physical file folders\n- [x] to preprocess files\n- [ ] to load external data\n- [ ] to load the website into everyone's phone\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q27. When using webpack, why would you need to use a loader?</h4>",
   "text": "Q27. When using webpack, why would you need to use a loader?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "to put together physical file folders",
    "text": "to put together physical file folders"
   },
   {
    "isCorrect": true,
    "html": "to preprocess files",
    "text": "to preprocess files"
   },
   {
    "isCorrect": false,
    "html": "to load external data",
    "text": "to load external data"
   },
   {
    "isCorrect": false,
    "html": "to load the website into everyone's phone",
    "text": "to load the website into everyone's phone"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q28. A representation of a user interface that is kept in memory and is synced with the \"real\" DOM is called what?\n\n- [x] virtual DOM\n- [ ] DOM\n- [ ] virtual elements\n- [ ] shadow DOM\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q28. A representation of a user interface that is kept in memory and is synced with the \"real\" DOM is called what?</h4>",
   "text": "Q28. A representation of a user interface that is kept in memory and is synced with the \"real\" DOM is called what?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "virtual DOM",
    "text": "virtual DOM"
   },
   {
    "isCorrect": false,
    "html": "DOM",
    "text": "DOM"
   },
   {
    "isCorrect": false,
    "html": "virtual elements",
    "text": "virtual elements"
   },
   {
    "isCorrect": false,
    "html": "shadow DOM",
    "text": "shadow DOM"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q29. You have written the following code but nothing is rendering. How do you fix this problem?\n\n```javascript\nconst Heading = () => {\n  <h1>Hello!</h1>;\n};\n```\n\n- [ ] Add a render function.\n- [x] Change the curly braces to parentheses or add a return statement before the `h1` tag.\n- [ ] Move the `h1` to another component.\n- [ ] Surround the `h1` in a `div`.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q29. You have written the following code but nothing is rendering. How do you fix this problem?</h4>",
   "text": "Q29. You have written the following code but nothing is rendering. How do you fix this problem?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Heading</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Hello<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const Heading = () => {\n  <h1>Hello!</h1>;\n};\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Add a render function.",
    "text": "Add a render function."
   },
   {
    "isCorrect": true,
    "html": "Change the curly braces to parentheses or add a return statement before the <code>h1</code> tag.",
    "text": "Change the curly braces to parentheses or add a return statement before the h1 tag."
   },
   {
    "isCorrect": false,
    "html": "Move the <code>h1</code> to another component.",
    "text": "Move the h1 to another component."
   },
   {
    "isCorrect": false,
    "html": "Surround the <code>h1</code> in a <code>div</code>.",
    "text": "Surround the h1 in a div."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q30. To create a constant in JavaScript, which keyword do you use?\n\n- [x] const\n- [ ] let\n- [ ] constant\n- [ ] var\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q30. To create a constant in JavaScript, which keyword do you use?</h4>",
   "text": "Q30. To create a constant in JavaScript, which keyword do you use?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "const",
    "text": "const"
   },
   {
    "isCorrect": false,
    "html": "let",
    "text": "let"
   },
   {
    "isCorrect": false,
    "html": "constant",
    "text": "constant"
   },
   {
    "isCorrect": false,
    "html": "var",
    "text": "var"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q31. What do you call a React component that catches JavaScript errors anywhere in the child component tree?\n\n- [ ] error bosses\n- [ ] error catchers\n- [ ] error helpers\n- [x] error boundaries\n\n[Reference](https://www.geeksforgeeks.org/react-js-error-boundaries/)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q31. What do you call a React component that catches JavaScript errors anywhere in the child component tree?</h4>",
   "text": "Q31. What do you call a React component that catches JavaScript errors anywhere in the child component tree?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "error bosses",
    "text": "error bosses"
   },
   {
    "isCorrect": false,
    "html": "error catchers",
    "text": "error catchers"
   },
   {
    "isCorrect": false,
    "html": "error helpers",
    "text": "error helpers"
   },
   {
    "isCorrect": true,
    "html": "error boundaries",
    "text": "error boundaries"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.geeksforgeeks.org/react-js-error-boundaries/\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q32. In which lifecycle method do you make requests for data in a class component?\n\n- [ ] constructor\n- [x] componentDidMount\n- [ ] componentWillReceiveProps\n- [ ] componentWillMount\n\n[Reference](https://reactjs.org/docs/react-component.html#componentdidmount)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q32. In which lifecycle method do you make requests for data in a class component?</h4>",
   "text": "Q32. In which lifecycle method do you make requests for data in a class component?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "constructor",
    "text": "constructor"
   },
   {
    "isCorrect": true,
    "html": "componentDidMount",
    "text": "componentDidMount"
   },
   {
    "isCorrect": false,
    "html": "componentWillReceiveProps",
    "text": "componentWillReceiveProps"
   },
   {
    "isCorrect": false,
    "html": "componentWillMount",
    "text": "componentWillMount"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q33. React components are composed to create a user interface. How are components composed?\n\n- [ ] by putting them in the same file\n- [x] by nesting components\n- [ ] with webpack\n- [ ] with code splitting\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q33. React components are composed to create a user interface. How are components composed?</h4>",
   "text": "Q33. React components are composed to create a user interface. How are components composed?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "by putting them in the same file",
    "text": "by putting them in the same file"
   },
   {
    "isCorrect": true,
    "html": "by nesting components",
    "text": "by nesting components"
   },
   {
    "isCorrect": false,
    "html": "with webpack",
    "text": "with webpack"
   },
   {
    "isCorrect": false,
    "html": "with code splitting",
    "text": "with code splitting"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q34. All React components must act like **\\_** with respect to their props.\n\n- [ ] monads\n- [x] pure functions\n- [ ] recursive functions\n- [ ] higher-order functions\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q34. All React components must act like <strong>_</strong> with respect to their props.</h4>",
   "text": "Q34. All React components must act like _ with respect to their props."
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "monads",
    "text": "monads"
   },
   {
    "isCorrect": true,
    "html": "pure functions",
    "text": "pure functions"
   },
   {
    "isCorrect": false,
    "html": "recursive functions",
    "text": "recursive functions"
   },
   {
    "isCorrect": false,
    "html": "higher-order functions",
    "text": "higher-order functions"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q35. What is `[e.target.id]` called in this code snippet?\n\n```javascript\nconst handleChange = (e) => {\n  setState((prevState) => ({ ...prevState, [e.target.id]: e.target.value }));\n};\n```\n\n- [ ] a computed property name\n- [ ] a set value\n- [x] a dynamic key\n- [ ] a JSX code string\n\n[Reference](https://www.geeksforgeeks.org/how-to-set-state-with-a-dynamic-key-name-in-reactjs/)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q35. What is <code>[e.target.id]</code> called in this code snippet?</h4>",
   "text": "Q35. What is [e.target.id] called in this code snippet?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const handleChange = (e) => {\n  setState((prevState) => ({ ...prevState, [e.target.id]: e.target.value }));\n};\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a computed property name",
    "text": "a computed property name"
   },
   {
    "isCorrect": false,
    "html": "a set value",
    "text": "a set value"
   },
   {
    "isCorrect": true,
    "html": "a dynamic key",
    "text": "a dynamic key"
   },
   {
    "isCorrect": false,
    "html": "a JSX code string",
    "text": "a JSX code string"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.geeksforgeeks.org/how-to-set-state-with-a-dynamic-key-name-in-reactjs/\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q36. What is the name of this component?\n\n```javascript\nclass Clock extends React.Component {\n  render() {\n    return <h1>Look at the time: {time}</h1>;\n  }\n}\n```\n\n- [x] Clock\n- [ ] It does not have a name prop.\n- [ ] React.Component\n- [ ] Component\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q36. What is the name of this component?</h4>",
   "text": "Q36. What is the name of this component?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Look at the time<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "class Clock extends React.Component {\n  render() {\n    return <h1>Look at the time: {time}</h1>;\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Clock",
    "text": "Clock"
   },
   {
    "isCorrect": false,
    "html": "It does not have a name prop.",
    "text": "It does not have a name prop."
   },
   {
    "isCorrect": false,
    "html": "React.Component",
    "text": "React.Component"
   },
   {
    "isCorrect": false,
    "html": "Component",
    "text": "Component"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q37. What is sent to an `Array.map()` function?\n\n- [x] a callback function that is called once for each element in the array\n- [ ] the name of another array to iterate over\n- [ ] the number of times you want to call the function\n- [ ] a string describing what the function should do\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q37. What is sent to an <code>Array.map()</code> function?</h4>",
   "text": "Q37. What is sent to an Array.map() function?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "a callback function that is called once for each element in the array",
    "text": "a callback function that is called once for each element in the array"
   },
   {
    "isCorrect": false,
    "html": "the name of another array to iterate over",
    "text": "the name of another array to iterate over"
   },
   {
    "isCorrect": false,
    "html": "the number of times you want to call the function",
    "text": "the number of times you want to call the function"
   },
   {
    "isCorrect": false,
    "html": "a string describing what the function should do",
    "text": "a string describing what the function should do"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q38. Why is it a good idea to pass a function to `setState` instead of an object?\n\n- [ ] It provides better encapsulation.\n- [ ] It makes sure that the object is not mutated.\n- [ ] It automatically updates a component.\n- [x] `setState` is asynchronous and might result in out of sync values.\n\n[Reference](https://medium.com/@wisecobbler/using-a-function-in-setstate-instead-of-an-object-1f5cfd6e55d1)\n\n**Explanation:** Because `this.props` and `this.state` may be updated asynchronously, you should not rely on their values for calculating the next state.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q38. Why is it a good idea to pass a function to <code>setState</code> instead of an object?</h4>",
   "text": "Q38. Why is it a good idea to pass a function to setState instead of an object?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It provides better encapsulation.",
    "text": "It provides better encapsulation."
   },
   {
    "isCorrect": false,
    "html": "It makes sure that the object is not mutated.",
    "text": "It makes sure that the object is not mutated."
   },
   {
    "isCorrect": false,
    "html": "It automatically updates a component.",
    "text": "It automatically updates a component."
   },
   {
    "isCorrect": true,
    "html": "<code>setState</code> is asynchronous and might result in out of sync values.",
    "text": "setState is asynchronous and might result in out of sync values."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://medium.com/@wisecobbler/using-a-function-in-setstate-instead-of-an-object-1f5cfd6e55d1\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q39. What package contains the render() function that renders a React element tree to the DOM?\n\n- [ ] `React`\n- [x] `ReactDOM`\n- [ ] `Render`\n- [ ] `DOM`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q39. What package contains the render() function that renders a React element tree to the DOM?</h4>",
   "text": "Q39. What package contains the render() function that renders a React element tree to the DOM?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>React</code>",
    "text": "React"
   },
   {
    "isCorrect": true,
    "html": "<code>ReactDOM</code>",
    "text": "ReactDOM"
   },
   {
    "isCorrect": false,
    "html": "<code>Render</code>",
    "text": "Render"
   },
   {
    "isCorrect": false,
    "html": "<code>DOM</code>",
    "text": "DOM"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q40. How do you set a default value for an uncontrolled form field?\n\n- [ ] Use the `value` property.\n- [x] Use the `defaultValue` property.\n- [ ] Use the `default` property.\n- [ ] It assigns one automatically.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q40. How do you set a default value for an uncontrolled form field?</h4>",
   "text": "Q40. How do you set a default value for an uncontrolled form field?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Use the <code>value</code> property.",
    "text": "Use the value property."
   },
   {
    "isCorrect": true,
    "html": "Use the <code>defaultValue</code> property.",
    "text": "Use the defaultValue property."
   },
   {
    "isCorrect": false,
    "html": "Use the <code>default</code> property.",
    "text": "Use the default property."
   },
   {
    "isCorrect": false,
    "html": "It assigns one automatically.",
    "text": "It assigns one automatically."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q41. What do you need to change about this code to get it to run?\n\n```js\nconst clock = (props) => {\n  return <h1>Look at the time: {props.time}</h1>;\n};\n```\n\n- [ ] Add quotes around the return value\n- [ ] Remove `this`\n- [ ] Remove the render method\n- [x] Capitalize `clock`\n\n[Reference](https://reactjs.org/docs/jsx-in-depth.html#html-tags-vs.-react-components)\n\n**Explanation:** In JSX, lower-case tag names are considered to be HTML tags.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q41. What do you need to change about this code to get it to run?</h4>",
   "text": "Q41. What do you need to change about this code to get it to run?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clock</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Look at the time<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const clock = (props) => {\n  return <h1>Look at the time: {props.time}</h1>;\n};\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Add quotes around the return value",
    "text": "Add quotes around the return value"
   },
   {
    "isCorrect": false,
    "html": "Remove <code>this</code>",
    "text": "Remove this"
   },
   {
    "isCorrect": false,
    "html": "Remove the render method",
    "text": "Remove the render method"
   },
   {
    "isCorrect": true,
    "html": "Capitalize <code>clock</code>",
    "text": "Capitalize clock"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/jsx-in-depth.html#html-tags-vs.-react-components\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q42. Which Hook could be used to update the document's title?\n\n- [x] `useEffect(function updateTitle() { document.title = name + ' ' + lastname; });`\n- [ ] `useEffect(() => { title = name + ' ' + lastname; });`\n- [ ] `useEffect(function updateTitle() { name + ' ' + lastname; });`\n- [ ] `useEffect(function updateTitle() { title = name + ' ' + lastname; });`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q42. Which Hook could be used to update the document's title?</h4>",
   "text": "Q42. Which Hook could be used to update the document's title?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "<code>useEffect(function updateTitle() { document.title = name + ' ' + lastname; });</code>",
    "text": "useEffect(function updateTitle() { document.title = name + ' ' + lastname; });"
   },
   {
    "isCorrect": false,
    "html": "<code>useEffect(() =&gt; { title = name + ' ' + lastname; });</code>",
    "text": "useEffect(() => { title = name + ' ' + lastname; });"
   },
   {
    "isCorrect": false,
    "html": "<code>useEffect(function updateTitle() { name + ' ' + lastname; });</code>",
    "text": "useEffect(function updateTitle() { name + ' ' + lastname; });"
   },
   {
    "isCorrect": false,
    "html": "<code>useEffect(function updateTitle() { title = name + ' ' + lastname; });</code>",
    "text": "useEffect(function updateTitle() { title = name + ' ' + lastname; });"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q43. Which function from React can you use to wrap Component imports to load them lazily?\n\n- [ ] `fallback`\n- [ ] `split`\n- [x] `lazy`\n- [ ] `memo`\n\n[Reference](https://blog.logrocket.com/lazy-loading-components-in-react-16-6-6cea535c0b52/)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q43. Which function from React can you use to wrap Component imports to load them lazily?</h4>",
   "text": "Q43. Which function from React can you use to wrap Component imports to load them lazily?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>fallback</code>",
    "text": "fallback"
   },
   {
    "isCorrect": false,
    "html": "<code>split</code>",
    "text": "split"
   },
   {
    "isCorrect": true,
    "html": "<code>lazy</code>",
    "text": "lazy"
   },
   {
    "isCorrect": false,
    "html": "<code>memo</code>",
    "text": "memo"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://blog.logrocket.com/lazy-loading-components-in-react-16-6-6cea535c0b52/\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q44. How do you invoke setDone only when component mounts, using hooks?\n\n```javascript\nfunction MyComponent(props) {\n  const [done, setDone] = useState(false);\n\n  return <h1>Done: {done}</h1>;\n}\n```\n\n- [ ] `useEffect(() => { setDone(true); });`\n- [x] `useEffect(() => { setDone(true); }, []);`\n- [ ] `useEffect(() => { setDone(true); }, [setDone]);`\n- [ ] `useEffect(() => { setDone(true); }, [done, setDone]);`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q44. How do you invoke setDone only when component mounts, using hooks?</h4>",
   "text": "Q44. How do you invoke setDone only when component mounts, using hooks?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>done<span class=\"token punctuation\">,</span> setDone<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Done<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>done<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "function MyComponent(props) {\n  const [done, setDone] = useState(false);\n\n  return <h1>Done: {done}</h1>;\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>useEffect(() =&gt; { setDone(true); });</code>",
    "text": "useEffect(() => { setDone(true); });"
   },
   {
    "isCorrect": true,
    "html": "<code>useEffect(() =&gt; { setDone(true); }, []);</code>",
    "text": "useEffect(() => { setDone(true); }, []);"
   },
   {
    "isCorrect": false,
    "html": "<code>useEffect(() =&gt; { setDone(true); }, [setDone]);</code>",
    "text": "useEffect(() => { setDone(true); }, [setDone]);"
   },
   {
    "isCorrect": false,
    "html": "<code>useEffect(() =&gt; { setDone(true); }, [done, setDone]);</code>",
    "text": "useEffect(() => { setDone(true); }, [done, setDone]);"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q45. Currently, `handleClick` is being called instead of passed as a reference. How do you fix this?\n\n```javascript\n<button onClick={this.handleClick()}>Click this</button>\n```\n\n- [ ] `<button onClick={this.handleClick.bind(handleClick)}>Click this</button>`\n- [ ] `<button onClick={handleClick()}>Click this</button>`\n- [x] `<button onClick={this.handleClick}>Click this</button>`\n- [ ] `<button onclick={this.handleClick}>Click this</button>`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q45. Currently, <code>handleClick</code> is being called instead of passed as a reference. How do you fix this?</h4>",
   "text": "Q45. Currently, handleClick is being called instead of passed as a reference. How do you fix this?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>Click <span class=\"token keyword\">this</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<button onClick={this.handleClick()}>Click this</button>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>&lt;button onClick={this.handleClick.bind(handleClick)}&gt;Click this&lt;/button&gt;</code>",
    "text": "<button onClick={this.handleClick.bind(handleClick)}>Click this</button>"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;button onClick={handleClick()}&gt;Click this&lt;/button&gt;</code>",
    "text": "<button onClick={handleClick()}>Click this</button>"
   },
   {
    "isCorrect": true,
    "html": "<code>&lt;button onClick={this.handleClick}&gt;Click this&lt;/button&gt;</code>",
    "text": "<button onClick={this.handleClick}>Click this</button>"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;button onclick={this.handleClick}&gt;Click this&lt;/button&gt;</code>",
    "text": "<button onclick={this.handleClick}>Click this</button>"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q46. Which answer best describes a function component?\n\n- [ ] A function component is the same as a class component.\n- [x] A function component accepts a single props object and returns a React element.\n- [ ] A function component is the only way to create a component.\n- [ ] A function component is required to create a React component.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q46. Which answer best describes a function component?</h4>",
   "text": "Q46. Which answer best describes a function component?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A function component is the same as a class component.",
    "text": "A function component is the same as a class component."
   },
   {
    "isCorrect": true,
    "html": "A function component accepts a single props object and returns a React element.",
    "text": "A function component accepts a single props object and returns a React element."
   },
   {
    "isCorrect": false,
    "html": "A function component is the only way to create a component.",
    "text": "A function component is the only way to create a component."
   },
   {
    "isCorrect": false,
    "html": "A function component is required to create a React component.",
    "text": "A function component is required to create a React component."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q47. Which library does the `fetch()` function come from?\n\n- [ ] FetchJS\n- [ ] ReactDOM\n- [x] No library. `fetch()` is supported by most browsers.\n- [ ] React\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q47. Which library does the <code>fetch()</code> function come from?</h4>",
   "text": "Q47. Which library does the fetch() function come from?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "FetchJS",
    "text": "FetchJS"
   },
   {
    "isCorrect": false,
    "html": "ReactDOM",
    "text": "ReactDOM"
   },
   {
    "isCorrect": true,
    "html": "No library. <code>fetch()</code> is supported by most browsers.",
    "text": "No library. fetch() is supported by most browsers."
   },
   {
    "isCorrect": false,
    "html": "React",
    "text": "React"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q48. What will happen when this useEffect Hook is executed, assuming name is not already equal to John?\n\n```javascript\nuseEffect(() => {\n  setName('John');\n}, [name]);\n```\n\n- [ ] It will cause an error immediately.\n- [ ] It will execute the code inside the function, but only after waiting to ensure that no other component is accessing the name variable.\n- [x] It will update the value of name once and not run again until name is changed from the outside.\n- [ ] It will cause an infinite loop.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q48. What will happen when this useEffect Hook is executed, assuming name is not already equal to John?</h4>",
   "text": "Q48. What will happen when this useEffect Hook is executed, assuming name is not already equal to John?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "useEffect(() => {\n  setName('John');\n}, [name]);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It will cause an error immediately.",
    "text": "It will cause an error immediately."
   },
   {
    "isCorrect": false,
    "html": "It will execute the code inside the function, but only after waiting to ensure that no other component is accessing the name variable.",
    "text": "It will execute the code inside the function, but only after waiting to ensure that no other component is accessing the name variable."
   },
   {
    "isCorrect": true,
    "html": "It will update the value of name once and not run again until name is changed from the outside.",
    "text": "It will update the value of name once and not run again until name is changed from the outside."
   },
   {
    "isCorrect": false,
    "html": "It will cause an infinite loop.",
    "text": "It will cause an infinite loop."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q49. Which choice will not cause a React component to rerender?\n\n- [ ] if the component calls `this.setState(...)`\n- [ ] the value of one of the component's props changes\n- [ ] if the component calls `this.forceUpdate()`\n- [x] one of the component's siblings rerenders\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q49. Which choice will not cause a React component to rerender?</h4>",
   "text": "Q49. Which choice will not cause a React component to rerender?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "if the component calls <code>this.setState(...)</code>",
    "text": "if the component calls this.setState(...)"
   },
   {
    "isCorrect": false,
    "html": "the value of one of the component's props changes",
    "text": "the value of one of the component's props changes"
   },
   {
    "isCorrect": false,
    "html": "if the component calls <code>this.forceUpdate()</code>",
    "text": "if the component calls this.forceUpdate()"
   },
   {
    "isCorrect": true,
    "html": "one of the component's siblings rerenders",
    "text": "one of the component's siblings rerenders"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q50. You have created a new method in a class component called handleClick, but it is not working. Which code is missing?\n\n```javascript\nclass Button extends React.Component{\n\n  constructor(props) {\n    super(props);\n    // Missing line\n  }\n\n  handleClick() {...}\n}\n```\n\n- [ ] `this.handleClick.bind(this);`\n- [ ] `props.bind(handleClick);`\n- [ ] `this.handleClick.bind();`\n- [x] `this.handleClick = this.handleClick.bind(this);`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q50. You have created a new method in a class component called handleClick, but it is not working. Which code is missing?</h4>",
   "text": "Q50. You have created a new method in a class component called handleClick, but it is not working. Which code is missing?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Missing line</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "class Button extends React.Component{\n\n  constructor(props) {\n    super(props);\n    // Missing line\n  }\n\n  handleClick() {...}\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>this.handleClick.bind(this);</code>",
    "text": "this.handleClick.bind(this);"
   },
   {
    "isCorrect": false,
    "html": "<code>props.bind(handleClick);</code>",
    "text": "props.bind(handleClick);"
   },
   {
    "isCorrect": false,
    "html": "<code>this.handleClick.bind();</code>",
    "text": "this.handleClick.bind();"
   },
   {
    "isCorrect": true,
    "html": "<code>this.handleClick = this.handleClick.bind(this);</code>",
    "text": "this.handleClick = this.handleClick.bind(this);"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q51. React does not render two sibling elements unless they are wrapped in a fragment. Below is one way to render a fragment. What is the shorthand for this?\n\n```javascript\n<React.Fragment>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n</React.Fragment>\n```\n\n- [ ] A\n\n```javascript\n<...>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n</...>\n```\n\n- [ ] B\n\n```javascript\n<//>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n<///>\n```\n\n- [x] C\n\n```javascript\n<>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n</>\n```\n\n- [ ] D\n\n```javascript\n<Frag>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n</Frag>\n```\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q51. React does not render two sibling elements unless they are wrapped in a fragment. Below is one way to render a fragment. What is the shorthand for this?</h4>",
   "text": "Q51. React does not render two sibling elements unless they are wrapped in a fragment. Below is one way to render a fragment. What is the shorthand for this?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Our Staff<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Our staff is available <span class=\"token number\">9</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> to answer your questions<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<React.Fragment>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n</React.Fragment>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Our Staff<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Our staff is available <span class=\"token number\">9</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> to answer your questions<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">...</span><span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "A<...>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n</...>\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token comment\">//&gt;</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Our Staff<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Our staff is available <span class=\"token number\">9</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> to answer your questions<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token comment\">///&gt;</span>\n</code></pre>",
    "text": "B<//>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n<///>\n"
   },
   {
    "isCorrect": true,
    "html": "C<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Our Staff<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Our staff is available <span class=\"token number\">9</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> to answer your questions<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "C<>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n</>\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Frag<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Our Staff<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Our staff is available <span class=\"token number\">9</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> to answer your questions<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Frag<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "D<Frag>\n  <h1>Our Staff</h1>\n  <p>Our staff is available 9-5 to answer your questions</p>\n</Frag>\n"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q52. If you wanted to display the count state value in the component, what do you need to add to the curly braces in the `h1`?\n\n```javascript\nclass Ticker extends React.component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n  render() {\n    return <h1>{}</h1>;\n  }\n}\n```\n\n- [x] this.state.count\n- [ ] count\n- [ ] state\n- [ ] state.count\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q52. If you wanted to display the count state value in the component, what do you need to add to the curly braces in the <code>h1</code>?</h4>",
   "text": "Q52. If you wanted to display the count state value in the component, what do you need to add to the curly braces in the h1?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ticker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "class Ticker extends React.component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n  render() {\n    return <h1>{}</h1>;\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "this.state.count",
    "text": "this.state.count"
   },
   {
    "isCorrect": false,
    "html": "count",
    "text": "count"
   },
   {
    "isCorrect": false,
    "html": "state",
    "text": "state"
   },
   {
    "isCorrect": false,
    "html": "state.count",
    "text": "state.count"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q53. Per the following code, when is the Hello component assigned to greeting?\n\n```javascript\nconst greeting = isLoggedIn ? <Hello /> : null;\n```\n\n- [ ] never\n- [x] when `isLoggedIn` is true\n- [ ] when a user logs in\n- [ ] when the Hello function is called\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q53. Per the following code, when is the Hello component assigned to greeting?</h4>",
   "text": "Q53. Per the following code, when is the Hello component assigned to greeting?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> isLoggedIn <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const greeting = isLoggedIn ? <Hello /> : null;\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "never",
    "text": "never"
   },
   {
    "isCorrect": true,
    "html": "when <code>isLoggedIn</code> is true",
    "text": "when isLoggedIn is true"
   },
   {
    "isCorrect": false,
    "html": "when a user logs in",
    "text": "when a user logs in"
   },
   {
    "isCorrect": false,
    "html": "when the Hello function is called",
    "text": "when the Hello function is called"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q54. In the following code block, what type is orderNumber?\n\n```javascript\nReactDOM.render(<Message orderNumber=\"16\" />, document.getElementById('root'));\n```\n\n- [x] string\n- [ ] boolean\n- [ ] object\n- [ ] number\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q54. In the following code block, what type is orderNumber?</h4>",
   "text": "Q54. In the following code block, what type is orderNumber?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Message orderNumber<span class=\"token operator\">=</span><span class=\"token string\">\"16\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "ReactDOM.render(<Message orderNumber=\"16\" />, document.getElementById('root'));\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "string",
    "text": "string"
   },
   {
    "isCorrect": false,
    "html": "boolean",
    "text": "boolean"
   },
   {
    "isCorrect": false,
    "html": "object",
    "text": "object"
   },
   {
    "isCorrect": false,
    "html": "number",
    "text": "number"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q55. You have added a style property to the `h1` but there is an unexpected token error when it runs. How do you fix this?\n\n```javascript\nconst element = <h1 style={ backgroundColor: \"blue\" }>Hi</h1>;\n```\n\n- [ ] `const element = <h1 style=\"backgroundColor: \"blue\"\"}>Hi</h1>;`\n- [x] `const element = <h1 style={{backgroundColor: \"blue\"}}>Hi</h1>;`\n- [ ] `const element = <h1 style={blue}>Hi</h1>;`\n- [ ] `const element = <h1 style=\"blue\">Hi</h1>;`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q55. You have added a style property to the <code>h1</code> but there is an unexpected token error when it runs. How do you fix this?</h4>",
   "text": "Q55. You have added a style property to the h1 but there is an unexpected token error when it runs. How do you fix this?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>Hi<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const element = <h1 style={ backgroundColor: \"blue\" }>Hi</h1>;\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>const element = &lt;h1 style=\"backgroundColor: \"blue\"\"}&gt;Hi&lt;/h1&gt;;</code>",
    "text": "const element = <h1 style=\"backgroundColor: \"blue\"\"}>Hi</h1>;"
   },
   {
    "isCorrect": true,
    "html": "<code>const element = &lt;h1 style={{backgroundColor: \"blue\"}}&gt;Hi&lt;/h1&gt;;</code>",
    "text": "const element = <h1 style={{backgroundColor: \"blue\"}}>Hi</h1>;"
   },
   {
    "isCorrect": false,
    "html": "<code>const element = &lt;h1 style={blue}&gt;Hi&lt;/h1&gt;;</code>",
    "text": "const element = <h1 style={blue}>Hi</h1>;"
   },
   {
    "isCorrect": false,
    "html": "<code>const element = &lt;h1 style=\"blue\"&gt;Hi&lt;/h1&gt;;</code>",
    "text": "const element = <h1 style=\"blue\">Hi</h1>;"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q56. Which function is used to update state variables in a React class component?\n\n- [ ] `replaceState`\n- [ ] `refreshState`\n- [ ] `updateState`\n- [x] `setState`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q56. Which function is used to update state variables in a React class component?</h4>",
   "text": "Q56. Which function is used to update state variables in a React class component?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>replaceState</code>",
    "text": "replaceState"
   },
   {
    "isCorrect": false,
    "html": "<code>refreshState</code>",
    "text": "refreshState"
   },
   {
    "isCorrect": false,
    "html": "<code>updateState</code>",
    "text": "updateState"
   },
   {
    "isCorrect": true,
    "html": "<code>setState</code>",
    "text": "setState"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q57. Consider the following component. What is the default color for the star?\n\n```javascript\nconst Star = ({ selected = false }) => <Icon color={selected ? 'red' : 'grey'} />;\n```\n\n- [ ] black\n- [ ] red\n- [x] grey\n- [ ] white\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q57. Consider the following component. What is the default color for the star?</h4>",
   "text": "Q57. Consider the following component. What is the default color for the star?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Star</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> selected <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">&lt;</span>Icon color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>selected <span class=\"token operator\">?</span> <span class=\"token string\">'red'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'grey'</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const Star = ({ selected = false }) => <Icon color={selected ? 'red' : 'grey'} />;\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "black",
    "text": "black"
   },
   {
    "isCorrect": false,
    "html": "red",
    "text": "red"
   },
   {
    "isCorrect": true,
    "html": "grey",
    "text": "grey"
   },
   {
    "isCorrect": false,
    "html": "white",
    "text": "white"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q58. What is the difference between the click behaviors of these two buttons(assuming that this.handleClick is not bound correctly)\n\n```javascript\n  A. <button onClick=this.handleClick>Click Me</button>\n  B. <button onClick={event => this.handleClick(event)}>Click Me</button>\n```\n\n- [ ] `Button A will not have access to the event object on click of the button`\n- [x] `Button A will not fire the handler this.handleClick successfully`\n- [ ] `There is no difference`\n- [ ] `Button B will not fire the handler this.handleClick successfully`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q58. What is the difference between the click behaviors of these two buttons(assuming that this.handleClick is not bound correctly)</h4>",
   "text": "Q58. What is the difference between the click behaviors of these two buttons(assuming that this.handleClick is not bound correctly)"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">  <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token operator\">&gt;</span>Click Me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n  <span class=\"token constant\">B</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>Click Me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "  A. <button onClick=this.handleClick>Click Me</button>\n  B. <button onClick={event => this.handleClick(event)}>Click Me</button>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>Button A will not have access to the event object on click of the button</code>",
    "text": "Button A will not have access to the event object on click of the button"
   },
   {
    "isCorrect": true,
    "html": "<code>Button A will not fire the handler this.handleClick successfully</code>",
    "text": "Button A will not fire the handler this.handleClick successfully"
   },
   {
    "isCorrect": false,
    "html": "<code>There is no difference</code>",
    "text": "There is no difference"
   },
   {
    "isCorrect": false,
    "html": "<code>Button B will not fire the handler this.handleClick successfully</code>",
    "text": "Button B will not fire the handler this.handleClick successfully"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q59. How would you add to this code, from React Router, to display a component called About?\n\n```javascript\n<Route path=\"/:id\" />\n```\n\n- [x] A\n\n```javascript\n<Route path=\"/:id\">\n  {' '}\n  <About />\n</Route>\n```\n\n- [ ] B\n\n```javascript\n<Route path=\"/tid\" about={Component} />\n```\n\n- [ ] C\n\n```javascript\n<Route path=\"/:id\" route={About} />\n```\n\n- [ ] D\n\n```javascript\n<Route>\n  <About path=\"/:id\" />\n</Route>\n```\n\n[Reference](https://reactrouter.com/en/main/components/route)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q59. How would you add to this code, from React Router, to display a component called About?</h4>",
   "text": "Q59. How would you add to this code, from React Router, to display a component called About?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:id\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<Route path=\"/:id\" />\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "A<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:id\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">{</span><span class=\"token string\">' '</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>About <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "A<Route path=\"/:id\">\n  {' '}\n  <About />\n</Route>\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/tid\"</span> about<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "B<Route path=\"/tid\" about={Component} />\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:id\"</span> route<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>About<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "C<Route path=\"/:id\" route={About} />\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>About path<span class=\"token operator\">=</span><span class=\"token string\">\"/:id\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "D<Route>\n  <About path=\"/:id\" />\n</Route>\n"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactrouter.com/en/main/components/route\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q60. Which class-based component is equivalent to this function component?\n\n```javascript\nconst Greeting = ({ name }) => <h1>Hello {name}!</h1>;\n```\n\n- [ ] A\n\n```javascript\nclass Greeting extends React.Component {\n  constructor() {\n    return <h1>Hello {this.props.name}!</h1>;\n  }\n}\n```\n\n- [ ] B\n\n```javascript\nclass Greeting extends React.Component {\n  <h1>Hello {this.props.name}!</h1>;\n}\n```\n\n- [x] C\n\n```javascript\nclass Greeting extends React.Component {\n  render() {\n    return <h1>Hello {this.props.name}!</h1>;\n  }\n}\n```\n\n- [ ] D\n\n```javascript\nclass Greeting extends React.Component {\n  render({ name }) {\n    return <h1>Hello {name}!</h1>;\n  }\n}\n```\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q60. Which class-based component is equivalent to this function component?</h4>",
   "text": "Q60. Which class-based component is equivalent to this function component?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Hello <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const Greeting = ({ name }) => <h1>Hello {name}!</h1>;\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Hello <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "Aclass Greeting extends React.Component {\n  constructor() {\n    return <h1>Hello {this.props.name}!</h1>;\n  }\n}\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Hello <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "Bclass Greeting extends React.Component {\n  <h1>Hello {this.props.name}!</h1>;\n}\n"
   },
   {
    "isCorrect": true,
    "html": "C<br><pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Hello <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "Cclass Greeting extends React.Component {\n  render() {\n    return <h1>Hello {this.props.name}!</h1>;\n  }\n}\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Hello <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "Dclass Greeting extends React.Component {\n  render({ name }) {\n    return <h1>Hello {name}!</h1>;\n  }\n}\n"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q61. Give the code below, what does the second argument that is sent to the render function describe?\n\n```javascript\nReactDOM.render(\n  <h1>Hi<h1>,\n    document.getElementById('root')\n)\n```\n\n- [x] where the React element should be added to the DOM\n- [ ] where to call the function\n- [ ] where the root component is\n- [ ] where to create a new JavaScript file\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q61. Give the code below, what does the second argument that is sent to the render function describe?</h4>",
   "text": "Q61. Give the code below, what does the second argument that is sent to the render function describe?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Hi<span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>",
   "text": "ReactDOM.render(\n  <h1>Hi<h1>,\n    document.getElementById('root')\n)\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "where the React element should be added to the DOM",
    "text": "where the React element should be added to the DOM"
   },
   {
    "isCorrect": false,
    "html": "where to call the function",
    "text": "where to call the function"
   },
   {
    "isCorrect": false,
    "html": "where the root component is",
    "text": "where the root component is"
   },
   {
    "isCorrect": false,
    "html": "where to create a new JavaScript file",
    "text": "where to create a new JavaScript file"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q62. Why should you use React Router's Link component instead of a basic `<a>` tag in React?\n\n- [ ] The link component allows the user to use the browser's `Back` button.\n- [ ] There is no difference--the `Link` component is just another name for the `<a>` tag.\n- [ ] The `<a>` tag will cause an error when used in React.\n- [x] The `<a>` tag triggers a full page reload, while the `Link` component does not.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q62. Why should you use React Router's Link component instead of a basic <code>&lt;a&gt;</code> tag in React?</h4>",
   "text": "Q62. Why should you use React Router's Link component instead of a basic <a> tag in React?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The link component allows the user to use the browser's <code>Back</code> button.",
    "text": "The link component allows the user to use the browser's Back button."
   },
   {
    "isCorrect": false,
    "html": "There is no difference--the <code>Link</code> component is just another name for the <code>&lt;a&gt;</code> tag.",
    "text": "There is no difference--the Link component is just another name for the <a> tag."
   },
   {
    "isCorrect": false,
    "html": "The <code>&lt;a&gt;</code> tag will cause an error when used in React.",
    "text": "The <a> tag will cause an error when used in React."
   },
   {
    "isCorrect": true,
    "html": "The <code>&lt;a&gt;</code> tag triggers a full page reload, while the <code>Link</code> component does not.",
    "text": "The <a> tag triggers a full page reload, while the Link component does not."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q63. What is the first argument, `x`, that is sent to the `createElement` function?\n\n```javascript\nReact.createElement(x, y, z);\n```\n\n- [x] the element that should be created\n- [ ] the order in which this element should be placed on the page\n- [ ] the properties of the element\n- [ ] data that should be displayed in the element\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q63. What is the first argument, <code>x</code>, that is sent to the <code>createElement</code> function?</h4>",
   "text": "Q63. What is the first argument, x, that is sent to the createElement function?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "React.createElement(x, y, z);\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "the element that should be created",
    "text": "the element that should be created"
   },
   {
    "isCorrect": false,
    "html": "the order in which this element should be placed on the page",
    "text": "the order in which this element should be placed on the page"
   },
   {
    "isCorrect": false,
    "html": "the properties of the element",
    "text": "the properties of the element"
   },
   {
    "isCorrect": false,
    "html": "data that should be displayed in the element",
    "text": "data that should be displayed in the element"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q64. Which class-based lifecycle method would be called at the same time as this effect Hook?\n\n```javascript\nuseEffect(() => {\n  // do things\n}, []);\n```\n\n- [ ] componentWillUnmount\n- [x] componentDidMount\n- [ ] render\n- [ ] componentDidUpdate\n\n[Reference](https://reactjs.org/docs/react-component.html#componentdidmount)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q64. Which class-based lifecycle method would be called at the same time as this effect Hook?</h4>",
   "text": "Q64. Which class-based lifecycle method would be called at the same time as this effect Hook?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do things</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "useEffect(() => {\n  // do things\n}, []);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "componentWillUnmount",
    "text": "componentWillUnmount"
   },
   {
    "isCorrect": true,
    "html": "componentDidMount",
    "text": "componentDidMount"
   },
   {
    "isCorrect": false,
    "html": "render",
    "text": "render"
   },
   {
    "isCorrect": false,
    "html": "componentDidUpdate",
    "text": "componentDidUpdate"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q65. What is the name of the base component of this component?\n\n```javascript\nclass Comp extends React.Component {\n  render() {\n    return <h1>Look at the time: {time}</h1>;\n  }\n}\n```\n\n- [ ] Comp\n- [ ] h1\n- [ ] React.Component\n- [x] Component\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q65. What is the name of the base component of this component?</h4>",
   "text": "Q65. What is the name of the base component of this component?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Comp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Look at the time<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "class Comp extends React.Component {\n  render() {\n    return <h1>Look at the time: {time}</h1>;\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Comp",
    "text": "Comp"
   },
   {
    "isCorrect": false,
    "html": "h1",
    "text": "h1"
   },
   {
    "isCorrect": false,
    "html": "React.Component",
    "text": "React.Component"
   },
   {
    "isCorrect": true,
    "html": "Component",
    "text": "Component"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q66. When using a portal, what is the first argument?\n\n```javascript\nReactDOM.createPortal(x, y);\n```\n\n- [ ] the current state\n- [x] the element to render\n- [ ] the App component\n- [ ] the page\n\n[Reference](https://reactjs.org/docs/portals.html)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q66. When using a portal, what is the first argument?</h4>",
   "text": "Q66. When using a portal, what is the first argument?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "ReactDOM.createPortal(x, y);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "the current state",
    "text": "the current state"
   },
   {
    "isCorrect": true,
    "html": "the element to render",
    "text": "the element to render"
   },
   {
    "isCorrect": false,
    "html": "the App component",
    "text": "the App component"
   },
   {
    "isCorrect": false,
    "html": "the page",
    "text": "the page"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/portals.html\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q67. What is `setCount`?\n\n```javascript\nconst [count, setCount] = useState(0);\n```\n\n- [ ] the initial state value\n- [ ] a variable\n- [ ] a state object\n- [x] a function to update the state\n\n[Reference](https://reactjs.org/docs/hooks-state.html#:~:text=If%20we%20want%20to%20update%20the%20current)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q67. What is <code>setCount</code>?</h4>",
   "text": "Q67. What is setCount?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const [count, setCount] = useState(0);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "the initial state value",
    "text": "the initial state value"
   },
   {
    "isCorrect": false,
    "html": "a variable",
    "text": "a variable"
   },
   {
    "isCorrect": false,
    "html": "a state object",
    "text": "a state object"
   },
   {
    "isCorrect": true,
    "html": "a function to update the state",
    "text": "a function to update the state"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/hooks-state.html#:~:text=If%20we%20want%20to%20update%20the%20current\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q68. What is the use of map function below?\n\n```javascript\nconst database = [{ data: 1 }, { data: 2 }, { data: 3 }];\ndatabase.map((user) => <h1>{user.data}</h1>);\n```\n\n- [ ] gives a map of all the entries in database\n- [x] returns a heading tag for every entry in the database containing it's data\n- [ ] returns one heading tag for all the entries in database\n- [ ] checks which entry in the database is suitable for heading tag\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q68. What is the use of map function below?</h4>",
   "text": "Q68. What is the use of map function below?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> database <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const database = [{ data: 1 }, { data: 2 }, { data: 3 }];\ndatabase.map((user) => <h1>{user.data}</h1>);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "gives a map of all the entries in database",
    "text": "gives a map of all the entries in database"
   },
   {
    "isCorrect": true,
    "html": "returns a heading tag for every entry in the database containing it's data",
    "text": "returns a heading tag for every entry in the database containing it's data"
   },
   {
    "isCorrect": false,
    "html": "returns one heading tag for all the entries in database",
    "text": "returns one heading tag for all the entries in database"
   },
   {
    "isCorrect": false,
    "html": "checks which entry in the database is suitable for heading tag",
    "text": "checks which entry in the database is suitable for heading tag"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q69. Describe what is happening in this code?\n\n```javascript\nconst { name: firstName } = props;\n```\n\n- [ ] It is creating a new object that contains the same name property as the props object.\n- [ ] It is assigning the value of the props object's firstName property to a constant called name.\n- [ ] It is retrieving the value of props.name.firstName.\n- [x] It is assigning the value of the props object's name property to a constant called firstName.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q69. Describe what is happening in this code?</h4>",
   "text": "Q69. Describe what is happening in this code?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> firstName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const { name: firstName } = props;\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It is creating a new object that contains the same name property as the props object.",
    "text": "It is creating a new object that contains the same name property as the props object."
   },
   {
    "isCorrect": false,
    "html": "It is assigning the value of the props object's firstName property to a constant called name.",
    "text": "It is assigning the value of the props object's firstName property to a constant called name."
   },
   {
    "isCorrect": false,
    "html": "It is retrieving the value of props.name.firstName.",
    "text": "It is retrieving the value of props.name.firstName."
   },
   {
    "isCorrect": true,
    "html": "It is assigning the value of the props object's name property to a constant called firstName.",
    "text": "It is assigning the value of the props object's name property to a constant called firstName."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q70. What is wrong with this code?\n\n```javascript\nconst MyComponent = ({ names }) => (\n  <h1>Hello</h1>\n  <p>Hello again</p>\n);\n```\n\n- [ ] React components cannot be defined using functions.\n- [x] React does not allow components to return more than one element.\n- [ ] The component needs to use the return keyword.\n- [ ] String literals must be surrounded by quotes.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q70. What is wrong with this code?</h4>",
   "text": "Q70. What is wrong with this code?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> names <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Hello again<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const MyComponent = ({ names }) => (\n  <h1>Hello</h1>\n  <p>Hello again</p>\n);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "React components cannot be defined using functions.",
    "text": "React components cannot be defined using functions."
   },
   {
    "isCorrect": true,
    "html": "React does not allow components to return more than one element.",
    "text": "React does not allow components to return more than one element."
   },
   {
    "isCorrect": false,
    "html": "The component needs to use the return keyword.",
    "text": "The component needs to use the return keyword."
   },
   {
    "isCorrect": false,
    "html": "String literals must be surrounded by quotes.",
    "text": "String literals must be surrounded by quotes."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q71. When using a portal, what is the second argument?\n\n```javascript\nReactDOM.createPortal(x, y);\n```\n\n- [ ] the App component\n- [ ] the page\n- [ ] the current state\n- [x] the DOM element that exists outside of the parent component\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q71. When using a portal, what is the second argument?</h4>",
   "text": "Q71. When using a portal, what is the second argument?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "ReactDOM.createPortal(x, y);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "the App component",
    "text": "the App component"
   },
   {
    "isCorrect": false,
    "html": "the page",
    "text": "the page"
   },
   {
    "isCorrect": false,
    "html": "the current state",
    "text": "the current state"
   },
   {
    "isCorrect": true,
    "html": "the DOM element that exists outside of the parent component",
    "text": "the DOM element that exists outside of the parent component"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q72. Given this code, what will be printed in the `<div>` tag?\n\n```javascript\nconst MyComponent = ({ children }) => (\n  <div>{children.length}</div>\n);\n...\n<MyComponent>\n<p>\n  Hello <span>World!</span>\n</p>\n<p>Goodbye</p>\n</MyComponent>\n```\n\n- [ ] It will produce an error saying \"cannot read property \"length\" of undefined.\"\n- [ ] 1\n- [ ] undefined\n- [x] 2\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q72. Given this code, what will be printed in the <code>&lt;div&gt;</code> tag?</h4>",
   "text": "Q72. Given this code, what will be printed in the <div> tag?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">&lt;</span>MyComponent<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>\n  Hello <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span>World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Goodbye<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyComponent<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "const MyComponent = ({ children }) => (\n  <div>{children.length}</div>\n);\n...\n<MyComponent>\n<p>\n  Hello <span>World!</span>\n</p>\n<p>Goodbye</p>\n</MyComponent>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It will produce an error saying \"cannot read property \"length\" of undefined.\"",
    "text": "It will produce an error saying \"cannot read property \"length\" of undefined.\""
   },
   {
    "isCorrect": false,
    "html": "1",
    "text": "1"
   },
   {
    "isCorrect": false,
    "html": "undefined",
    "text": "undefined"
   },
   {
    "isCorrect": true,
    "html": "2",
    "text": "2"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q73. What is this pattern called?\n\n```javascript\nconst [count, setCount] = useState(0);\n```\n\n- [ ] object destructuring\n- [x] array destructuring\n- [ ] spread operating\n- [ ] code pushing\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q73. What is this pattern called?</h4>",
   "text": "Q73. What is this pattern called?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const [count, setCount] = useState(0);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "object destructuring",
    "text": "object destructuring"
   },
   {
    "isCorrect": true,
    "html": "array destructuring",
    "text": "array destructuring"
   },
   {
    "isCorrect": false,
    "html": "spread operating",
    "text": "spread operating"
   },
   {
    "isCorrect": false,
    "html": "code pushing",
    "text": "code pushing"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q74. What is the first file loaded by the browser in a basic React project?\n\n- [ ] src/App.js\n- [ ] src/index.js\n- [ ] public/manifest.json\n- [x] public/index.html\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q74. What is the first file loaded by the browser in a basic React project?</h4>",
   "text": "Q74. What is the first file loaded by the browser in a basic React project?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "src/App.js",
    "text": "src/App.js"
   },
   {
    "isCorrect": false,
    "html": "src/index.js",
    "text": "src/index.js"
   },
   {
    "isCorrect": false,
    "html": "public/manifest.json",
    "text": "public/manifest.json"
   },
   {
    "isCorrect": true,
    "html": "public/index.html",
    "text": "public/index.html"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q75. The code below is rendering nothing and generate this error: \"ReactDOM is not defined.\" How do you fix this issue?\n\n```javascript\nimport React from 'react';\nimport { createRoot } from 'reactjs-dom';\n\nconst element = <h1>Hi</h1>;\n// Note: error on the line below\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(element);\n```\n\n- [x] `createRoot(document.getElementById(\"root\"));`\n- [ ] `ReactDOM(element, document.getElementById(\"root\"));`\n- [ ] `renderDOM(element, document.getElementById(\"root\"));`\n- [ ] `DOM(element, document.getElementById(\"root\"));`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q75. The code below is rendering nothing and generate this error: \"ReactDOM is not defined.\" How do you fix this issue?</h4>",
   "text": "Q75. The code below is rendering nothing and generate this error: \"ReactDOM is not defined.\" How do you fix this issue?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reactjs-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Hi<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Note: error on the line below</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "import React from 'react';\nimport { createRoot } from 'reactjs-dom';\n\nconst element = <h1>Hi</h1>;\n// Note: error on the line below\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(element);\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "<code>createRoot(document.getElementById(\"root\"));</code>",
    "text": "createRoot(document.getElementById(\"root\"));"
   },
   {
    "isCorrect": false,
    "html": "<code>ReactDOM(element, document.getElementById(\"root\"));</code>",
    "text": "ReactDOM(element, document.getElementById(\"root\"));"
   },
   {
    "isCorrect": false,
    "html": "<code>renderDOM(element, document.getElementById(\"root\"));</code>",
    "text": "renderDOM(element, document.getElementById(\"root\"));"
   },
   {
    "isCorrect": false,
    "html": "<code>DOM(element, document.getElementById(\"root\"));</code>",
    "text": "DOM(element, document.getElementById(\"root\"));"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q76. In this component, how do you display whether the user was logged in or not?\n\n```javascript\nrender() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      The user is:\n    </div>\n  );\n}\n```\n\n- [ ] `The user is loggedIn ? logged in : not logged in.`\n- [ ] Write a function to check the login status.\n- [ ] `The user is {isLoggedIn = \"no\"}.`\n- [x] `The user is {isLoggedIn ? \"logged in.\" : \"not logged in\"}.`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q76. In this component, how do you display whether the user was logged in or not?</h4>",
   "text": "Q76. In this component, how do you display whether the user was logged in or not?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n      The user is<span class=\"token operator\">:</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "render() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      The user is:\n    </div>\n  );\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>The user is loggedIn ? logged in : not logged in.</code>",
    "text": "The user is loggedIn ? logged in : not logged in."
   },
   {
    "isCorrect": false,
    "html": "Write a function to check the login status.",
    "text": "Write a function to check the login status."
   },
   {
    "isCorrect": false,
    "html": "<code>The user is {isLoggedIn = \"no\"}.</code>",
    "text": "The user is {isLoggedIn = \"no\"}."
   },
   {
    "isCorrect": true,
    "html": "<code>The user is {isLoggedIn ? \"logged in.\" : \"not logged in\"}.</code>",
    "text": "The user is {isLoggedIn ? \"logged in.\" : \"not logged in\"}."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q77. You are rendering a list with React when this warning appears in the console: \"Warning: Each child in a list should have a unique 'key' prop.\" How do you fix this issue?\n\n- [ ] Add a key prop with the same value to each item in the list\n- [ ] Clear the console warnings\n- [ ] Use the UseId hook to generate a unique key for each element in the list\n- [x] When iterating over the list items, add a unique property to each list item.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q77. You are rendering a list with React when this warning appears in the console: \"Warning: Each child in a list should have a unique 'key' prop.\" How do you fix this issue?</h4>",
   "text": "Q77. You are rendering a list with React when this warning appears in the console: \"Warning: Each child in a list should have a unique 'key' prop.\" How do you fix this issue?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Add a key prop with the same value to each item in the list",
    "text": "Add a key prop with the same value to each item in the list"
   },
   {
    "isCorrect": false,
    "html": "Clear the console warnings",
    "text": "Clear the console warnings"
   },
   {
    "isCorrect": false,
    "html": "Use the UseId hook to generate a unique key for each element in the list",
    "text": "Use the UseId hook to generate a unique key for each element in the list"
   },
   {
    "isCorrect": true,
    "html": "When iterating over the list items, add a unique property to each list item.",
    "text": "When iterating over the list items, add a unique property to each list item."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q78. How would you generate the boilerplate code for a new app that you are building to collect underpants?\n\n- [ ] npm create-react-app collect-underpants\n- [ ] npx start-app collect-underpants\n- [ ] react new collect-underpants\n- [x] npx create-react-app collect-underpants\n\n[Source: React Docs](https://reactjs.org/docs/create-a-new-react-app.html#create-react-app)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q78. How would you generate the boilerplate code for a new app that you are building to collect underpants?</h4>",
   "text": "Q78. How would you generate the boilerplate code for a new app that you are building to collect underpants?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "npm create-react-app collect-underpants",
    "text": "npm create-react-app collect-underpants"
   },
   {
    "isCorrect": false,
    "html": "npx start-app collect-underpants",
    "text": "npx start-app collect-underpants"
   },
   {
    "isCorrect": false,
    "html": "react new collect-underpants",
    "text": "react new collect-underpants"
   },
   {
    "isCorrect": true,
    "html": "npx create-react-app collect-underpants",
    "text": "npx create-react-app collect-underpants"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/create-a-new-react-app.html#create-react-app\">Source: React Docs</a></p>",
   "text": "Source: React Docs"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q79. Add the code that will fire the photon torpedoes when the button is clicked.\n\n```javascript\nclass StarTrekkin extends React.Component {\n  firePhotonTorpedoes(e) {\n    console.log('pew pew');\n  }\n  render() {\n    return; // Missing code\n  }\n}\n```\n\n- [ ] `<button onClick={firePhotonTorpedoes()}>Pew Pew</button>`\n- [ ] `<button onClick={firePhotonTorpedoes}>Pew Pew</button>`\n- [ ] `<button onClick={this.firePhotonTorpedoes()}>Pew Pew</button>`\n- [x] `<button onClick={this.firePhotonTorpedoes}>Pew Pew</button>`\n\n[Source: React Docs](https://reactjs.org/docs/handling-events.html)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q79. Add the code that will fire the photon torpedoes when the button is clicked.</h4>",
   "text": "Q79. Add the code that will fire the photon torpedoes when the button is clicked."
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StarTrekkin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">firePhotonTorpedoes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pew pew'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Missing code</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "class StarTrekkin extends React.Component {\n  firePhotonTorpedoes(e) {\n    console.log('pew pew');\n  }\n  render() {\n    return; // Missing code\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>&lt;button onClick={firePhotonTorpedoes()}&gt;Pew Pew&lt;/button&gt;</code>",
    "text": "<button onClick={firePhotonTorpedoes()}>Pew Pew</button>"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;button onClick={firePhotonTorpedoes}&gt;Pew Pew&lt;/button&gt;</code>",
    "text": "<button onClick={firePhotonTorpedoes}>Pew Pew</button>"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;button onClick={this.firePhotonTorpedoes()}&gt;Pew Pew&lt;/button&gt;</code>",
    "text": "<button onClick={this.firePhotonTorpedoes()}>Pew Pew</button>"
   },
   {
    "isCorrect": true,
    "html": "<code>&lt;button onClick={this.firePhotonTorpedoes}&gt;Pew Pew&lt;/button&gt;</code>",
    "text": "<button onClick={this.firePhotonTorpedoes}>Pew Pew</button>"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/handling-events.html\">Source: React Docs</a></p>",
   "text": "Source: React Docs"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q80. What is the process of deciding whether an update is necessary?\n\n- [ ] shadow DOM\n- [ ] fiber\n- [x] reconciliation\n- [ ] setting state\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q80. What is the process of deciding whether an update is necessary?</h4>",
   "text": "Q80. What is the process of deciding whether an update is necessary?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "shadow DOM",
    "text": "shadow DOM"
   },
   {
    "isCorrect": false,
    "html": "fiber",
    "text": "fiber"
   },
   {
    "isCorrect": true,
    "html": "reconciliation",
    "text": "reconciliation"
   },
   {
    "isCorrect": false,
    "html": "setting state",
    "text": "setting state"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q81. React is an open-source project but is maintained by which company?\n\n- [ ] Intuit\n- [ ] Twitter\n- [x] Facebook\n- [ ] Snapchat\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q81. React is an open-source project but is maintained by which company?</h4>",
   "text": "Q81. React is an open-source project but is maintained by which company?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Intuit",
    "text": "Intuit"
   },
   {
    "isCorrect": false,
    "html": "Twitter",
    "text": "Twitter"
   },
   {
    "isCorrect": true,
    "html": "Facebook",
    "text": "Facebook"
   },
   {
    "isCorrect": false,
    "html": "Snapchat",
    "text": "Snapchat"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q82. What command can you use to generate a React project?\n\n- [ ] react-starter\n- [x] create-react-app\n- [ ] react-gen\n- [ ] react-start\n\n[hint](https://create-react-app.dev/)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q82. What command can you use to generate a React project?</h4>",
   "text": "Q82. What command can you use to generate a React project?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "react-starter",
    "text": "react-starter"
   },
   {
    "isCorrect": true,
    "html": "create-react-app",
    "text": "create-react-app"
   },
   {
    "isCorrect": false,
    "html": "react-gen",
    "text": "react-gen"
   },
   {
    "isCorrect": false,
    "html": "react-start",
    "text": "react-start"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://create-react-app.dev/\">hint</a></p>",
   "text": "hint"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q83. What is the browser extension called that React developers use to debug applications?\n\n- [x] React Developer Tools\n- [ ] React Tooling Add-on\n- [ ] React Codewatch\n- [ ] React Debug\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q83. What is the browser extension called that React developers use to debug applications?</h4>",
   "text": "Q83. What is the browser extension called that React developers use to debug applications?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "React Developer Tools",
    "text": "React Developer Tools"
   },
   {
    "isCorrect": false,
    "html": "React Tooling Add-on",
    "text": "React Tooling Add-on"
   },
   {
    "isCorrect": false,
    "html": "React Codewatch",
    "text": "React Codewatch"
   },
   {
    "isCorrect": false,
    "html": "React Debug",
    "text": "React Debug"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q84. Which tool is not part of Create React App?\n\n- [ ] React\n- [x] jQuery\n- [ ] webpack\n- [ ] ReactDOM\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q84. Which tool is not part of Create React App?</h4>",
   "text": "Q84. Which tool is not part of Create React App?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "React",
    "text": "React"
   },
   {
    "isCorrect": true,
    "html": "jQuery",
    "text": "jQuery"
   },
   {
    "isCorrect": false,
    "html": "webpack",
    "text": "webpack"
   },
   {
    "isCorrect": false,
    "html": "ReactDOM",
    "text": "ReactDOM"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q85. What is the JavaScript syntax extension that is commonly used to create React elements?\n\n- [ ] HTML\n- [ ] JavaScriptX\n- [x] JSX\n- [ ] React JavaScript\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q85. What is the JavaScript syntax extension that is commonly used to create React elements?</h4>",
   "text": "Q85. What is the JavaScript syntax extension that is commonly used to create React elements?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "HTML",
    "text": "HTML"
   },
   {
    "isCorrect": false,
    "html": "JavaScriptX",
    "text": "JavaScriptX"
   },
   {
    "isCorrect": true,
    "html": "JSX",
    "text": "JSX"
   },
   {
    "isCorrect": false,
    "html": "React JavaScript",
    "text": "React JavaScript"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q86. How might you check property types without using Flow or TypeScript?\n\n- [ ] Check Manually.\n- [ ] Use `prop-helper`.\n- [x] use `prop-types`.\n- [ ] user `checker-types`.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q86. How might you check property types without using Flow or TypeScript?</h4>",
   "text": "Q86. How might you check property types without using Flow or TypeScript?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Check Manually.",
    "text": "Check Manually."
   },
   {
    "isCorrect": false,
    "html": "Use <code>prop-helper</code>.",
    "text": "Use prop-helper."
   },
   {
    "isCorrect": true,
    "html": "use <code>prop-types</code>.",
    "text": "use prop-types."
   },
   {
    "isCorrect": false,
    "html": "user <code>checker-types</code>.",
    "text": "user checker-types."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q87. How do you add an id of heading to the following h1 element?\n\n```javascript\nlet dish = <h1>Mac and Cheese</h1>;\n```\n\n- [ ] `let dish = <h1 id={heading}>Mac and Cheese</h1>;`\n- [x] `let dish = <h1 id=\"heading\">Mac and Cheese</h1>;`\n- [ ] `let dish = <h1 id:\"heading\">Mac and Cheese</h1>;`\n- [ ] `let dish = <h1 class=\"heading\">Mac and Cheese</h1>;`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q87. How do you add an id of heading to the following h1 element?</h4>",
   "text": "Q87. How do you add an id of heading to the following h1 element?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">let</span> dish <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Mac and Cheese<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "let dish = <h1>Mac and Cheese</h1>;\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>let dish = &lt;h1 id={heading}&gt;Mac and Cheese&lt;/h1&gt;;</code>",
    "text": "let dish = <h1 id={heading}>Mac and Cheese</h1>;"
   },
   {
    "isCorrect": true,
    "html": "<code>let dish = &lt;h1 id=\"heading\"&gt;Mac and Cheese&lt;/h1&gt;;</code>",
    "text": "let dish = <h1 id=\"heading\">Mac and Cheese</h1>;"
   },
   {
    "isCorrect": false,
    "html": "<code>let dish = &lt;h1 id:\"heading\"&gt;Mac and Cheese&lt;/h1&gt;;</code>",
    "text": "let dish = <h1 id:\"heading\">Mac and Cheese</h1>;"
   },
   {
    "isCorrect": false,
    "html": "<code>let dish = &lt;h1 class=\"heading\"&gt;Mac and Cheese&lt;/h1&gt;;</code>",
    "text": "let dish = <h1 class=\"heading\">Mac and Cheese</h1>;"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q88. What value of button will allow you to pass the name of the person to be hugged?\n\n```javascript\nclass Huggable extends React.Component {\n  hug(id) {\n    console.log(\"hugging \" + id);\n  }\n  render() {\n    let name = \"kitten\";\n    let button = // Missing code\n    return button;\n  }\n}\n```\n\n- [ ] `<button onClick={(name) => this.hug(name)}>Hug Button</button>;`\n- [ ] `<button onClick={this.hug(e, name)}>Hug Button</button>;`\n- [ ] `<button onClick={(e) => hug(name, e)}>Hug Button</button>;`\n- [x] `<button onClick={(e) => this.hug(name, e)}>Hug Button</button>;`\n\n**Explanation:**\nThis question test knowledge of react class components. You need to use `this` in order to call methods declared inside class components.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q88. What value of button will allow you to pass the name of the person to be hugged?</h4>",
   "text": "Q88. What value of button will allow you to pass the name of the person to be hugged?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Huggable</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hug</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hugging \"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"kitten\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> button <span class=\"token operator\">=</span> <span class=\"token comment\">// Missing code</span>\n    <span class=\"token keyword\">return</span> button<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "class Huggable extends React.Component {\n  hug(id) {\n    console.log(\"hugging \" + id);\n  }\n  render() {\n    let name = \"kitten\";\n    let button = // Missing code\n    return button;\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>&lt;button onClick={(name) =&gt; this.hug(name)}&gt;Hug Button&lt;/button&gt;;</code>",
    "text": "<button onClick={(name) => this.hug(name)}>Hug Button</button>;"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;button onClick={this.hug(e, name)}&gt;Hug Button&lt;/button&gt;;</code>",
    "text": "<button onClick={this.hug(e, name)}>Hug Button</button>;"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;button onClick={(e) =&gt; hug(name, e)}&gt;Hug Button&lt;/button&gt;;</code>",
    "text": "<button onClick={(e) => hug(name, e)}>Hug Button</button>;"
   },
   {
    "isCorrect": true,
    "html": "<code>&lt;button onClick={(e) =&gt; this.hug(name, e)}&gt;Hug Button&lt;/button&gt;;</code>",
    "text": "<button onClick={(e) => this.hug(name, e)}>Hug Button</button>;"
   }
  ],
  "reference": {
   "html": "<p><strong>Explanation:</strong>\nThis question test knowledge of react class components. You need to use <code>this</code> in order to call methods declared inside class components.</p>",
   "text": "Explanation:\nThis question test knowledge of react class components. You need to use this in order to call methods declared inside class components."
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q89. What syntax do you use to create a component in React?\n\n- [ ] a generator\n- [x] a function or a class\n- [ ] a service worker\n- [ ] a tag\n\n[Reference](https://reactjs.org/docs/components-and-props.html)\n\n**Explanation:**\nReact Components are like functions that return HTML elements. Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML. Components come in two types, Class components and Function components.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q89. What syntax do you use to create a component in React?</h4>",
   "text": "Q89. What syntax do you use to create a component in React?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a generator",
    "text": "a generator"
   },
   {
    "isCorrect": true,
    "html": "a function or a class",
    "text": "a function or a class"
   },
   {
    "isCorrect": false,
    "html": "a service worker",
    "text": "a service worker"
   },
   {
    "isCorrect": false,
    "html": "a tag",
    "text": "a tag"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/components-and-props.html\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q90. You want to disable a button so that it does not emit any events onClick. Which prop do you use to acomplish this?\n\n- [ ] onBlur\n- [ ] onPress\n- [ ] defaultValue\n- [x] disabled\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q90. You want to disable a button so that it does not emit any events onClick. Which prop do you use to acomplish this?</h4>",
   "text": "Q90. You want to disable a button so that it does not emit any events onClick. Which prop do you use to acomplish this?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "onBlur",
    "text": "onBlur"
   },
   {
    "isCorrect": false,
    "html": "onPress",
    "text": "onPress"
   },
   {
    "isCorrect": false,
    "html": "defaultValue",
    "text": "defaultValue"
   },
   {
    "isCorrect": true,
    "html": "disabled",
    "text": "disabled"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q91. In this function, which is the best way to describe the Dish component?\n\n```javascript\nfunction Dish() {\n  return (\n    <>\n      <Ingredient />\n      <Ingredient />\n    </>\n  );\n}\n```\n\n- [ ] child component\n- [x] parent component\n- [ ] nested component\n- [ ] sibling component\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q91. In this function, which is the best way to describe the Dish component?</h4>",
   "text": "Q91. In this function, which is the best way to describe the Dish component?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Ingredient <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Ingredient <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "function Dish() {\n  return (\n    <>\n      <Ingredient />\n      <Ingredient />\n    </>\n  );\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "child component",
    "text": "child component"
   },
   {
    "isCorrect": true,
    "html": "parent component",
    "text": "parent component"
   },
   {
    "isCorrect": false,
    "html": "nested component",
    "text": "nested component"
   },
   {
    "isCorrect": false,
    "html": "sibling component",
    "text": "sibling component"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q92. When does the componentDidMount function fire?\n\n- [x] right after the component is added to the DOM\n- [ ] before the component is added to the DOM\n- [ ] right after the component is updated\n- [ ] right after an API call\n\n[Reference](https://reactjs.org/docs/react-component.html#componentdidmount)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q92. When does the componentDidMount function fire?</h4>",
   "text": "Q92. When does the componentDidMount function fire?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "right after the component is added to the DOM",
    "text": "right after the component is added to the DOM"
   },
   {
    "isCorrect": false,
    "html": "before the component is added to the DOM",
    "text": "before the component is added to the DOM"
   },
   {
    "isCorrect": false,
    "html": "right after the component is updated",
    "text": "right after the component is updated"
   },
   {
    "isCorrect": false,
    "html": "right after an API call",
    "text": "right after an API call"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q93. What might you use webpack for in React development?\n\n- [ ] to fetch remote dependencies used by your app\n- [x] to split your app into smaller chunks that can be more easily loaded by the browser\n- [ ] to format your code so that it is more readable\n- [ ] to ensure your app is not vulnerable to code injection\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q93. What might you use webpack for in React development?</h4>",
   "text": "Q93. What might you use webpack for in React development?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "to fetch remote dependencies used by your app",
    "text": "to fetch remote dependencies used by your app"
   },
   {
    "isCorrect": true,
    "html": "to split your app into smaller chunks that can be more easily loaded by the browser",
    "text": "to split your app into smaller chunks that can be more easily loaded by the browser"
   },
   {
    "isCorrect": false,
    "html": "to format your code so that it is more readable",
    "text": "to format your code so that it is more readable"
   },
   {
    "isCorrect": false,
    "html": "to ensure your app is not vulnerable to code injection",
    "text": "to ensure your app is not vulnerable to code injection"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q94. When using the React Developer Tools Chrome extension, what does it mean if the React icon is red?\n\n- [x] You are using the development build of React.\n- [ ] You are using the production build of React.\n- [ ] You are using webpack.\n- [ ] You are using Create React App.\n\n[Reference](https://teamtreehouse.com/community/hey-why-the-logo-of-react-developer-tools-appears-in-red)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q94. When using the React Developer Tools Chrome extension, what does it mean if the React icon is red?</h4>",
   "text": "Q94. When using the React Developer Tools Chrome extension, what does it mean if the React icon is red?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "You are using the development build of React.",
    "text": "You are using the development build of React."
   },
   {
    "isCorrect": false,
    "html": "You are using the production build of React.",
    "text": "You are using the production build of React."
   },
   {
    "isCorrect": false,
    "html": "You are using webpack.",
    "text": "You are using webpack."
   },
   {
    "isCorrect": false,
    "html": "You are using Create React App.",
    "text": "You are using Create React App."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://teamtreehouse.com/community/hey-why-the-logo-of-react-developer-tools-appears-in-red\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q95. How would you modify the constructor to fix this error: \"ReferenceError: Must call super constructor in derived class before accessing 'this'...\"?\n\n```javascript\nclass TransIsBeautiful extends React.Component {\n  constructor(props){\n  // Missing line\n  console.log(this) ;\n  }\n  ...\n}\n```\n\n- [ ] render(props);\n- [x] super(props);\n- [ ] super(this);\n- [ ] this.super();\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q95. How would you modify the constructor to fix this error: \"ReferenceError: Must call super constructor in derived class before accessing 'this'...\"?</h4>",
   "text": "Q95. How would you modify the constructor to fix this error: \"ReferenceError: Must call super constructor in derived class before accessing 'this'...\"?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TransIsBeautiful</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Missing line</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "class TransIsBeautiful extends React.Component {\n  constructor(props){\n  // Missing line\n  console.log(this) ;\n  }\n  ...\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "render(props);",
    "text": "render(props);"
   },
   {
    "isCorrect": true,
    "html": "super(props);",
    "text": "super(props);"
   },
   {
    "isCorrect": false,
    "html": "super(this);",
    "text": "super(this);"
   },
   {
    "isCorrect": false,
    "html": "this.super();",
    "text": "this.super();"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q96. Which language can you not use with React?\n\n- [x] Swift.\n- [ ] JSX.\n- [ ] Javascipt.\n- [ ] TypeScript.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q96. Which language can you not use with React?</h4>",
   "text": "Q96. Which language can you not use with React?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Swift.",
    "text": "Swift."
   },
   {
    "isCorrect": false,
    "html": "JSX.",
    "text": "JSX."
   },
   {
    "isCorrect": false,
    "html": "Javascipt.",
    "text": "Javascipt."
   },
   {
    "isCorrect": false,
    "html": "TypeScript.",
    "text": "TypeScript."
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q97. This code is part of an app that collects Pokemon. How would you print the list of the ones collected so far?\n\n```javascript\nconstructor(props) {\n    super(props);\n    this.state = {\n        pokeDex: []\n    };\n}\n```\n\n- [ ] console.log(props.pokeDex);\n- [ ] console.log(this.props.pokeDex);\n- [ ] console.log(pokeDex);\n- [x] console.log(this.state.pokeDex);\n\n[Reference](https://www.digitalocean.com/community/tutorials/how-to-manage-state-on-react-class-components#step-3-setting-state-from-a-static-value)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q97. This code is part of an app that collects Pokemon. How would you print the list of the ones collected so far?</h4>",
   "text": "Q97. This code is part of an app that collects Pokemon. How would you print the list of the ones collected so far?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">pokeDex</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "constructor(props) {\n    super(props);\n    this.state = {\n        pokeDex: []\n    };\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "console.log(props.pokeDex);",
    "text": "console.log(props.pokeDex);"
   },
   {
    "isCorrect": false,
    "html": "console.log(this.props.pokeDex);",
    "text": "console.log(this.props.pokeDex);"
   },
   {
    "isCorrect": false,
    "html": "console.log(pokeDex);",
    "text": "console.log(pokeDex);"
   },
   {
    "isCorrect": true,
    "html": "console.log(this.state.pokeDex);",
    "text": "console.log(this.state.pokeDex);"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-manage-state-on-react-class-components#step-3-setting-state-from-a-static-value\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q99. Why might you use a React.ref?\n\n- [ ] to refer to another JS file\n- [ ] to bind the function\n- [ ] to call a function\n- [x] to directly access the DOM node\n\n[Reference](https://reactjs.org/docs/refs-and-the-dom.html)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q99. Why might you use a React.ref?</h4>",
   "text": "Q99. Why might you use a React.ref?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "to refer to another JS file",
    "text": "to refer to another JS file"
   },
   {
    "isCorrect": false,
    "html": "to bind the function",
    "text": "to bind the function"
   },
   {
    "isCorrect": false,
    "html": "to call a function",
    "text": "to call a function"
   },
   {
    "isCorrect": true,
    "html": "to directly access the DOM node",
    "text": "to directly access the DOM node"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q100. What pattern is being used in this code block?\n\n```javascript\nconst { tree, lake } = nature;\n```\n\n- [ ] function defaults\n- [ ] array destructuring\n- [ ] PRPL pattern\n- [x] destructuring assignment\n\n[Reference](https://javascript.info/destructuring-assignment)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q100. What pattern is being used in this code block?</h4>",
   "text": "Q100. What pattern is being used in this code block?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tree<span class=\"token punctuation\">,</span> lake <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> nature<span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const { tree, lake } = nature;\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "function defaults",
    "text": "function defaults"
   },
   {
    "isCorrect": false,
    "html": "array destructuring",
    "text": "array destructuring"
   },
   {
    "isCorrect": false,
    "html": "PRPL pattern",
    "text": "PRPL pattern"
   },
   {
    "isCorrect": true,
    "html": "destructuring assignment",
    "text": "destructuring assignment"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://javascript.info/destructuring-assignment\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q101. How would you correct this code block to make sure that the sent property is set to the Boolean value false?\n\n```javascript\nReactDom.render(\n  <Message sent=false />,\n  document.getElementById(\"root\")\n);\n```\n\n- [x] A\n\n```javascript\n<Message sent={false} />,\n```\n\n- [ ] B\n\n```javascript\nReactDom.render(<Message sent=\"false\" />, document.getElementById('root'));\n```\n\n- [ ] C\n\n```javascript\n<Message sent=\"false\" />,\n```\n\n- [ ] D\n\n```javascript\nReactDom.render(<Message sent=\"false\" />, document.getElementById('root'));\n```\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q101. How would you correct this code block to make sure that the sent property is set to the Boolean value false?</h4>",
   "text": "Q101. How would you correct this code block to make sure that the sent property is set to the Boolean value false?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">ReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Message sent<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "ReactDom.render(\n  <Message sent=false />,\n  document.getElementById(\"root\")\n);\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "A<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Message sent<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n</code></pre>",
    "text": "A<Message sent={false} />,\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-javascript\">ReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Message sent<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
    "text": "BReactDom.render(<Message sent=\"false\" />, document.getElementById('root'));\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Message sent<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n</code></pre>",
    "text": "C<Message sent=\"false\" />,\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-javascript\">ReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Message sent<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
    "text": "DReactDom.render(<Message sent=\"false\" />, document.getElementById('root'));\n"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q102. This code is part of an app that collects Pokemon. The useState hook below is a piece of state holding onto the names of the Pokemon collected so far. How would you access the collected Pokemon in state?\n\n```javascript\nconst PokeDex = (props) => {\n  const [pokeDex, setPokeDex] = useState([]);\n  /// ...\n};\n```\n\n- [ ] props.pokeDex\n- [ ] this.props.pokeDex\n- [ ] setPokeDex()\n- [x] pokeDex\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q102. This code is part of an app that collects Pokemon. The useState hook below is a piece of state holding onto the names of the Pokemon collected so far. How would you access the collected Pokemon in state?</h4>",
   "text": "Q102. This code is part of an app that collects Pokemon. The useState hook below is a piece of state holding onto the names of the Pokemon collected so far. How would you access the collected Pokemon in state?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PokeDex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pokeDex<span class=\"token punctuation\">,</span> setPokeDex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const PokeDex = (props) => {\n  const [pokeDex, setPokeDex] = useState([]);\n  /// ...\n};\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "props.pokeDex",
    "text": "props.pokeDex"
   },
   {
    "isCorrect": false,
    "html": "this.props.pokeDex",
    "text": "this.props.pokeDex"
   },
   {
    "isCorrect": false,
    "html": "setPokeDex()",
    "text": "setPokeDex()"
   },
   {
    "isCorrect": true,
    "html": "pokeDex",
    "text": "pokeDex"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q103. When using a portal, what is the second argument?\n\n```javascript\nReactDOM.createPortal(x, y);\n```\n\n- [ ] the current state\n- [ ] the rendered element\n- [ ] the App component\n- [x] the DOM element that exists outside of the parent component\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q103. When using a portal, what is the second argument?</h4>",
   "text": "Q103. When using a portal, what is the second argument?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "ReactDOM.createPortal(x, y);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "the current state",
    "text": "the current state"
   },
   {
    "isCorrect": false,
    "html": "the rendered element",
    "text": "the rendered element"
   },
   {
    "isCorrect": false,
    "html": "the App component",
    "text": "the App component"
   },
   {
    "isCorrect": true,
    "html": "the DOM element that exists outside of the parent component",
    "text": "the DOM element that exists outside of the parent component"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q104. What would you pass to the onClick prop that wil allow you to pass the initName prop into the greeet handler?\n\n```javascript\nconst Greeting = ({ initName }) => {\n  const greet = (name) => console.log(\"Hello, \" + name + \"!\");\n  return <button onClick={ ... }>Greeting Button </button>\n}\n```\n\n- [ ] hug\n- [ ] this.hug(initName)\n- [ ] (name) => this.hug(name)\n- [x] () => hug(initName)\n\nExplanation: Apparently the question misstyped `greet` as `hug`. Putting this aside, we can still learn from this question.\n\n- In a function, the global object is the default binding for `this`. In a browser window the global object is [object Window].\n  This is a functional Component, so `this` from `this.hug` actually refers to browser window.\n  Since it is a functional component, we can directly refer to hug without using `this`.\n- To pass a handler to onClick, we should always pass a function rather than execute a function. So we need to use callback here.\n  `initName` is available in Greeting's function scope, so we can directly supply as an argument to hug().\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q104. What would you pass to the onClick prop that wil allow you to pass the initName prop into the greeet handler?</h4>",
   "text": "Q104. What would you pass to the onClick prop that wil allow you to pass the initName prop into the greeet handler?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> initName <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>Greeting Button <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "const Greeting = ({ initName }) => {\n  const greet = (name) => console.log(\"Hello, \" + name + \"!\");\n  return <button onClick={ ... }>Greeting Button </button>\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "hug",
    "text": "hug"
   },
   {
    "isCorrect": false,
    "html": "this.hug(initName)",
    "text": "this.hug(initName)"
   },
   {
    "isCorrect": false,
    "html": "(name) =&gt; this.hug(name)",
    "text": "(name) => this.hug(name)"
   },
   {
    "isCorrect": true,
    "html": "() =&gt; hug(initName)",
    "text": "() => hug(initName)"
   },
   {
    "isCorrect": false,
    "html": " function, the global object is the default binding for <code>this</code>. In a browser window the global object is [object Window].\nThis is a functional Component, so <code>this</code> from <code>this.hug</code> actually refers to browser window.\nSince it is a functional component, we can directly refer to hug without using <code>this</code>.",
    "text": " function, the global object is the default binding for this. In a browser window the global object is [object Window].\nThis is a functional Component, so this from this.hug actually refers to browser window.\nSince it is a functional component, we can directly refer to hug without using this."
   },
   {
    "isCorrect": false,
    "html": "ass a handler to onClick, we should always pass a function rather than execute a function. So we need to use callback here.\n<code>initName</code> is available in Greeting's function scope, so we can directly supply as an argument to hug().",
    "text": "ass a handler to onClick, we should always pass a function rather than execute a function. So we need to use callback here.\ninitName is available in Greeting's function scope, so we can directly supply as an argument to hug()."
   }
  ],
  "reference": {
   "html": "<p>Explanation: Apparently the question misstyped <code>greet</code> as <code>hug</code>. Putting this aside, we can still learn from this question.</p>",
   "text": "Explanation: Apparently the question misstyped greet as hug. Putting this aside, we can still learn from this question."
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q105. What is the name of the compiler used to transform JSX into JavaScript?\n\n- [x] Babel\n- [ ] JSX Editor\n- [ ] Browser Buddy\n- [ ] ReactDOM\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q105. What is the name of the compiler used to transform JSX into JavaScript?</h4>",
   "text": "Q105. What is the name of the compiler used to transform JSX into JavaScript?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Babel",
    "text": "Babel"
   },
   {
    "isCorrect": false,
    "html": "JSX Editor",
    "text": "JSX Editor"
   },
   {
    "isCorrect": false,
    "html": "Browser Buddy",
    "text": "Browser Buddy"
   },
   {
    "isCorrect": false,
    "html": "ReactDOM",
    "text": "ReactDOM"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q106. Which hook is used to prevent a function from being recreated on every component render?\n\n- [x] useCallback\n- [ ] useMemo\n- [ ] useRef\n- [ ] useTransition\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q106. Which hook is used to prevent a function from being recreated on every component render?</h4>",
   "text": "Q106. Which hook is used to prevent a function from being recreated on every component render?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "useCallback",
    "text": "useCallback"
   },
   {
    "isCorrect": false,
    "html": "useMemo",
    "text": "useMemo"
   },
   {
    "isCorrect": false,
    "html": "useRef",
    "text": "useRef"
   },
   {
    "isCorrect": false,
    "html": "useTransition",
    "text": "useTransition"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q107. Why might you use the `useRef` hook?\n\n- [ ] To bind the function\n- [ ] To call a function\n- [x] To directly access a DOM\n- [ ] To refer to another JS file\n\n[Reference](https://www.smashingmagazine.com/2020/11/react-useref-hook/)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q107. Why might you use the <code>useRef</code> hook?</h4>",
   "text": "Q107. Why might you use the useRef hook?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "To bind the function",
    "text": "To bind the function"
   },
   {
    "isCorrect": false,
    "html": "To call a function",
    "text": "To call a function"
   },
   {
    "isCorrect": true,
    "html": "To directly access a DOM",
    "text": "To directly access a DOM"
   },
   {
    "isCorrect": false,
    "html": "To refer to another JS file",
    "text": "To refer to another JS file"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.smashingmagazine.com/2020/11/react-useref-hook/\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q108. Which of the following is required to use React?\n\n- [x] JavaScript\n- [ ] React Router\n- [ ] Redux\n- [ ] Prop-Types\n\n[Reference](https://reactjs.org/tutorial/tutorial.html#:~:text=What%20Is%20React%3F,of%20code%20called%20%E2%80%9Ccomponents%E2%80%9D.&text=We'll%20get%20to%20the%20funny%20XML%2Dlike%20tags%20soon.)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q108. Which of the following is required to use React?</h4>",
   "text": "Q108. Which of the following is required to use React?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "JavaScript",
    "text": "JavaScript"
   },
   {
    "isCorrect": false,
    "html": "React Router",
    "text": "React Router"
   },
   {
    "isCorrect": false,
    "html": "Redux",
    "text": "Redux"
   },
   {
    "isCorrect": false,
    "html": "Prop-Types",
    "text": "Prop-Types"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/tutorial/tutorial.html#:~:text=What%20Is%20React%3F,of%20code%20called%20%E2%80%9Ccomponents%E2%80%9D.&amp;text=We'll%20get%20to%20the%20funny%20XML%2Dlike%20tags%20soon.\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q109. What is the correct way to get a value from context?\n\n- [ ] const value = useContext(MyContext.Consumer)\n- [ ] const value = useContext(MyContext.Provider)\n- [x] const value = useContext(MyContext)\n- [ ] const value = useContext({value: \"intiial value\"})\n\n[Reference](https://reactjs.org/docs/hooks-reference.html#usecontext)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q109. What is the correct way to get a value from context?</h4>",
   "text": "Q109. What is the correct way to get a value from context?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "const value = useContext(MyContext.Consumer)",
    "text": "const value = useContext(MyContext.Consumer)"
   },
   {
    "isCorrect": false,
    "html": "const value = useContext(MyContext.Provider)",
    "text": "const value = useContext(MyContext.Provider)"
   },
   {
    "isCorrect": true,
    "html": "const value = useContext(MyContext)",
    "text": "const value = useContext(MyContext)"
   },
   {
    "isCorrect": false,
    "html": "const value = useContext({value: \"intiial value\"})",
    "text": "const value = useContext({value: \"intiial value\"})"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q110. Why is ref used?\n\n- [ ] to bind function\n- [ ] to call function\n- [x] to directly access DOM node\n- [ ] to refer to another JS file\n\n[Reference](https://reactjs.org/docs/refs-and-the-dom.html#when-to-use-refs)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q110. Why is ref used?</h4>",
   "text": "Q110. Why is ref used?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "to bind function",
    "text": "to bind function"
   },
   {
    "isCorrect": false,
    "html": "to call function",
    "text": "to call function"
   },
   {
    "isCorrect": true,
    "html": "to directly access DOM node",
    "text": "to directly access DOM node"
   },
   {
    "isCorrect": false,
    "html": "to refer to another JS file",
    "text": "to refer to another JS file"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/refs-and-the-dom.html#when-to-use-refs\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q111. Choose the method which should be overridden to stop the component from updating?\n\n- [ ] componentDidMount\n- [ ] componentDidUpdate\n- [ ] willComponentUpdate\n- [x] shouldComponentUpdate\n\n[Reference](https://reactjs.org/docs/react-component.html#shouldcomponentupdate)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q111. Choose the method which should be overridden to stop the component from updating?</h4>",
   "text": "Q111. Choose the method which should be overridden to stop the component from updating?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "componentDidMount",
    "text": "componentDidMount"
   },
   {
    "isCorrect": false,
    "html": "componentDidUpdate",
    "text": "componentDidUpdate"
   },
   {
    "isCorrect": false,
    "html": "willComponentUpdate",
    "text": "willComponentUpdate"
   },
   {
    "isCorrect": true,
    "html": "shouldComponentUpdate",
    "text": "shouldComponentUpdate"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q112. What is the functionality of a “webpack” command?\n\n- [x] Runs react local development server\n- [ ] Transfers all JS files to down into one file\n- [ ] A module builder\n- [ ] None of the above\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q112. What is the functionality of a “webpack” command?</h4>",
   "text": "Q112. What is the functionality of a “webpack” command?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Runs react local development server",
    "text": "Runs react local development server"
   },
   {
    "isCorrect": false,
    "html": "Transfers all JS files to down into one file",
    "text": "Transfers all JS files to down into one file"
   },
   {
    "isCorrect": false,
    "html": "A module builder",
    "text": "A module builder"
   },
   {
    "isCorrect": false,
    "html": "None of the above",
    "text": "None of the above"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q113. Choose the method which is not a part of ReactDOM?\n\n- [ ] ReactDOM.createPortal()\n- [ ] ReactDOM.hydrate()\n- [x] ReactDOM.destroy()\n- [ ] ReactDOM.findDOMnode()\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q113. Choose the method which is not a part of ReactDOM?</h4>",
   "text": "Q113. Choose the method which is not a part of ReactDOM?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "ReactDOM.createPortal()",
    "text": "ReactDOM.createPortal()"
   },
   {
    "isCorrect": false,
    "html": "ReactDOM.hydrate()",
    "text": "ReactDOM.hydrate()"
   },
   {
    "isCorrect": true,
    "html": "ReactDOM.destroy()",
    "text": "ReactDOM.destroy()"
   },
   {
    "isCorrect": false,
    "html": "ReactDOM.findDOMnode()",
    "text": "ReactDOM.findDOMnode()"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q114. In react, the key should be?\n\n- [x] Unique among his siblings\n- [ ] Unique in DOM\n- [ ] Does not requires to be unique\n- [ ] all of the above\n\n[Reference](https://reactjs.org/docs/lists-and-keys.html#keys)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q114. In react, the key should be?</h4>",
   "text": "Q114. In react, the key should be?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Unique among his siblings",
    "text": "Unique among his siblings"
   },
   {
    "isCorrect": false,
    "html": "Unique in DOM",
    "text": "Unique in DOM"
   },
   {
    "isCorrect": false,
    "html": "Does not requires to be unique",
    "text": "Does not requires to be unique"
   },
   {
    "isCorrect": false,
    "html": "all of the above",
    "text": "all of the above"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/lists-and-keys.html#keys\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q115. Which company developed ReactJS?\n\n- [ ] Google\n- [x] Meta (ex Facebook)\n- [ ] Apple\n- [ ] Twitter\n\n[Reference](https://github.com/facebook/react)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q115. Which company developed ReactJS?</h4>",
   "text": "Q115. Which company developed ReactJS?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Google",
    "text": "Google"
   },
   {
    "isCorrect": true,
    "html": "Meta (ex Facebook)",
    "text": "Meta (ex Facebook)"
   },
   {
    "isCorrect": false,
    "html": "Apple",
    "text": "Apple"
   },
   {
    "isCorrect": false,
    "html": "Twitter",
    "text": "Twitter"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://github.com/facebook/react\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q116. Choose the library which is most often associated with react?\n\n- [ ] Chai\n- [ ] Sinon\n- [x] Jest\n- [ ] Mocha\n\n[Reference](https://reactjs.org/docs/testing-recipes.html)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q116. Choose the library which is most often associated with react?</h4>",
   "text": "Q116. Choose the library which is most often associated with react?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Chai",
    "text": "Chai"
   },
   {
    "isCorrect": false,
    "html": "Sinon",
    "text": "Sinon"
   },
   {
    "isCorrect": true,
    "html": "Jest",
    "text": "Jest"
   },
   {
    "isCorrect": false,
    "html": "Mocha",
    "text": "Mocha"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/testing-recipes.html\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q117. What of the following is used in React.js to increase performance?\n\n- [ ] Original DOM\n- [x] Virtual DOM\n- [ ] Both of the above\n- [ ] None of the above\n\n[Reference](https://reactjs.org/docs/optimizing-performance.html)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q117. What of the following is used in React.js to increase performance?</h4>",
   "text": "Q117. What of the following is used in React.js to increase performance?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Original DOM",
    "text": "Original DOM"
   },
   {
    "isCorrect": true,
    "html": "Virtual DOM",
    "text": "Virtual DOM"
   },
   {
    "isCorrect": false,
    "html": "Both of the above",
    "text": "Both of the above"
   },
   {
    "isCorrect": false,
    "html": "None of the above",
    "text": "None of the above"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/docs/optimizing-performance.html\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q118. Among The following options, choose the one which helps react for keeping their data uni-directional?\n\n- [ ] DOM\n- [x] flux\n- [ ] JSX\n- [ ] Props\n\n[Reference](https://reactjs.org/blog/2014/05/06/flux.html)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q118. Among The following options, choose the one which helps react for keeping their data uni-directional?</h4>",
   "text": "Q118. Among The following options, choose the one which helps react for keeping their data uni-directional?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "DOM",
    "text": "DOM"
   },
   {
    "isCorrect": true,
    "html": "flux",
    "text": "flux"
   },
   {
    "isCorrect": false,
    "html": "JSX",
    "text": "JSX"
   },
   {
    "isCorrect": false,
    "html": "Props",
    "text": "Props"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://reactjs.org/blog/2014/05/06/flux.html\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "React.js",
  "raw": "#### Q119. What is this pattern called?\n\n```javascript\nconst [count, setCount] = useState(0);\n```\n\n- [ ] code pushing\n- [ ] object destructuring\n- [ ] spread operating\n- [x] array destructuring\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q119. What is this pattern called?</h4>",
   "text": "Q119. What is this pattern called?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const [count, setCount] = useState(0);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "code pushing",
    "text": "code pushing"
   },
   {
    "isCorrect": false,
    "html": "object destructuring",
    "text": "object destructuring"
   },
   {
    "isCorrect": false,
    "html": "spread operating",
    "text": "spread operating"
   },
   {
    "isCorrect": true,
    "html": "array destructuring",
    "text": "array destructuring"
   }
  ]
 },
 {
  "topic": "React.js",
  "raw": "#### Q120. This code is part of an app that collects Pokemon. The useState hook below is a piece of state holding onto the names of the Pokemon collected so far. How would you access the collected Pokemon in state?\n\n```javascript\nconst PokeDex = (props) => {\n  const [pokeDex, setPokeDex] = useState([]);\n  //...\n};\n```\n\n- [x] pokeDex\n- [ ] this.props.pokeDex\n- [ ] setPokeDex()\n- [ ] props.pokeDex\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q120. This code is part of an app that collects Pokemon. The useState hook below is a piece of state holding onto the names of the Pokemon collected so far. How would you access the collected Pokemon in state?</h4>",
   "text": "Q120. This code is part of an app that collects Pokemon. The useState hook below is a piece of state holding onto the names of the Pokemon collected so far. How would you access the collected Pokemon in state?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PokeDex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pokeDex<span class=\"token punctuation\">,</span> setPokeDex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const PokeDex = (props) => {\n  const [pokeDex, setPokeDex] = useState([]);\n  //...\n};\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "pokeDex",
    "text": "pokeDex"
   },
   {
    "isCorrect": false,
    "html": "this.props.pokeDex",
    "text": "this.props.pokeDex"
   },
   {
    "isCorrect": false,
    "html": "setPokeDex()",
    "text": "setPokeDex()"
   },
   {
    "isCorrect": false,
    "html": "props.pokeDex",
    "text": "props.pokeDex"
   }
  ]
 }
]