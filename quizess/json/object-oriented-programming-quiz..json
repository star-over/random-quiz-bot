[
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q1. What is an example of dynamic binding?\n\n- [ ] any method\n- [ ] method overloading\n- [x] method overriding\n- [ ] compiling\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q1. What is an example of dynamic binding?</h4>",
   "text": "Q1. What is an example of dynamic binding?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "any method",
    "text": "any method"
   },
   {
    "isCorrect": false,
    "html": "method overloading",
    "text": "method overloading"
   },
   {
    "isCorrect": true,
    "html": "method overriding",
    "text": "method overriding"
   },
   {
    "isCorrect": false,
    "html": "compiling",
    "text": "compiling"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q2. For which case would the use of a static attribute be appropriate?\n\n- [ ] the number of people in each house in a small neighborhood\n- [ ] the lot size for each house in a small neighborhood\n- [ ] the color of each house in a small neighborhood\n- [x] the weather conditions for each house in a small neighborhood\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q2. For which case would the use of a static attribute be appropriate?</h4>",
   "text": "Q2. For which case would the use of a static attribute be appropriate?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "the number of people in each house in a small neighborhood",
    "text": "the number of people in each house in a small neighborhood"
   },
   {
    "isCorrect": false,
    "html": "the lot size for each house in a small neighborhood",
    "text": "the lot size for each house in a small neighborhood"
   },
   {
    "isCorrect": false,
    "html": "the color of each house in a small neighborhood",
    "text": "the color of each house in a small neighborhood"
   },
   {
    "isCorrect": true,
    "html": "the weather conditions for each house in a small neighborhood",
    "text": "the weather conditions for each house in a small neighborhood"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q3. 1 Why would you create an abstract class, if it can have no real instances?\n\n- [x] to avoid redundant coding in children\n- [ ] to explore a hypothetical class\n- [ ] to prevent unwanted method implementation\n- [ ] to reserve memory for an unspecified class type\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q3. 1 Why would you create an abstract class, if it can have no real instances?</h4>",
   "text": "Q3. 1 Why would you create an abstract class, if it can have no real instances?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "to avoid redundant coding in children",
    "text": "to avoid redundant coding in children"
   },
   {
    "isCorrect": false,
    "html": "to explore a hypothetical class",
    "text": "to explore a hypothetical class"
   },
   {
    "isCorrect": false,
    "html": "to prevent unwanted method implementation",
    "text": "to prevent unwanted method implementation"
   },
   {
    "isCorrect": false,
    "html": "to reserve memory for an unspecified class type",
    "text": "to reserve memory for an unspecified class type"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q4. 2 Why would you create an abstract class, if it can have no real instances?\n\n- [x] to have common behavior in derived classes\n- [ ] to explore a hypothetical class\n- [ ] to prevent unwanted method implementation\n- [ ] to reserve memory for an unspecified class type\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q4. 2 Why would you create an abstract class, if it can have no real instances?</h4>",
   "text": "Q4. 2 Why would you create an abstract class, if it can have no real instances?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "to have common behavior in derived classes",
    "text": "to have common behavior in derived classes"
   },
   {
    "isCorrect": false,
    "html": "to explore a hypothetical class",
    "text": "to explore a hypothetical class"
   },
   {
    "isCorrect": false,
    "html": "to prevent unwanted method implementation",
    "text": "to prevent unwanted method implementation"
   },
   {
    "isCorrect": false,
    "html": "to reserve memory for an unspecified class type",
    "text": "to reserve memory for an unspecified class type"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q5. When does static binding happen?\n\n- [ ] only when you export\n- [ ] both at compile time and runtime\n- [x] at compile time\n- [ ] at runtime\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q5. When does static binding happen?</h4>",
   "text": "Q5. When does static binding happen?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "only when you export",
    "text": "only when you export"
   },
   {
    "isCorrect": false,
    "html": "both at compile time and runtime",
    "text": "both at compile time and runtime"
   },
   {
    "isCorrect": true,
    "html": "at compile time",
    "text": "at compile time"
   },
   {
    "isCorrect": false,
    "html": "at runtime",
    "text": "at runtime"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q6. What is the best reason to use a design pattern?\n\n- [x] It will result in code that is more extensible and maintainable\n- [ ] It will result in a more compact product.\n- [ ] It will speed initial development.\n- [ ] It will allow you to add that design pattern to your resume.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q6. What is the best reason to use a design pattern?</h4>",
   "text": "Q6. What is the best reason to use a design pattern?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "It will result in code that is more extensible and maintainable",
    "text": "It will result in code that is more extensible and maintainable"
   },
   {
    "isCorrect": false,
    "html": "It will result in a more compact product.",
    "text": "It will result in a more compact product."
   },
   {
    "isCorrect": false,
    "html": "It will speed initial development.",
    "text": "It will speed initial development."
   },
   {
    "isCorrect": false,
    "html": "It will allow you to add that design pattern to your resume.",
    "text": "It will allow you to add that design pattern to your resume."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q7. What is encapsulation?\n\n- [ ] defining classes by focusing on what is important for a purpose\n- [x] hiding the data and implementation details within a class\n- [ ] making all methods private\n- [ ] using words to define classes\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q7. What is encapsulation?</h4>",
   "text": "Q7. What is encapsulation?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "defining classes by focusing on what is important for a purpose",
    "text": "defining classes by focusing on what is important for a purpose"
   },
   {
    "isCorrect": true,
    "html": "hiding the data and implementation details within a class",
    "text": "hiding the data and implementation details within a class"
   },
   {
    "isCorrect": false,
    "html": "making all methods private",
    "text": "making all methods private"
   },
   {
    "isCorrect": false,
    "html": "using words to define classes",
    "text": "using words to define classes"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q8. What is an IS-A relationship?\n\n- [ ] It implies encapsulation.\n- [ ] A superclass object has an IS-A relationship with its subclass.\n- [ ] It implies a virtual method.\n- [x] A subclass object has an IS-A relationship with its superclass or interface\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q8. What is an IS-A relationship?</h4>",
   "text": "Q8. What is an IS-A relationship?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It implies encapsulation.",
    "text": "It implies encapsulation."
   },
   {
    "isCorrect": false,
    "html": "A superclass object has an IS-A relationship with its subclass.",
    "text": "A superclass object has an IS-A relationship with its subclass."
   },
   {
    "isCorrect": false,
    "html": "It implies a virtual method.",
    "text": "It implies a virtual method."
   },
   {
    "isCorrect": true,
    "html": "A subclass object has an IS-A relationship with its superclass or interface",
    "text": "A subclass object has an IS-A relationship with its superclass or interface"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q9. You want a method with behavior similar to a virtual method--it is meant to be overridden --expect that it does not have a method body. It just has a method signature. What kind of method should you use?\n\n- [x] an abstract method\n- [ ] a public internal method\n- [ ] an internal method\n- [ ] a protected internal method\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q9. You want a method with behavior similar to a virtual method--it is meant to be overridden --expect that it does not have a method body. It just has a method signature. What kind of method should you use?</h4>",
   "text": "Q9. You want a method with behavior similar to a virtual method--it is meant to be overridden --expect that it does not have a method body. It just has a method signature. What kind of method should you use?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "an abstract method",
    "text": "an abstract method"
   },
   {
    "isCorrect": false,
    "html": "a public internal method",
    "text": "a public internal method"
   },
   {
    "isCorrect": false,
    "html": "an internal method",
    "text": "an internal method"
   },
   {
    "isCorrect": false,
    "html": "a protected internal method",
    "text": "a protected internal method"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q10. Which code creates a new object from the Employee class?\n\n- [ ] Employee currentEmployee = Employee.Create();\n- [x] Employee currentEmployee = new Employee();\n- [ ] Employee currentEmployee;\n- [ ] Employee currentEmployee = Employee.New();\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q10. Which code creates a new object from the Employee class?</h4>",
   "text": "Q10. Which code creates a new object from the Employee class?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Employee currentEmployee = Employee.Create();",
    "text": "Employee currentEmployee = Employee.Create();"
   },
   {
    "isCorrect": true,
    "html": "Employee currentEmployee = new Employee();",
    "text": "Employee currentEmployee = new Employee();"
   },
   {
    "isCorrect": false,
    "html": "Employee currentEmployee;",
    "text": "Employee currentEmployee;"
   },
   {
    "isCorrect": false,
    "html": "Employee currentEmployee = Employee.New();",
    "text": "Employee currentEmployee = Employee.New();"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q11. Which type of constructor cannot have a return type?\n\n- [ ] default\n- [ ] copy\n- [ ] parameterized\n- [x] Constructors do not have a return type\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q11. Which type of constructor cannot have a return type?</h4>",
   "text": "Q11. Which type of constructor cannot have a return type?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "default",
    "text": "default"
   },
   {
    "isCorrect": false,
    "html": "copy",
    "text": "copy"
   },
   {
    "isCorrect": false,
    "html": "parameterized",
    "text": "parameterized"
   },
   {
    "isCorrect": true,
    "html": "Constructors do not have a return type",
    "text": "Constructors do not have a return type"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q12. 1 When is a constructor executed?\n\n- [x] when an object is created from a class using the new keyword\n- [ ] when an class is defined using the class keyword\n- [ ] every time an object is referenced\n- [ ] when an object is created from a class using the create keyword\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q12. 1 When is a constructor executed?</h4>",
   "text": "Q12. 1 When is a constructor executed?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "when an object is created from a class using the new keyword",
    "text": "when an object is created from a class using the new keyword"
   },
   {
    "isCorrect": false,
    "html": "when an class is defined using the class keyword",
    "text": "when an class is defined using the class keyword"
   },
   {
    "isCorrect": false,
    "html": "every time an object is referenced",
    "text": "every time an object is referenced"
   },
   {
    "isCorrect": false,
    "html": "when an object is created from a class using the create keyword",
    "text": "when an object is created from a class using the create keyword"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q13. 2 When is a constructor executed?\n\n- [x] when an object is created from a class\n- [ ] when an class is defined using the class keyword\n- [ ] every time an object is referenced\n- [ ] when an object is created from a class using the create keyword\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q13. 2 When is a constructor executed?</h4>",
   "text": "Q13. 2 When is a constructor executed?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "when an object is created from a class",
    "text": "when an object is created from a class"
   },
   {
    "isCorrect": false,
    "html": "when an class is defined using the class keyword",
    "text": "when an class is defined using the class keyword"
   },
   {
    "isCorrect": false,
    "html": "every time an object is referenced",
    "text": "every time an object is referenced"
   },
   {
    "isCorrect": false,
    "html": "when an object is created from a class using the create keyword",
    "text": "when an object is created from a class using the create keyword"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q14. If a local class is defined in a function, what is true for an object of that class?\n\n- [x] The object can be accessed, declared, and used locally in that function.\n- [ ] The object must be declared inside any other function.\n- [ ] The object is temporarily accessible outside the function.\n- [ ] The object can call all the other class members anywhere in the program.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q14. If a local class is defined in a function, what is true for an object of that class?</h4>",
   "text": "Q14. If a local class is defined in a function, what is true for an object of that class?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "The object can be accessed, declared, and used locally in that function.",
    "text": "The object can be accessed, declared, and used locally in that function."
   },
   {
    "isCorrect": false,
    "html": "The object must be declared inside any other function.",
    "text": "The object must be declared inside any other function."
   },
   {
    "isCorrect": false,
    "html": "The object is temporarily accessible outside the function.",
    "text": "The object is temporarily accessible outside the function."
   },
   {
    "isCorrect": false,
    "html": "The object can call all the other class members anywhere in the program.",
    "text": "The object can call all the other class members anywhere in the program."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q15. Which two blocks are used to handle and check errors?\n\n- [ ] do and check\n- [ ] catching and trying\n- [x] try and catch\n- [ ] do and while\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q15. Which two blocks are used to handle and check errors?</h4>",
   "text": "Q15. Which two blocks are used to handle and check errors?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "do and check",
    "text": "do and check"
   },
   {
    "isCorrect": false,
    "html": "catching and trying",
    "text": "catching and trying"
   },
   {
    "isCorrect": true,
    "html": "try and catch",
    "text": "try and catch"
   },
   {
    "isCorrect": false,
    "html": "do and while",
    "text": "do and while"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q16. Why would you implement composition using an id instead of a reference?\n\n- [ ] It makes it easier to save the entity.\n- [x] all of these answers\n- [ ] It can make the entity retrieval more efficient\n- [ ] It minimizes coupling.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q16. Why would you implement composition using an id instead of a reference?</h4>",
   "text": "Q16. Why would you implement composition using an id instead of a reference?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It makes it easier to save the entity.",
    "text": "It makes it easier to save the entity."
   },
   {
    "isCorrect": true,
    "html": "all of these answers",
    "text": "all of these answers"
   },
   {
    "isCorrect": false,
    "html": "It can make the entity retrieval more efficient",
    "text": "It can make the entity retrieval more efficient"
   },
   {
    "isCorrect": false,
    "html": "It minimizes coupling.",
    "text": "It minimizes coupling."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q17. Which statement best describes the method of inheritance in OOP?\n\n- [x] Inheritance describes the ability to create new classes based on an existing class.\n- [ ] Inheritance means that a group of related properties, methods, and other members are treated as a single unit or object.\n- [ ] Inheritance forces a class to have a single responsibility from only one parent.\n- [ ] Inheritance means that you will never have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q17. Which statement best describes the method of inheritance in OOP?</h4>",
   "text": "Q17. Which statement best describes the method of inheritance in OOP?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Inheritance describes the ability to create new classes based on an existing class.",
    "text": "Inheritance describes the ability to create new classes based on an existing class."
   },
   {
    "isCorrect": false,
    "html": "Inheritance means that a group of related properties, methods, and other members are treated as a single unit or object.",
    "text": "Inheritance means that a group of related properties, methods, and other members are treated as a single unit or object."
   },
   {
    "isCorrect": false,
    "html": "Inheritance forces a class to have a single responsibility from only one parent.",
    "text": "Inheritance forces a class to have a single responsibility from only one parent."
   },
   {
    "isCorrect": false,
    "html": "Inheritance means that you will never have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways.",
    "text": "Inheritance means that you will never have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q18. Which type of inheritance ,when done continuously, is similar to a tree structure?\n\n- [ ] multilevel\n- [ ] hierarchical and multiple\n- [x] hierarchical\n- [ ] multiple\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q18. Which type of inheritance ,when done continuously, is similar to a tree structure?</h4>",
   "text": "Q18. Which type of inheritance ,when done continuously, is similar to a tree structure?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "multilevel",
    "text": "multilevel"
   },
   {
    "isCorrect": false,
    "html": "hierarchical and multiple",
    "text": "hierarchical and multiple"
   },
   {
    "isCorrect": true,
    "html": "hierarchical",
    "text": "hierarchical"
   },
   {
    "isCorrect": false,
    "html": "multiple",
    "text": "multiple"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q19. Which statement is true?\n\n- [x] A default parameter's constructor is not equivalent to the default constructor\n- [ ] A default constructor is inherited from a parent class\n- [ ] A default constructor can be called explicitly\n- [ ] A default constructor cannot be defined by the coder\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q19. Which statement is true?</h4>",
   "text": "Q19. Which statement is true?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "A default parameter's constructor is not equivalent to the default constructor",
    "text": "A default parameter's constructor is not equivalent to the default constructor"
   },
   {
    "isCorrect": false,
    "html": "A default constructor is inherited from a parent class",
    "text": "A default constructor is inherited from a parent class"
   },
   {
    "isCorrect": false,
    "html": "A default constructor can be called explicitly",
    "text": "A default constructor can be called explicitly"
   },
   {
    "isCorrect": false,
    "html": "A default constructor cannot be defined by the coder",
    "text": "A default constructor cannot be defined by the coder"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q20. Which of the following is NOT an advantage of using getters and setters?\n\n- [x] Getters and setters can speed up compilation.\n- [ ] Getters and setters provide encapsulation of behavior.\n- [ ] Getters and setters provide a debugging point for when a property changes at runtime.\n- [ ] Getters and setters permit different access levels.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q20. Which of the following is NOT an advantage of using getters and setters?</h4>",
   "text": "Q20. Which of the following is NOT an advantage of using getters and setters?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Getters and setters can speed up compilation.",
    "text": "Getters and setters can speed up compilation."
   },
   {
    "isCorrect": false,
    "html": "Getters and setters provide encapsulation of behavior.",
    "text": "Getters and setters provide encapsulation of behavior."
   },
   {
    "isCorrect": false,
    "html": "Getters and setters provide a debugging point for when a property changes at runtime.",
    "text": "Getters and setters provide a debugging point for when a property changes at runtime."
   },
   {
    "isCorrect": false,
    "html": "Getters and setters permit different access levels.",
    "text": "Getters and setters permit different access levels."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q21. In context of OOP, what is association?\n\n- [x] Association is a relationship where all objects have their own life cycle and there is no owner.\n- [ ] Association is the process where model elements cooperate to provide higher-level behavior.\n- [ ] Association is whole/part relationship where one object is composed of one or more other objects, each of which is considered a part of the whole.\n- [ ] Association is where all objects have their own life cycle, but there is ownerhip, and child objects can not belong to another parent object.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q21. In context of OOP, what is association?</h4>",
   "text": "Q21. In context of OOP, what is association?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Association is a relationship where all objects have their own life cycle and there is no owner.",
    "text": "Association is a relationship where all objects have their own life cycle and there is no owner."
   },
   {
    "isCorrect": false,
    "html": "Association is the process where model elements cooperate to provide higher-level behavior.",
    "text": "Association is the process where model elements cooperate to provide higher-level behavior."
   },
   {
    "isCorrect": false,
    "html": "Association is whole/part relationship where one object is composed of one or more other objects, each of which is considered a part of the whole.",
    "text": "Association is whole/part relationship where one object is composed of one or more other objects, each of which is considered a part of the whole."
   },
   {
    "isCorrect": false,
    "html": "Association is where all objects have their own life cycle, but there is ownerhip, and child objects can not belong to another parent object.",
    "text": "Association is where all objects have their own life cycle, but there is ownerhip, and child objects can not belong to another parent object."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q22. How are user stories different from use cases?\n\n- [x] User Stories are shorter and less detailed.\n- [ ] User stories are more accurate.\n- [ ] User stories are more detailed and structured.\n- [ ] User storised are more anecdotal and personal.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q22. How are user stories different from use cases?</h4>",
   "text": "Q22. How are user stories different from use cases?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "User Stories are shorter and less detailed.",
    "text": "User Stories are shorter and less detailed."
   },
   {
    "isCorrect": false,
    "html": "User stories are more accurate.",
    "text": "User stories are more accurate."
   },
   {
    "isCorrect": false,
    "html": "User stories are more detailed and structured.",
    "text": "User stories are more detailed and structured."
   },
   {
    "isCorrect": false,
    "html": "User storised are more anecdotal and personal.",
    "text": "User storised are more anecdotal and personal."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q23. Which type of inheritance must be used so that the resultant is hybrid?\n\n- [x] multiple\n- [ ] any type of inheritance\n- [ ] multilevel\n- [ ] hierarchical\n\n```\n- Single Inheritance is where a derived class inherits properties and behaviour from a single base class. Example: Class A → Class B.\n- Hierarchical Inheritance is where more than one derived class is created from a single base class. Example: Class A → Class B → Class C.\n- Multiple Inheritance is for deriving a class from multiple base classes. Here, the child objects programmers create will have combined aspects of characteristics and features from multiple parent classes. These objects do follow their hierarchies of base classes.\n- Multilevel Inheritance is where a child class is derived from another derived class. This feature carries combined aspects of multiple classes and follows their hierarchies.\n- Hybrid Inheritance is a heterogeneous feature of using multiple inheritances. Here a child class is derived from one or more combinations of single, hierarchical, and multilevel inheritances. This inheritance is adopted for programs to mix different types of inheritance; for example, when mixing a single inheritance with multiple inheritances or maybe a situation when multiple inheritances are mixed within a single program.\n```\n\n[reference](https://www.codingninjas.com/blog/2021/09/23/hybrid-inheritance-in-java)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q23. Which type of inheritance must be used so that the resultant is hybrid?</h4>",
   "text": "Q23. Which type of inheritance must be used so that the resultant is hybrid?"
  },
  "preformated": {
   "language": "",
   "html": "<pre><code>- Single Inheritance is where a derived class inherits properties and behaviour from a single base class. Example: Class A → Class B.\n- Hierarchical Inheritance is where more than one derived class is created from a single base class. Example: Class A → Class B → Class C.\n- Multiple Inheritance is for deriving a class from multiple base classes. Here, the child objects programmers create will have combined aspects of characteristics and features from multiple parent classes. These objects do follow their hierarchies of base classes.\n- Multilevel Inheritance is where a child class is derived from another derived class. This feature carries combined aspects of multiple classes and follows their hierarchies.\n- Hybrid Inheritance is a heterogeneous feature of using multiple inheritances. Here a child class is derived from one or more combinations of single, hierarchical, and multilevel inheritances. This inheritance is adopted for programs to mix different types of inheritance; for example, when mixing a single inheritance with multiple inheritances or maybe a situation when multiple inheritances are mixed within a single program.\n</code></pre>",
   "text": "- Single Inheritance is where a derived class inherits properties and behaviour from a single base class. Example: Class A → Class B.\n- Hierarchical Inheritance is where more than one derived class is created from a single base class. Example: Class A → Class B → Class C.\n- Multiple Inheritance is for deriving a class from multiple base classes. Here, the child objects programmers create will have combined aspects of characteristics and features from multiple parent classes. These objects do follow their hierarchies of base classes.\n- Multilevel Inheritance is where a child class is derived from another derived class. This feature carries combined aspects of multiple classes and follows their hierarchies.\n- Hybrid Inheritance is a heterogeneous feature of using multiple inheritances. Here a child class is derived from one or more combinations of single, hierarchical, and multilevel inheritances. This inheritance is adopted for programs to mix different types of inheritance; for example, when mixing a single inheritance with multiple inheritances or maybe a situation when multiple inheritances are mixed within a single program.\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "multiple",
    "text": "multiple"
   },
   {
    "isCorrect": false,
    "html": "any type of inheritance",
    "text": "any type of inheritance"
   },
   {
    "isCorrect": false,
    "html": "multilevel",
    "text": "multilevel"
   },
   {
    "isCorrect": false,
    "html": "hierarchical<br><pre><code>- Single Inheritance is where a derived class inherits properties and behaviour from a single base class. Example: Class A → Class B.\n- Hierarchical Inheritance is where more than one derived class is created from a single base class. Example: Class A → Class B → Class C.\n- Multiple Inheritance is for deriving a class from multiple base classes. Here, the child objects programmers create will have combined aspects of characteristics and features from multiple parent classes. These objects do follow their hierarchies of base classes.\n- Multilevel Inheritance is where a child class is derived from another derived class. This feature carries combined aspects of multiple classes and follows their hierarchies.\n- Hybrid Inheritance is a heterogeneous feature of using multiple inheritances. Here a child class is derived from one or more combinations of single, hierarchical, and multilevel inheritances. This inheritance is adopted for programs to mix different types of inheritance; for example, when mixing a single inheritance with multiple inheritances or maybe a situation when multiple inheritances are mixed within a single program.\n</code></pre>",
    "text": "hierarchical- Single Inheritance is where a derived class inherits properties and behaviour from a single base class. Example: Class A → Class B.\n- Hierarchical Inheritance is where more than one derived class is created from a single base class. Example: Class A → Class B → Class C.\n- Multiple Inheritance is for deriving a class from multiple base classes. Here, the child objects programmers create will have combined aspects of characteristics and features from multiple parent classes. These objects do follow their hierarchies of base classes.\n- Multilevel Inheritance is where a child class is derived from another derived class. This feature carries combined aspects of multiple classes and follows their hierarchies.\n- Hybrid Inheritance is a heterogeneous feature of using multiple inheritances. Here a child class is derived from one or more combinations of single, hierarchical, and multilevel inheritances. This inheritance is adopted for programs to mix different types of inheritance; for example, when mixing a single inheritance with multiple inheritances or maybe a situation when multiple inheritances are mixed within a single program.\n"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.codingninjas.com/blog/2021/09/23/hybrid-inheritance-in-java\">reference</a></p>",
   "text": "reference"
  }
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q24. A language that does not support polymorphism but supports classes is considered what?\n\n- [x] an object-based language\n- [ ] a class-based language\n- [ ] a procedure-oriented language\n- [ ] if classes are supported, polymorphism will be supported\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q24. A language that does not support polymorphism but supports classes is considered what?</h4>",
   "text": "Q24. A language that does not support polymorphism but supports classes is considered what?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "an object-based language",
    "text": "an object-based language"
   },
   {
    "isCorrect": false,
    "html": "a class-based language",
    "text": "a class-based language"
   },
   {
    "isCorrect": false,
    "html": "a procedure-oriented language",
    "text": "a procedure-oriented language"
   },
   {
    "isCorrect": false,
    "html": "if classes are supported, polymorphism will be supported",
    "text": "if classes are supported, polymorphism will be supported"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q25. Two classes combine private data members and provide public member functions to access and manipulate those data members. Where is abstraction used?\n\n- [ ] Abstraction is using a private access specifier for the data members.\n- [x] Abstraction is using public member functions to access and manipulate the data members.\n- [ ] Abstraction is using the class concept with both data members and member functions.\n- [ ] There is insufficient information to decide where abstraction is being used.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q25. Two classes combine private data members and provide public member functions to access and manipulate those data members. Where is abstraction used?</h4>",
   "text": "Q25. Two classes combine private data members and provide public member functions to access and manipulate those data members. Where is abstraction used?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Abstraction is using a private access specifier for the data members.",
    "text": "Abstraction is using a private access specifier for the data members."
   },
   {
    "isCorrect": true,
    "html": "Abstraction is using public member functions to access and manipulate the data members.",
    "text": "Abstraction is using public member functions to access and manipulate the data members."
   },
   {
    "isCorrect": false,
    "html": "Abstraction is using the class concept with both data members and member functions.",
    "text": "Abstraction is using the class concept with both data members and member functions."
   },
   {
    "isCorrect": false,
    "html": "There is insufficient information to decide where abstraction is being used.",
    "text": "There is insufficient information to decide where abstraction is being used."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q26. What are the five Creational Design patterns by the Gang of Four ?\n\n- [ ] Observer, State, Strategy, Template Method, and Visitor.\n- [ ] Composite, Visitor, State, Prototype, and Singleton.\n- [ ] Composite, Builder, Factory Method, Prototype, and Singleton.\n- [x] Abstract Factory, Builder, Factory Method, Prototype, and Singleton.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q26. What are the five Creational Design patterns by the Gang of Four ?</h4>",
   "text": "Q26. What are the five Creational Design patterns by the Gang of Four ?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Observer, State, Strategy, Template Method, and Visitor.",
    "text": "Observer, State, Strategy, Template Method, and Visitor."
   },
   {
    "isCorrect": false,
    "html": "Composite, Visitor, State, Prototype, and Singleton.",
    "text": "Composite, Visitor, State, Prototype, and Singleton."
   },
   {
    "isCorrect": false,
    "html": "Composite, Builder, Factory Method, Prototype, and Singleton.",
    "text": "Composite, Builder, Factory Method, Prototype, and Singleton."
   },
   {
    "isCorrect": true,
    "html": "Abstract Factory, Builder, Factory Method, Prototype, and Singleton.",
    "text": "Abstract Factory, Builder, Factory Method, Prototype, and Singleton."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q27. In multilevel inheritance, one class inherits how many classes?\n\n- [x] one class only\n- [ ] two classes\n- [ ] as many classes as required\n- [ ] at least two classes\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q27. In multilevel inheritance, one class inherits how many classes?</h4>",
   "text": "Q27. In multilevel inheritance, one class inherits how many classes?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "one class only",
    "text": "one class only"
   },
   {
    "isCorrect": false,
    "html": "two classes",
    "text": "two classes"
   },
   {
    "isCorrect": false,
    "html": "as many classes as required",
    "text": "as many classes as required"
   },
   {
    "isCorrect": false,
    "html": "at least two classes",
    "text": "at least two classes"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q28. if an object is passed by reference, the changes made in the function are reflected \\_.\n\n- [x] to the main object of the caller function, too\n- [ ] on the caller function object and also the called function object\n- [ ] on the copy of the object that is made during the pass\n- [ ] only in the local scope of the called function\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q28. if an object is passed by reference, the changes made in the function are reflected _.</h4>",
   "text": "Q28. if an object is passed by reference, the changes made in the function are reflected _."
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "to the main object of the caller function, too",
    "text": "to the main object of the caller function, too"
   },
   {
    "isCorrect": false,
    "html": "on the caller function object and also the called function object",
    "text": "on the caller function object and also the called function object"
   },
   {
    "isCorrect": false,
    "html": "on the copy of the object that is made during the pass",
    "text": "on the copy of the object that is made during the pass"
   },
   {
    "isCorrect": false,
    "html": "only in the local scope of the called function",
    "text": "only in the local scope of the called function"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q29. What is a method?\n\n- [ ] a set of instructions designed to perform a frequently used operation within a program and return no values\n- [x] the exact same thing as a function and subroutine\n- [ ] a set of variables that can change over time\n- [ ] a procedure associated with data and behaviour\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q29. What is a method?</h4>",
   "text": "Q29. What is a method?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a set of instructions designed to perform a frequently used operation within a program and return no values",
    "text": "a set of instructions designed to perform a frequently used operation within a program and return no values"
   },
   {
    "isCorrect": true,
    "html": "the exact same thing as a function and subroutine",
    "text": "the exact same thing as a function and subroutine"
   },
   {
    "isCorrect": false,
    "html": "a set of variables that can change over time",
    "text": "a set of variables that can change over time"
   },
   {
    "isCorrect": false,
    "html": "a procedure associated with data and behaviour",
    "text": "a procedure associated with data and behaviour"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q30. A mobile phone is made up of components such as a motherboard, camera, and sensors. The motherboard represents all the functions of a phone, the display shows the display only, and the phone is represented as a whole. Which of the following has the highest level of abstraction?\n\n- [ ] camera\n- [ ] display\n- [ ] motherboard\n- [x] mobile phone\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q30. A mobile phone is made up of components such as a motherboard, camera, and sensors. The motherboard represents all the functions of a phone, the display shows the display only, and the phone is represented as a whole. Which of the following has the highest level of abstraction?</h4>",
   "text": "Q30. A mobile phone is made up of components such as a motherboard, camera, and sensors. The motherboard represents all the functions of a phone, the display shows the display only, and the phone is represented as a whole. Which of the following has the highest level of abstraction?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "camera",
    "text": "camera"
   },
   {
    "isCorrect": false,
    "html": "display",
    "text": "display"
   },
   {
    "isCorrect": false,
    "html": "motherboard",
    "text": "motherboard"
   },
   {
    "isCorrect": true,
    "html": "mobile phone",
    "text": "mobile phone"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q31. Which class has the highest degree of abstraction in a multilevel inheritance relationship of five levels?\n\n- [ ] the class at the third level\n- [x] the class at the first level\n- [ ] All have the same degree of abstraction.\n- [ ] the class at the second level\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q31. Which class has the highest degree of abstraction in a multilevel inheritance relationship of five levels?</h4>",
   "text": "Q31. Which class has the highest degree of abstraction in a multilevel inheritance relationship of five levels?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "the class at the third level",
    "text": "the class at the third level"
   },
   {
    "isCorrect": true,
    "html": "the class at the first level",
    "text": "the class at the first level"
   },
   {
    "isCorrect": false,
    "html": "All have the same degree of abstraction.",
    "text": "All have the same degree of abstraction."
   },
   {
    "isCorrect": false,
    "html": "the class at the second level",
    "text": "the class at the second level"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q32. Which is NOT one of the basic types of inheritance?\n\n- [ ] multilevel inheritance\n- [x] double inheritance\n- [ ] single inheritance\n- [ ] hierarchical inheritance\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q32. Which is NOT one of the basic types of inheritance?</h4>",
   "text": "Q32. Which is NOT one of the basic types of inheritance?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "multilevel inheritance",
    "text": "multilevel inheritance"
   },
   {
    "isCorrect": true,
    "html": "double inheritance",
    "text": "double inheritance"
   },
   {
    "isCorrect": false,
    "html": "single inheritance",
    "text": "single inheritance"
   },
   {
    "isCorrect": false,
    "html": "hierarchical inheritance",
    "text": "hierarchical inheritance"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q33. Why is code duplication so insidious?\n\n- [ ] The duplication uses unnecessary space.\n- [x] One has to maintain all the duplicates.\n- [ ] Duplication can cause intellectual property concerns.\n- [ ] Duplication is easy to hide.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q33. Why is code duplication so insidious?</h4>",
   "text": "Q33. Why is code duplication so insidious?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The duplication uses unnecessary space.",
    "text": "The duplication uses unnecessary space."
   },
   {
    "isCorrect": true,
    "html": "One has to maintain all the duplicates.",
    "text": "One has to maintain all the duplicates."
   },
   {
    "isCorrect": false,
    "html": "Duplication can cause intellectual property concerns.",
    "text": "Duplication can cause intellectual property concerns."
   },
   {
    "isCorrect": false,
    "html": "Duplication is easy to hide.",
    "text": "Duplication is easy to hide."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q34. When and how often is a static constructor called?\n\n- [ ] It is called initially when an object is created and called with every new object instance.\n- [ ] It is called when an object is destroyed and only one time.\n- [x] It is called initially when an object is created and only one time.\n- [ ] It is created at time when the object is discarded.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q34. When and how often is a static constructor called?</h4>",
   "text": "Q34. When and how often is a static constructor called?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It is called initially when an object is created and called with every new object instance.",
    "text": "It is called initially when an object is created and called with every new object instance."
   },
   {
    "isCorrect": false,
    "html": "It is called when an object is destroyed and only one time.",
    "text": "It is called when an object is destroyed and only one time."
   },
   {
    "isCorrect": true,
    "html": "It is called initially when an object is created and only one time.",
    "text": "It is called initially when an object is created and only one time."
   },
   {
    "isCorrect": false,
    "html": "It is created at time when the object is discarded.",
    "text": "It is created at time when the object is discarded."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q35. What does the code shown below demonstrate, and why?\n\n```cpp\n   static void Multiply(int num1, int num2) {};\n   static void Multiply(double num1, double num2, double num3) {};\n   static void Multiply(float num1, float num2) {};\n```\n\n- [ ] polymorphism, because each method can perform different task\n- [ ] method overriding, because it display the same method name, different or same parameters, and same return type\n- [x] method overloading, because it allows the creation of several methods with the same name, wich differ by the type of input via parameter\n- [ ] method overriding, because it display the same method name, different parameters, and same return type\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q35. What does the code shown below demonstrate, and why?</h4>",
   "text": "Q35. What does the code shown below demonstrate, and why?"
  },
  "preformated": {
   "language": "cpp",
   "html": "<pre><code class=\"language-cpp\">   <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> num2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> num3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "   static void Multiply(int num1, int num2) {};\n   static void Multiply(double num1, double num2, double num3) {};\n   static void Multiply(float num1, float num2) {};\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "polymorphism, because each method can perform different task",
    "text": "polymorphism, because each method can perform different task"
   },
   {
    "isCorrect": false,
    "html": "method overriding, because it display the same method name, different or same parameters, and same return type",
    "text": "method overriding, because it display the same method name, different or same parameters, and same return type"
   },
   {
    "isCorrect": true,
    "html": "method overloading, because it allows the creation of several methods with the same name, wich differ by the type of input via parameter",
    "text": "method overloading, because it allows the creation of several methods with the same name, wich differ by the type of input via parameter"
   },
   {
    "isCorrect": false,
    "html": "method overriding, because it display the same method name, different parameters, and same return type",
    "text": "method overriding, because it display the same method name, different parameters, and same return type"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q36. What is the purpose of static constructor?\n\n- [x] to initialize all the members with static value\n- [ ] to delete the static members when not required\n- [ ] to initialize the static members of class\n- [ ] to clear all the static members' initialized values\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q36. What is the purpose of static constructor?</h4>",
   "text": "Q36. What is the purpose of static constructor?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "to initialize all the members with static value",
    "text": "to initialize all the members with static value"
   },
   {
    "isCorrect": false,
    "html": "to delete the static members when not required",
    "text": "to delete the static members when not required"
   },
   {
    "isCorrect": false,
    "html": "to initialize the static members of class",
    "text": "to initialize the static members of class"
   },
   {
    "isCorrect": false,
    "html": "to clear all the static members' initialized values",
    "text": "to clear all the static members' initialized values"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q37. What are CRC Cards?\n\n- [ ] Code Responsibility Collection cards are a brainstorming tool used in the design of procedural software\n- [x] Class Responsibility collaboration cards are a brainstorming tool used in the design of oop software\n- [ ] Code Responsibility Correction cards are tools used for debugging\n- [ ] Code Responsibility Correction cards are tools for modeling\n\n[reference link](https://en.wikipedia.org/wiki/Class-responsibility-collaboration_card)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q37. What are CRC Cards?</h4>",
   "text": "Q37. What are CRC Cards?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Code Responsibility Collection cards are a brainstorming tool used in the design of procedural software",
    "text": "Code Responsibility Collection cards are a brainstorming tool used in the design of procedural software"
   },
   {
    "isCorrect": true,
    "html": "Class Responsibility collaboration cards are a brainstorming tool used in the design of oop software",
    "text": "Class Responsibility collaboration cards are a brainstorming tool used in the design of oop software"
   },
   {
    "isCorrect": false,
    "html": "Code Responsibility Correction cards are tools used for debugging",
    "text": "Code Responsibility Correction cards are tools used for debugging"
   },
   {
    "isCorrect": false,
    "html": "Code Responsibility Correction cards are tools for modeling",
    "text": "Code Responsibility Correction cards are tools for modeling"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://en.wikipedia.org/wiki/Class-responsibility-collaboration_card\">reference link</a></p>",
   "text": "reference link"
  }
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q38. 1 How are contents of a composition different from those of aggregation?\n\n- [ ] if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection\n- [x] if a composition dies, the contents die\n- [ ] the contents of a composition are all siblings\n- [ ] an aggregation contains only abstract classes\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q38. 1 How are contents of a composition different from those of aggregation?</h4>",
   "text": "Q38. 1 How are contents of a composition different from those of aggregation?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection",
    "text": "if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection"
   },
   {
    "isCorrect": true,
    "html": "if a composition dies, the contents die",
    "text": "if a composition dies, the contents die"
   },
   {
    "isCorrect": false,
    "html": "the contents of a composition are all siblings",
    "text": "the contents of a composition are all siblings"
   },
   {
    "isCorrect": false,
    "html": "an aggregation contains only abstract classes",
    "text": "an aggregation contains only abstract classes"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q39. 2 Which statement about compositions and aggregations is true?\n\n- [ ] if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection\n- [x] if a composition dies, the contents die\n- [ ] the contents of a composition are all siblings\n- [ ] an aggregation contains only abstract classes\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q39. 2 Which statement about compositions and aggregations is true?</h4>",
   "text": "Q39. 2 Which statement about compositions and aggregations is true?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection",
    "text": "if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection"
   },
   {
    "isCorrect": true,
    "html": "if a composition dies, the contents die",
    "text": "if a composition dies, the contents die"
   },
   {
    "isCorrect": false,
    "html": "the contents of a composition are all siblings",
    "text": "the contents of a composition are all siblings"
   },
   {
    "isCorrect": false,
    "html": "an aggregation contains only abstract classes",
    "text": "an aggregation contains only abstract classes"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q40. What is the result of using more abstraction?\n\n- [ ] it can increase code vulnerability\n- [ ] it can make code unsafe\n- [x] it can limit code readability\n- [ ] it can be safer for coding\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q40. What is the result of using more abstraction?</h4>",
   "text": "Q40. What is the result of using more abstraction?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "it can increase code vulnerability",
    "text": "it can increase code vulnerability"
   },
   {
    "isCorrect": false,
    "html": "it can make code unsafe",
    "text": "it can make code unsafe"
   },
   {
    "isCorrect": true,
    "html": "it can limit code readability",
    "text": "it can limit code readability"
   },
   {
    "isCorrect": false,
    "html": "it can be safer for coding",
    "text": "it can be safer for coding"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q41. Which is false for a member function of a class?\n\n- [ ] Member functions can be defined only inside or outside the class body.\n- [ ] Member functions can be made to be friends of another class.\n- [x] Member functions do not need to be declared inside the class definition.\n- [ ] All member functions need to be defined.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q41. Which is false for a member function of a class?</h4>",
   "text": "Q41. Which is false for a member function of a class?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Member functions can be defined only inside or outside the class body.",
    "text": "Member functions can be defined only inside or outside the class body."
   },
   {
    "isCorrect": false,
    "html": "Member functions can be made to be friends of another class.",
    "text": "Member functions can be made to be friends of another class."
   },
   {
    "isCorrect": true,
    "html": "Member functions do not need to be declared inside the class definition.",
    "text": "Member functions do not need to be declared inside the class definition."
   },
   {
    "isCorrect": false,
    "html": "All member functions need to be defined.",
    "text": "All member functions need to be defined."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q42. Why is inheritance used when creating a new class?\n\n- [ ] to protect attributes from unwanted changes\n- [ ] to delegate coding responsibility more efficiently\n- [ ] to conserve memory\n- [x] to avoid writing duplicate code\n- [ ] to separate class behavior from the more general\n\n**NOTE:** I don't have 4th variant in my test, it changed to new 5th variant. Is it also true?\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q42. Why is inheritance used when creating a new class?</h4>",
   "text": "Q42. Why is inheritance used when creating a new class?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "to protect attributes from unwanted changes",
    "text": "to protect attributes from unwanted changes"
   },
   {
    "isCorrect": false,
    "html": "to delegate coding responsibility more efficiently",
    "text": "to delegate coding responsibility more efficiently"
   },
   {
    "isCorrect": false,
    "html": "to conserve memory",
    "text": "to conserve memory"
   },
   {
    "isCorrect": true,
    "html": "to avoid writing duplicate code",
    "text": "to avoid writing duplicate code"
   },
   {
    "isCorrect": false,
    "html": "to separate class behavior from the more general",
    "text": "to separate class behavior from the more general"
   }
  ],
  "reference": {
   "html": "<p><strong>NOTE:</strong> I don't have 4th variant in my test, it changed to new 5th variant. Is it also true?</p>",
   "text": "NOTE: I don't have 4th variant in my test, it changed to new 5th variant. Is it also true?"
  }
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q43. In addition to attributes and behaviours, what quality must a class possess?\n\n- [x] a name\n- [ ] a state\n- [ ] a color\n- [ ] an object\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q43. In addition to attributes and behaviours, what quality must a class possess?</h4>",
   "text": "Q43. In addition to attributes and behaviours, what quality must a class possess?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "a name",
    "text": "a name"
   },
   {
    "isCorrect": false,
    "html": "a state",
    "text": "a state"
   },
   {
    "isCorrect": false,
    "html": "a color",
    "text": "a color"
   },
   {
    "isCorrect": false,
    "html": "an object",
    "text": "an object"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q44. Which type of function among the following shows polymorphism?\n\n- [ ] inline function\n- [ ] undefined function\n- [x] virtual function\n- [ ] class member function\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q44. Which type of function among the following shows polymorphism?</h4>",
   "text": "Q44. Which type of function among the following shows polymorphism?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "inline function",
    "text": "inline function"
   },
   {
    "isCorrect": false,
    "html": "undefined function",
    "text": "undefined function"
   },
   {
    "isCorrect": true,
    "html": "virtual function",
    "text": "virtual function"
   },
   {
    "isCorrect": false,
    "html": "class member function",
    "text": "class member function"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q45. Which words in the following list are candidates for objects: trumpet, clean, enrage, leaf, tree, collapse, active, and lively?\n\n- [ ] leaf and tree\n- [ ] clean, enrage, and collapse\n- [ ] clean, active, and lively\n- [x] leaf, tree, and trumpet\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q45. Which words in the following list are candidates for objects: trumpet, clean, enrage, leaf, tree, collapse, active, and lively?</h4>",
   "text": "Q45. Which words in the following list are candidates for objects: trumpet, clean, enrage, leaf, tree, collapse, active, and lively?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "leaf and tree",
    "text": "leaf and tree"
   },
   {
    "isCorrect": false,
    "html": "clean, enrage, and collapse",
    "text": "clean, enrage, and collapse"
   },
   {
    "isCorrect": false,
    "html": "clean, active, and lively",
    "text": "clean, active, and lively"
   },
   {
    "isCorrect": true,
    "html": "leaf, tree, and trumpet",
    "text": "leaf, tree, and trumpet"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q46. What best describes what object-oriented programming does?\n\n- [x] It focuses on objects that interact cleanly with one another.\n- [ ] It programs exclusively to interfaces.\n- [ ] It programs exclusively to classes.\n- [ ] It creates one class for all business logic.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q46. What best describes what object-oriented programming does?</h4>",
   "text": "Q46. What best describes what object-oriented programming does?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "It focuses on objects that interact cleanly with one another.",
    "text": "It focuses on objects that interact cleanly with one another."
   },
   {
    "isCorrect": false,
    "html": "It programs exclusively to interfaces.",
    "text": "It programs exclusively to interfaces."
   },
   {
    "isCorrect": false,
    "html": "It programs exclusively to classes.",
    "text": "It programs exclusively to classes."
   },
   {
    "isCorrect": false,
    "html": "It creates one class for all business logic.",
    "text": "It creates one class for all business logic."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q47. Can abstract classes be used in multilevel inheritance?\n\n- [ ] No, abstract classes can be used only in single-level inheritance since they must be immediately implemented.\n- [x] yes, always\n- [ ] yes, but with only one abstract class\n- [ ] No, abstract classes do not have constructors.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q47. Can abstract classes be used in multilevel inheritance?</h4>",
   "text": "Q47. Can abstract classes be used in multilevel inheritance?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "No, abstract classes can be used only in single-level inheritance since they must be immediately implemented.",
    "text": "No, abstract classes can be used only in single-level inheritance since they must be immediately implemented."
   },
   {
    "isCorrect": true,
    "html": "yes, always",
    "text": "yes, always"
   },
   {
    "isCorrect": false,
    "html": "yes, but with only one abstract class",
    "text": "yes, but with only one abstract class"
   },
   {
    "isCorrect": false,
    "html": "No, abstract classes do not have constructors.",
    "text": "No, abstract classes do not have constructors."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q48. What type of inheritance may lead to the diamond problem?\n\n- [ ] single level\n- [ ] multilevel\n- [ ] hierarchical\n- [x] multiple\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q48. What type of inheritance may lead to the diamond problem?</h4>",
   "text": "Q48. What type of inheritance may lead to the diamond problem?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "single level",
    "text": "single level"
   },
   {
    "isCorrect": false,
    "html": "multilevel",
    "text": "multilevel"
   },
   {
    "isCorrect": false,
    "html": "hierarchical",
    "text": "hierarchical"
   },
   {
    "isCorrect": true,
    "html": "multiple",
    "text": "multiple"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q49. What is the relationship between abstraction and encapsulation?\n\n- [x] Abstraction is about making relevant information visible, while encapsulation enables a programmer to implement the desired level of abstraction.\n- [ ] Abstraction and encapsulation are essentially the same.\n- [ ] Abstraction and encapsulation are unrelated.\n- [ ] Encapsulation is about making relevant information visible, while abstraction enables a programmer to implement the desired level of encapsulation.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q49. What is the relationship between abstraction and encapsulation?</h4>",
   "text": "Q49. What is the relationship between abstraction and encapsulation?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Abstraction is about making relevant information visible, while encapsulation enables a programmer to implement the desired level of abstraction.",
    "text": "Abstraction is about making relevant information visible, while encapsulation enables a programmer to implement the desired level of abstraction."
   },
   {
    "isCorrect": false,
    "html": "Abstraction and encapsulation are essentially the same.",
    "text": "Abstraction and encapsulation are essentially the same."
   },
   {
    "isCorrect": false,
    "html": "Abstraction and encapsulation are unrelated.",
    "text": "Abstraction and encapsulation are unrelated."
   },
   {
    "isCorrect": false,
    "html": "Encapsulation is about making relevant information visible, while abstraction enables a programmer to implement the desired level of encapsulation.",
    "text": "Encapsulation is about making relevant information visible, while abstraction enables a programmer to implement the desired level of encapsulation."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q50. Which of these keywords are access specifiers?\n\n- [ ] abstract and public\n- [x] public and private\n- [ ] this and final\n- [ ] final and abstract\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q50. Which of these keywords are access specifiers?</h4>",
   "text": "Q50. Which of these keywords are access specifiers?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "abstract and public",
    "text": "abstract and public"
   },
   {
    "isCorrect": true,
    "html": "public and private",
    "text": "public and private"
   },
   {
    "isCorrect": false,
    "html": "this and final",
    "text": "this and final"
   },
   {
    "isCorrect": false,
    "html": "final and abstract",
    "text": "final and abstract"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q51. What is a reference to an object?\n\n- [ ] It is the address of variable only -- not the method of an object.\n- [ ] It is a shallow pointer that contains address of an object.\n- [ ] It is the physical address of an object.\n- [x] It is the address where the variables and methods of an object are stored.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q51. What is a reference to an object?</h4>",
   "text": "Q51. What is a reference to an object?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It is the address of variable only -- not the method of an object.",
    "text": "It is the address of variable only -- not the method of an object."
   },
   {
    "isCorrect": false,
    "html": "It is a shallow pointer that contains address of an object.",
    "text": "It is a shallow pointer that contains address of an object."
   },
   {
    "isCorrect": false,
    "html": "It is the physical address of an object.",
    "text": "It is the physical address of an object."
   },
   {
    "isCorrect": true,
    "html": "It is the address where the variables and methods of an object are stored.",
    "text": "It is the address where the variables and methods of an object are stored."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q52. Why is unit testing harder in OOP than functional programming?\n\n- [x] Objects may maintain internal state, which is not easily accessible by the tests.\n- [ ] The quality of unit testing frameworks for functional languages is better.\n- [ ] OOP promotes code reuse, which means that your tests have to consider more use cases.\n- [ ] Object-oriented languages tend to rely on frameworks such as Spring or Hibernate, which make them difficult to test.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q52. Why is unit testing harder in OOP than functional programming?</h4>",
   "text": "Q52. Why is unit testing harder in OOP than functional programming?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Objects may maintain internal state, which is not easily accessible by the tests.",
    "text": "Objects may maintain internal state, which is not easily accessible by the tests."
   },
   {
    "isCorrect": false,
    "html": "The quality of unit testing frameworks for functional languages is better.",
    "text": "The quality of unit testing frameworks for functional languages is better."
   },
   {
    "isCorrect": false,
    "html": "OOP promotes code reuse, which means that your tests have to consider more use cases.",
    "text": "OOP promotes code reuse, which means that your tests have to consider more use cases."
   },
   {
    "isCorrect": false,
    "html": "Object-oriented languages tend to rely on frameworks such as Spring or Hibernate, which make them difficult to test.",
    "text": "Object-oriented languages tend to rely on frameworks such as Spring or Hibernate, which make them difficult to test."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q53. What is the function of a user diagram?\n\n- [ ] It connects actors to use cases.\n- [x] It links actors to roles played in all use cases.\n- [ ] It lists all actors for each use case.\n- [ ] It minimizes the number of actors required.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q53. What is the function of a user diagram?</h4>",
   "text": "Q53. What is the function of a user diagram?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It connects actors to use cases.",
    "text": "It connects actors to use cases."
   },
   {
    "isCorrect": true,
    "html": "It links actors to roles played in all use cases.",
    "text": "It links actors to roles played in all use cases."
   },
   {
    "isCorrect": false,
    "html": "It lists all actors for each use case.",
    "text": "It lists all actors for each use case."
   },
   {
    "isCorrect": false,
    "html": "It minimizes the number of actors required.",
    "text": "It minimizes the number of actors required."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q54. How do object behavior and attributes differ?\n\n- [ ] Behavior describe dynamic properties; attributes are static.\n- [x] Attributes describe a state; behaviors describe a change.\n- [ ] Attributes apply only to a specified object; behavior apply to other linked objects.\n- [ ] Behaviors are vector quantities; attributes are scalars.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q54. How do object behavior and attributes differ?</h4>",
   "text": "Q54. How do object behavior and attributes differ?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Behavior describe dynamic properties; attributes are static.",
    "text": "Behavior describe dynamic properties; attributes are static."
   },
   {
    "isCorrect": true,
    "html": "Attributes describe a state; behaviors describe a change.",
    "text": "Attributes describe a state; behaviors describe a change."
   },
   {
    "isCorrect": false,
    "html": "Attributes apply only to a specified object; behavior apply to other linked objects.",
    "text": "Attributes apply only to a specified object; behavior apply to other linked objects."
   },
   {
    "isCorrect": false,
    "html": "Behaviors are vector quantities; attributes are scalars.",
    "text": "Behaviors are vector quantities; attributes are scalars."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q55. The open/closed principle states that classes should be open for \\_ but closed for \\_.\n\n- [ ] refactoring; duplication\n- [ ] modification; duplication\n- [x] extension; modification\n- [ ] reuse; encapsulation\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q55. The open/closed principle states that classes should be open for _ but closed for _.</h4>",
   "text": "Q55. The open/closed principle states that classes should be open for _ but closed for _."
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "refactoring; duplication",
    "text": "refactoring; duplication"
   },
   {
    "isCorrect": false,
    "html": "modification; duplication",
    "text": "modification; duplication"
   },
   {
    "isCorrect": true,
    "html": "extension; modification",
    "text": "extension; modification"
   },
   {
    "isCorrect": false,
    "html": "reuse; encapsulation",
    "text": "reuse; encapsulation"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q56. Why would you override a method of a base class?\n\n- [ ] to define a method that must be implemented in a derived class\n- [x] to define a custom implementation of an inherited member\n- [ ] to define a method that must be implemented in a superclass only\n- [ ] to define a class that can be inherited from\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q56. Why would you override a method of a base class?</h4>",
   "text": "Q56. Why would you override a method of a base class?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "to define a method that must be implemented in a derived class",
    "text": "to define a method that must be implemented in a derived class"
   },
   {
    "isCorrect": true,
    "html": "to define a custom implementation of an inherited member",
    "text": "to define a custom implementation of an inherited member"
   },
   {
    "isCorrect": false,
    "html": "to define a method that must be implemented in a superclass only",
    "text": "to define a method that must be implemented in a superclass only"
   },
   {
    "isCorrect": false,
    "html": "to define a class that can be inherited from",
    "text": "to define a class that can be inherited from"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q57. What is a copy constructor?\n\n- [x] It is a unique constructor for creating a new object as a copy of an object that already exists. There will always be only one copy constructor that can be either defined by the user or the system.\n- [ ] It is a constructor that duplicates itself when requested on demand.\n- [ ] It is a common constructor for preventing the creation of a new object as a copy of an object that already exists. There will always be multiple standard constructors that can be either defined by the user or the system.\n- [ ] It is a constructor that duplicates itself on its own, based on memory available.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q57. What is a copy constructor?</h4>",
   "text": "Q57. What is a copy constructor?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "It is a unique constructor for creating a new object as a copy of an object that already exists. There will always be only one copy constructor that can be either defined by the user or the system.",
    "text": "It is a unique constructor for creating a new object as a copy of an object that already exists. There will always be only one copy constructor that can be either defined by the user or the system."
   },
   {
    "isCorrect": false,
    "html": "It is a constructor that duplicates itself when requested on demand.",
    "text": "It is a constructor that duplicates itself when requested on demand."
   },
   {
    "isCorrect": false,
    "html": "It is a common constructor for preventing the creation of a new object as a copy of an object that already exists. There will always be multiple standard constructors that can be either defined by the user or the system.",
    "text": "It is a common constructor for preventing the creation of a new object as a copy of an object that already exists. There will always be multiple standard constructors that can be either defined by the user or the system."
   },
   {
    "isCorrect": false,
    "html": "It is a constructor that duplicates itself on its own, based on memory available.",
    "text": "It is a constructor that duplicates itself on its own, based on memory available."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q58. What defines the catch block most accurately?\n\n- [x] The catch block that will be executed is the one that best matches the type of exception thrown.\n- [ ] Multiple catch blocks can never be associated with a single try block.\n- [ ] Multiple catch blocks are mandatory for each try block.\n- [ ] Multiple catch blocks will all be executed in the case of an exception.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q58. What defines the catch block most accurately?</h4>",
   "text": "Q58. What defines the catch block most accurately?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "The catch block that will be executed is the one that best matches the type of exception thrown.",
    "text": "The catch block that will be executed is the one that best matches the type of exception thrown."
   },
   {
    "isCorrect": false,
    "html": "Multiple catch blocks can never be associated with a single try block.",
    "text": "Multiple catch blocks can never be associated with a single try block."
   },
   {
    "isCorrect": false,
    "html": "Multiple catch blocks are mandatory for each try block.",
    "text": "Multiple catch blocks are mandatory for each try block."
   },
   {
    "isCorrect": false,
    "html": "Multiple catch blocks will all be executed in the case of an exception.",
    "text": "Multiple catch blocks will all be executed in the case of an exception."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q59. There are five classes. Class E is derived from class D, D from C, C from B, and B from A. Which class constructor(s) will be called first if the object of E or D is created?\n\n- [x] A\n- [ ] B\n- [ ] C\n- [ ] C and B\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q59. There are five classes. Class E is derived from class D, D from C, C from B, and B from A. Which class constructor(s) will be called first if the object of E or D is created?</h4>",
   "text": "Q59. There are five classes. Class E is derived from class D, D from C, C from B, and B from A. Which class constructor(s) will be called first if the object of E or D is created?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "A",
    "text": "A"
   },
   {
    "isCorrect": false,
    "html": "B",
    "text": "B"
   },
   {
    "isCorrect": false,
    "html": "C",
    "text": "C"
   },
   {
    "isCorrect": false,
    "html": "C and B",
    "text": "C and B"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q60. You have modules that are dependent on each other. If you change one module, you have to make changes in the dependent modules. What term is used to describe this problem, and what is a potential solution?\n\n- [ ] Cohesion. A solution is to show that each module has certain responsibilities and to use an anticohesive design pattern.\n- [ ] Encapsulation. A solution is to implement one of the SOLID principles to ensure the modules do not encapsulate with each other.\n- [x] Coupling. A solution is to refactor the code to be loosely coupled by using inversion of control and dependency injection.\n- [ ] Dependency. A solution is to implement polymorphism and abstraction to change and extract dependent elements of a module so that it functions on its own.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q60. You have modules that are dependent on each other. If you change one module, you have to make changes in the dependent modules. What term is used to describe this problem, and what is a potential solution?</h4>",
   "text": "Q60. You have modules that are dependent on each other. If you change one module, you have to make changes in the dependent modules. What term is used to describe this problem, and what is a potential solution?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Cohesion. A solution is to show that each module has certain responsibilities and to use an anticohesive design pattern.",
    "text": "Cohesion. A solution is to show that each module has certain responsibilities and to use an anticohesive design pattern."
   },
   {
    "isCorrect": false,
    "html": "Encapsulation. A solution is to implement one of the SOLID principles to ensure the modules do not encapsulate with each other.",
    "text": "Encapsulation. A solution is to implement one of the SOLID principles to ensure the modules do not encapsulate with each other."
   },
   {
    "isCorrect": true,
    "html": "Coupling. A solution is to refactor the code to be loosely coupled by using inversion of control and dependency injection.",
    "text": "Coupling. A solution is to refactor the code to be loosely coupled by using inversion of control and dependency injection."
   },
   {
    "isCorrect": false,
    "html": "Dependency. A solution is to implement polymorphism and abstraction to change and extract dependent elements of a module so that it functions on its own.",
    "text": "Dependency. A solution is to implement polymorphism and abstraction to change and extract dependent elements of a module so that it functions on its own."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q61. **\\_** describes an aggregation\n\n- [ ] A class of resources\n- [ ] A group of methods\n- [x] A collection of objects\n- [ ] A list of children\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q61. <strong>_</strong> describes an aggregation</h4>",
   "text": "Q61. _ describes an aggregation"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A class of resources",
    "text": "A class of resources"
   },
   {
    "isCorrect": false,
    "html": "A group of methods",
    "text": "A group of methods"
   },
   {
    "isCorrect": true,
    "html": "A collection of objects",
    "text": "A collection of objects"
   },
   {
    "isCorrect": false,
    "html": "A list of children",
    "text": "A list of children"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q62. Which type of function can be used for polymorphism?\n\n- [x] virtual function\n- [ ] inline function\n- [ ] undefined function\n- [ ] private function\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q62. Which type of function can be used for polymorphism?</h4>",
   "text": "Q62. Which type of function can be used for polymorphism?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "virtual function",
    "text": "virtual function"
   },
   {
    "isCorrect": false,
    "html": "inline function",
    "text": "inline function"
   },
   {
    "isCorrect": false,
    "html": "undefined function",
    "text": "undefined function"
   },
   {
    "isCorrect": false,
    "html": "private function",
    "text": "private function"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q63. Which choice is a benefit of using dependency injection?\n\n- [x] loose coupling\n- [ ] code reusability\n- [ ] lazy initialization\n- [ ] data abstraction\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q63. Which choice is a benefit of using dependency injection?</h4>",
   "text": "Q63. Which choice is a benefit of using dependency injection?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "loose coupling",
    "text": "loose coupling"
   },
   {
    "isCorrect": false,
    "html": "code reusability",
    "text": "code reusability"
   },
   {
    "isCorrect": false,
    "html": "lazy initialization",
    "text": "lazy initialization"
   },
   {
    "isCorrect": false,
    "html": "data abstraction",
    "text": "data abstraction"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q64. Are you required to return an object if it was passed by reference to a function, and why or why not?\n\n- [ ] Yes, the caller function needs to reflect the changes.\n- [ ] No, you should use a global variable instead.\n- [x] No, changes will be automatically reflected in the calling function.\n- [ ] Yes, the object must be the same in the caller function.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q64. Are you required to return an object if it was passed by reference to a function, and why or why not?</h4>",
   "text": "Q64. Are you required to return an object if it was passed by reference to a function, and why or why not?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Yes, the caller function needs to reflect the changes.",
    "text": "Yes, the caller function needs to reflect the changes."
   },
   {
    "isCorrect": false,
    "html": "No, you should use a global variable instead.",
    "text": "No, you should use a global variable instead."
   },
   {
    "isCorrect": true,
    "html": "No, changes will be automatically reflected in the calling function.",
    "text": "No, changes will be automatically reflected in the calling function."
   },
   {
    "isCorrect": false,
    "html": "Yes, the object must be the same in the caller function.",
    "text": "Yes, the object must be the same in the caller function."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q66. What is the best example of a superclass and subclass relationship?\n\n- [x] car:toyota\n- [ ] ducks:pond\n- [ ] toes:feet\n- [ ] rock:stone\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q66. What is the best example of a superclass and subclass relationship?</h4>",
   "text": "Q66. What is the best example of a superclass and subclass relationship?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "car:toyota",
    "text": "car:toyota"
   },
   {
    "isCorrect": false,
    "html": "ducks:pond",
    "text": "ducks:pond"
   },
   {
    "isCorrect": false,
    "html": "toes:feet",
    "text": "toes:feet"
   },
   {
    "isCorrect": false,
    "html": "rock:stone",
    "text": "rock:stone"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q67. Which statements best describe the Gang of Four design patterns called Memento and Observer?\n\n- [ ] Memento notifies multiple classes of changes. Observer captures and restores an object's internal state.\n- [ ] Memento defers the exact steps of an algorithm to a subclass. Observer defines a new operation to a class without change.\n- [ ] Memento alters an object's behavior when its state changes. Observer encapsulates an algorithm inside a class.\n- [x] Memento captures and restores an object's internal state. Observer notifies multiple classes of changes.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q67. Which statements best describe the Gang of Four design patterns called Memento and Observer?</h4>",
   "text": "Q67. Which statements best describe the Gang of Four design patterns called Memento and Observer?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Memento notifies multiple classes of changes. Observer captures and restores an object's internal state.",
    "text": "Memento notifies multiple classes of changes. Observer captures and restores an object's internal state."
   },
   {
    "isCorrect": false,
    "html": "Memento defers the exact steps of an algorithm to a subclass. Observer defines a new operation to a class without change.",
    "text": "Memento defers the exact steps of an algorithm to a subclass. Observer defines a new operation to a class without change."
   },
   {
    "isCorrect": false,
    "html": "Memento alters an object's behavior when its state changes. Observer encapsulates an algorithm inside a class.",
    "text": "Memento alters an object's behavior when its state changes. Observer encapsulates an algorithm inside a class."
   },
   {
    "isCorrect": true,
    "html": "Memento captures and restores an object's internal state. Observer notifies multiple classes of changes.",
    "text": "Memento captures and restores an object's internal state. Observer notifies multiple classes of changes."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q68. What does the value (0.5,0.5,0.5) indicate in the class diagram specification position: Coordinate = (0.5,0.5,0.5)?\n\n- [ ] a default value of the Coordinate attribute\n- [ ] the size of the position array\n- [ ] an increment of the position attribute value\n- [x] a default value of the position attribute\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q68. What does the value (0.5,0.5,0.5) indicate in the class diagram specification position: Coordinate = (0.5,0.5,0.5)?</h4>",
   "text": "Q68. What does the value (0.5,0.5,0.5) indicate in the class diagram specification position: Coordinate = (0.5,0.5,0.5)?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a default value of the Coordinate attribute",
    "text": "a default value of the Coordinate attribute"
   },
   {
    "isCorrect": false,
    "html": "the size of the position array",
    "text": "the size of the position array"
   },
   {
    "isCorrect": false,
    "html": "an increment of the position attribute value",
    "text": "an increment of the position attribute value"
   },
   {
    "isCorrect": true,
    "html": "a default value of the position attribute",
    "text": "a default value of the position attribute"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q69. What is the most accurate example of the Liskov substitution principle?\n\n- [ ] A\n\n```java\npublic class Car{\n}\npublic class FlyingCars extends Car{\n   public void fly(){}\n}\npublic class Tesla FlyingCar{}\npublic class Honda Car{}\n```\n\n- [ ] B\n\n```java\npublic class Car{\n   public void fly(){}\n}\npublic class Tesla extends Car{}\npublic class Honda extends Car{}\n```\n\n- [ ] C\n\n```java\npublic class Car{\npublic void fly(){}\n}\npublic class Tesla Car{}\npublic class Honda Car{}\n```\n\n- [x] D\n\n```java\npublic class Car{\n}\npublic class FlyingCars extends Car{\n   public void fly(){}\n}\npublic class Tesla extends FlyingCar{}\npublic class Honda extends Car{}\n```\n\n[reference link](https://stackoverflow.com/a/44913313/1573267)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q69. What is the most accurate example of the Liskov substitution principle?</h4>",
   "text": "Q69. What is the most accurate example of the Liskov substitution principle?"
  },
  "preformated": {
   "language": "java",
   "html": "<pre><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlyingCars</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tesla</span> <span class=\"token class-name\">FlyingCar</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Honda</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "public class Car{\n}\npublic class FlyingCars extends Car{\n   public void fly(){}\n}\npublic class Tesla FlyingCar{}\npublic class Honda Car{}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlyingCars</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tesla</span> <span class=\"token class-name\">FlyingCar</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Honda</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "Apublic class Car{\n}\npublic class FlyingCars extends Car{\n   public void fly(){}\n}\npublic class Tesla FlyingCar{}\npublic class Honda Car{}\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tesla</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Honda</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "Bpublic class Car{\n   public void fly(){}\n}\npublic class Tesla extends Car{}\npublic class Honda extends Car{}\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tesla</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Honda</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "Cpublic class Car{\npublic void fly(){}\n}\npublic class Tesla Car{}\npublic class Honda Car{}\n"
   },
   {
    "isCorrect": true,
    "html": "D<br><pre><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlyingCars</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tesla</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FlyingCar</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Honda</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "Dpublic class Car{\n}\npublic class FlyingCars extends Car{\n   public void fly(){}\n}\npublic class Tesla extends FlyingCar{}\npublic class Honda extends Car{}\n"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/a/44913313/1573267\">reference link</a></p>",
   "text": "reference link"
  }
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q70. What is the difference between a parameter and an argument?\n\n- [ ] An argument can have many values while a parameter can have only one value.\n- [ ] An argument is the variable used for input values in a method. A parameter is the specific input value passed to the method.\n- [x] A parameter is a variable in the declaration of a function. An argument is the value of this variable that gets passed to the function.\n- [ ] Parameters and arguments are the same\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q70. What is the difference between a parameter and an argument?</h4>",
   "text": "Q70. What is the difference between a parameter and an argument?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "An argument can have many values while a parameter can have only one value.",
    "text": "An argument can have many values while a parameter can have only one value."
   },
   {
    "isCorrect": false,
    "html": "An argument is the variable used for input values in a method. A parameter is the specific input value passed to the method.",
    "text": "An argument is the variable used for input values in a method. A parameter is the specific input value passed to the method."
   },
   {
    "isCorrect": true,
    "html": "A parameter is a variable in the declaration of a function. An argument is the value of this variable that gets passed to the function.",
    "text": "A parameter is a variable in the declaration of a function. An argument is the value of this variable that gets passed to the function."
   },
   {
    "isCorrect": false,
    "html": "Parameters and arguments are the same",
    "text": "Parameters and arguments are the same"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q71. What is the scope of a class nested inside another class?\n\n- [ ] Protected scope\n- [ ] Private scope\n- [ ] Global scope\n- [x] Depends on access specifier and inheritance used\n\n> Explanation: It depends on the access specifier and the type of inheritance used with the class, because if the class is inherited then the nested class can be used by subclass too, provided it’s not of private type.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q71. What is the scope of a class nested inside another class?</h4>",
   "text": "Q71. What is the scope of a class nested inside another class?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Protected scope",
    "text": "Protected scope"
   },
   {
    "isCorrect": false,
    "html": "Private scope",
    "text": "Private scope"
   },
   {
    "isCorrect": false,
    "html": "Global scope",
    "text": "Global scope"
   },
   {
    "isCorrect": true,
    "html": "Depends on access specifier and inheritance used",
    "text": "Depends on access specifier and inheritance used"
   }
  ],
  "reference": {
   "html": "<p>Explanation: It depends on the access specifier and the type of inheritance used with the class, because if the class is inherited then the nested class can be used by subclass too, provided it’s not of private type.</p>",
   "text": "Explanation: It depends on the access specifier and the type of inheritance used with the class, because if the class is inherited then the nested class can be used by subclass too, provided it’s not of private type."
  }
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q72. Methods and attributes that define an object are a kind of blueprint called what?\n\n- [ ] a collection\n- [ ] a variable\n- [x] a class\n- [ ] a procedure\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q72. Methods and attributes that define an object are a kind of blueprint called what?</h4>",
   "text": "Q72. Methods and attributes that define an object are a kind of blueprint called what?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a collection",
    "text": "a collection"
   },
   {
    "isCorrect": false,
    "html": "a variable",
    "text": "a variable"
   },
   {
    "isCorrect": true,
    "html": "a class",
    "text": "a class"
   },
   {
    "isCorrect": false,
    "html": "a procedure",
    "text": "a procedure"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q73. Assume single inheritance is used with classes A and B while A is the base class. Then assume classes C, D, and E, where C is a base class and D is derived from C, then E is derived from D. Class C is made to inherit from class B. Which type of inheritance is reflected?\n\n- [x] Multilevel\n- [ ] Hybrid\n- [ ] Single level\n- [ ] Multiple\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q73. Assume single inheritance is used with classes A and B while A is the base class. Then assume classes C, D, and E, where C is a base class and D is derived from C, then E is derived from D. Class C is made to inherit from class B. Which type of inheritance is reflected?</h4>",
   "text": "Q73. Assume single inheritance is used with classes A and B while A is the base class. Then assume classes C, D, and E, where C is a base class and D is derived from C, then E is derived from D. Class C is made to inherit from class B. Which type of inheritance is reflected?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Multilevel",
    "text": "Multilevel"
   },
   {
    "isCorrect": false,
    "html": "Hybrid",
    "text": "Hybrid"
   },
   {
    "isCorrect": false,
    "html": "Single level",
    "text": "Single level"
   },
   {
    "isCorrect": false,
    "html": "Multiple",
    "text": "Multiple"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q74. What is the main idea behind separation of concerns?\n\n- [x] All of these answers\n- [ ] Applications are decomposed into parts\n- [ ] Parts are defined with minimal overlap\n- [ ] Each part is responsible for a separate concern\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q74. What is the main idea behind separation of concerns?</h4>",
   "text": "Q74. What is the main idea behind separation of concerns?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "All of these answers",
    "text": "All of these answers"
   },
   {
    "isCorrect": false,
    "html": "Applications are decomposed into parts",
    "text": "Applications are decomposed into parts"
   },
   {
    "isCorrect": false,
    "html": "Parts are defined with minimal overlap",
    "text": "Parts are defined with minimal overlap"
   },
   {
    "isCorrect": false,
    "html": "Each part is responsible for a separate concern",
    "text": "Each part is responsible for a separate concern"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q75. What is the purpose of the finally block?\n\n- [x] To always run the finally block of code when the try block exits\n- [ ] To run code when an exception has not occurred\n- [ ] To run the block if an exception occurred\n- [ ] To run code whenever garbage collection requires it\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q75. What is the purpose of the finally block?</h4>",
   "text": "Q75. What is the purpose of the finally block?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "To always run the finally block of code when the try block exits",
    "text": "To always run the finally block of code when the try block exits"
   },
   {
    "isCorrect": false,
    "html": "To run code when an exception has not occurred",
    "text": "To run code when an exception has not occurred"
   },
   {
    "isCorrect": false,
    "html": "To run the block if an exception occurred",
    "text": "To run the block if an exception occurred"
   },
   {
    "isCorrect": false,
    "html": "To run code whenever garbage collection requires it",
    "text": "To run code whenever garbage collection requires it"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q76. Which choice is not an OOP language?\n\n- [ ] C#\n- [ ] Java\n- [x] C\n- [ ] Python\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q76. Which choice is not an OOP language?</h4>",
   "text": "Q76. Which choice is not an OOP language?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "C#",
    "text": "C#"
   },
   {
    "isCorrect": false,
    "html": "Java",
    "text": "Java"
   },
   {
    "isCorrect": true,
    "html": "C",
    "text": "C"
   },
   {
    "isCorrect": false,
    "html": "Python",
    "text": "Python"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q77. What is the function of a finalizer or destructor?\n\n- [x] To relinquish resources that are no longer needed\n- [ ] To delete a variable name\n- [ ] To reset an attribute value\n- [ ] To hold space, even after an object is no longer being used\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q77. What is the function of a finalizer or destructor?</h4>",
   "text": "Q77. What is the function of a finalizer or destructor?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "To relinquish resources that are no longer needed",
    "text": "To relinquish resources that are no longer needed"
   },
   {
    "isCorrect": false,
    "html": "To delete a variable name",
    "text": "To delete a variable name"
   },
   {
    "isCorrect": false,
    "html": "To reset an attribute value",
    "text": "To reset an attribute value"
   },
   {
    "isCorrect": false,
    "html": "To hold space, even after an object is no longer being used",
    "text": "To hold space, even after an object is no longer being used"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q78. An instance of which type of class cannot be created?\n\n- [ ] Protected class\n- [ ] Base class\n- [ ] Anonymous class\n- [x] Abstract class\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q78. An instance of which type of class cannot be created?</h4>",
   "text": "Q78. An instance of which type of class cannot be created?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Protected class",
    "text": "Protected class"
   },
   {
    "isCorrect": false,
    "html": "Base class",
    "text": "Base class"
   },
   {
    "isCorrect": false,
    "html": "Anonymous class",
    "text": "Anonymous class"
   },
   {
    "isCorrect": true,
    "html": "Abstract class",
    "text": "Abstract class"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q79. In the context of OOP, what is composition?\n\n- [ ] Composition is the act of one object passing to another object an operation to be performed on behalf of the initial object.\n- [x] Composition is a part/whole relationship where an object is composed of one or more other objects, each of which is considered a part of the whole.\n- [ ] Composition is a binding where the class/name association is not made until the object designated by the name is created at execution time\n- [ ] Composition is a process of collecting classes that provide a set of services for a particular domain\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q79. In the context of OOP, what is composition?</h4>",
   "text": "Q79. In the context of OOP, what is composition?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Composition is the act of one object passing to another object an operation to be performed on behalf of the initial object.",
    "text": "Composition is the act of one object passing to another object an operation to be performed on behalf of the initial object."
   },
   {
    "isCorrect": true,
    "html": "Composition is a part/whole relationship where an object is composed of one or more other objects, each of which is considered a part of the whole.",
    "text": "Composition is a part/whole relationship where an object is composed of one or more other objects, each of which is considered a part of the whole."
   },
   {
    "isCorrect": false,
    "html": "Composition is a binding where the class/name association is not made until the object designated by the name is created at execution time",
    "text": "Composition is a binding where the class/name association is not made until the object designated by the name is created at execution time"
   },
   {
    "isCorrect": false,
    "html": "Composition is a process of collecting classes that provide a set of services for a particular domain",
    "text": "Composition is a process of collecting classes that provide a set of services for a particular domain"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q80. Static polymorphism uses method \\_ ?\n\n- [ ] overloading\n- [ ] inheritance\n- [ ] abstraction\n- [x] overriding\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q80. Static polymorphism uses method _ ?</h4>",
   "text": "Q80. Static polymorphism uses method _ ?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "overloading",
    "text": "overloading"
   },
   {
    "isCorrect": false,
    "html": "inheritance",
    "text": "inheritance"
   },
   {
    "isCorrect": false,
    "html": "abstraction",
    "text": "abstraction"
   },
   {
    "isCorrect": true,
    "html": "overriding",
    "text": "overriding"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q81. What does a concrete class not have?\n\n- [ ] parents\n- [x] pure virtual functions\n- [ ] attributes\n- [ ] purposes\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q81. What does a concrete class not have?</h4>",
   "text": "Q81. What does a concrete class not have?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "parents",
    "text": "parents"
   },
   {
    "isCorrect": true,
    "html": "pure virtual functions",
    "text": "pure virtual functions"
   },
   {
    "isCorrect": false,
    "html": "attributes",
    "text": "attributes"
   },
   {
    "isCorrect": false,
    "html": "purposes",
    "text": "purposes"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q82. How does dynamic typing complicate troubleshooting?\n\n- [x] It can be difficult to identify variables that are incorrectly typed\n- [ ] The dynamic variables can assume only limited values\n- [ ] Storage is fixed for dynamic variables\n- [ ] Static variables are more flexible than dynamic variables\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q82. How does dynamic typing complicate troubleshooting?</h4>",
   "text": "Q82. How does dynamic typing complicate troubleshooting?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "It can be difficult to identify variables that are incorrectly typed",
    "text": "It can be difficult to identify variables that are incorrectly typed"
   },
   {
    "isCorrect": false,
    "html": "The dynamic variables can assume only limited values",
    "text": "The dynamic variables can assume only limited values"
   },
   {
    "isCorrect": false,
    "html": "Storage is fixed for dynamic variables",
    "text": "Storage is fixed for dynamic variables"
   },
   {
    "isCorrect": false,
    "html": "Static variables are more flexible than dynamic variables",
    "text": "Static variables are more flexible than dynamic variables"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q83. What is the difference between early binding and late binding?\n\n- [ ] Early binding is when a variable is assigned a value when a scope is created. Late binding is when a variable is assigned a value after a scope is exited\n- [ ] Early binding is when a variable is assigned a value when the program starts. Late binding is when a variable is assigned after the program is running\n- [ ] There is no difference. In both cases, variables are assigned values when a program has completed startup and is running\n- [x] Early binding is when a variable is assigned its value at compile time. Late binding is when a variable is assigned a value at run time\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q83. What is the difference between early binding and late binding?</h4>",
   "text": "Q83. What is the difference between early binding and late binding?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Early binding is when a variable is assigned a value when a scope is created. Late binding is when a variable is assigned a value after a scope is exited",
    "text": "Early binding is when a variable is assigned a value when a scope is created. Late binding is when a variable is assigned a value after a scope is exited"
   },
   {
    "isCorrect": false,
    "html": "Early binding is when a variable is assigned a value when the program starts. Late binding is when a variable is assigned after the program is running",
    "text": "Early binding is when a variable is assigned a value when the program starts. Late binding is when a variable is assigned after the program is running"
   },
   {
    "isCorrect": false,
    "html": "There is no difference. In both cases, variables are assigned values when a program has completed startup and is running",
    "text": "There is no difference. In both cases, variables are assigned values when a program has completed startup and is running"
   },
   {
    "isCorrect": true,
    "html": "Early binding is when a variable is assigned its value at compile time. Late binding is when a variable is assigned a value at run time",
    "text": "Early binding is when a variable is assigned its value at compile time. Late binding is when a variable is assigned a value at run time"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q84. What is the difference between an interface and an abstract class?\n\n- [ ] Interfaces can contain code or data. Abstract classes do not contain code or data. A class can inherit from more than one abstract class but can only implement one interface\n- [ ] Interfaces can contain code or data. Abstract classes do not contain code or data. A class can inherit from only one abstract class but can implement an unlimited number of interface\n- [x] Abstract classes can contain code or data. Interface do not contain code or data. A class can inherit from only one abstract class but can implement an unlimited number of interfaces\n- [ ] Abstract classes can contain code or data. Interface do not contain code or data. A class can inherit from more than one abstract class but can only implement one interface\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q84. What is the difference between an interface and an abstract class?</h4>",
   "text": "Q84. What is the difference between an interface and an abstract class?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Interfaces can contain code or data. Abstract classes do not contain code or data. A class can inherit from more than one abstract class but can only implement one interface",
    "text": "Interfaces can contain code or data. Abstract classes do not contain code or data. A class can inherit from more than one abstract class but can only implement one interface"
   },
   {
    "isCorrect": false,
    "html": "Interfaces can contain code or data. Abstract classes do not contain code or data. A class can inherit from only one abstract class but can implement an unlimited number of interface",
    "text": "Interfaces can contain code or data. Abstract classes do not contain code or data. A class can inherit from only one abstract class but can implement an unlimited number of interface"
   },
   {
    "isCorrect": true,
    "html": "Abstract classes can contain code or data. Interface do not contain code or data. A class can inherit from only one abstract class but can implement an unlimited number of interfaces",
    "text": "Abstract classes can contain code or data. Interface do not contain code or data. A class can inherit from only one abstract class but can implement an unlimited number of interfaces"
   },
   {
    "isCorrect": false,
    "html": "Abstract classes can contain code or data. Interface do not contain code or data. A class can inherit from more than one abstract class but can only implement one interface",
    "text": "Abstract classes can contain code or data. Interface do not contain code or data. A class can inherit from more than one abstract class but can only implement one interface"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q85. What parameters are required to be passed to a class constructor?\n\n`Here they haven't mentioned any specific language so let's consider all languages.`\n\n- [ ] reference to subclass // References to subclass are never required as you can simply Initialize subclass & use their object.\n- [ ] reference to base class // References to the base class are not required in Java, Javascript & Python\n- [ ] reference to this pointer // While Python & Javascript may require passing this or self in the constructor, It is not passed in Java constructor.\n- [x] none // Above 3 are incorrect so \"none\" is the answer\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q85. What parameters are required to be passed to a class constructor?</h4>",
   "text": "Q85. What parameters are required to be passed to a class constructor?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "reference to subclass // References to subclass are never required as you can simply Initialize subclass &amp; use their object.",
    "text": "reference to subclass // References to subclass are never required as you can simply Initialize subclass & use their object."
   },
   {
    "isCorrect": false,
    "html": "reference to base class // References to the base class are not required in Java, Javascript &amp; Python",
    "text": "reference to base class // References to the base class are not required in Java, Javascript & Python"
   },
   {
    "isCorrect": false,
    "html": "reference to this pointer // While Python &amp; Javascript may require passing this or self in the constructor, It is not passed in Java constructor.",
    "text": "reference to this pointer // While Python & Javascript may require passing this or self in the constructor, It is not passed in Java constructor."
   },
   {
    "isCorrect": true,
    "html": "none // Above 3 are incorrect so \"none\" is the answer",
    "text": "none // Above 3 are incorrect so \"none\" is the answer"
   }
  ],
  "reference": {
   "html": "<p><code>Here they haven't mentioned any specific language so let's consider all languages.</code></p>",
   "text": "Here they haven't mentioned any specific language so let's consider all languages."
  }
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q86. What are the four principles of object-oriented programming?\n\n- [ ] manipulation, encapsulation, inheritance, and dependency inversion\n- [ ] dependency inversion, open/closed principle, encapsulation, and inheritance\n- [ ] interface segregation, abstraction, dependency inversion, and inheritance\n- [x] abstraction, encapsulation, inheritance, and polymorphism\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q86. What are the four principles of object-oriented programming?</h4>",
   "text": "Q86. What are the four principles of object-oriented programming?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "manipulation, encapsulation, inheritance, and dependency inversion",
    "text": "manipulation, encapsulation, inheritance, and dependency inversion"
   },
   {
    "isCorrect": false,
    "html": "dependency inversion, open/closed principle, encapsulation, and inheritance",
    "text": "dependency inversion, open/closed principle, encapsulation, and inheritance"
   },
   {
    "isCorrect": false,
    "html": "interface segregation, abstraction, dependency inversion, and inheritance",
    "text": "interface segregation, abstraction, dependency inversion, and inheritance"
   },
   {
    "isCorrect": true,
    "html": "abstraction, encapsulation, inheritance, and polymorphism",
    "text": "abstraction, encapsulation, inheritance, and polymorphism"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q87. From the SOLID principles of object-oriented programming, which statement best describes the Liskov substitution principle?\n\n- [ ] A class should have only a single responsibility—that is, only changes to one part of the software's specification should be able to affect the specification of the class.\n- [ ] Software entities should be open for extension, but closed for modification.\n- [ ] Many client-specific interfaces are better than one general-purpose interface.\n- [x] objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q87. From the SOLID principles of object-oriented programming, which statement best describes the Liskov substitution principle?</h4>",
   "text": "Q87. From the SOLID principles of object-oriented programming, which statement best describes the Liskov substitution principle?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A class should have only a single responsibility—that is, only changes to one part of the software's specification should be able to affect the specification of the class.",
    "text": "A class should have only a single responsibility—that is, only changes to one part of the software's specification should be able to affect the specification of the class."
   },
   {
    "isCorrect": false,
    "html": "Software entities should be open for extension, but closed for modification.",
    "text": "Software entities should be open for extension, but closed for modification."
   },
   {
    "isCorrect": false,
    "html": "Many client-specific interfaces are better than one general-purpose interface.",
    "text": "Many client-specific interfaces are better than one general-purpose interface."
   },
   {
    "isCorrect": true,
    "html": "objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.",
    "text": "objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q88. In addition to responsibilities, what should be listed on Class-responsability-collaboration (CRC) cards?\n\n- [ ] which programming language will be used.\n- [ ] the programmer responsible for implementation.\n- [ ] interacting classes.\n- [x] attributes.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q88. In addition to responsibilities, what should be listed on Class-responsability-collaboration (CRC) cards?</h4>",
   "text": "Q88. In addition to responsibilities, what should be listed on Class-responsability-collaboration (CRC) cards?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "which programming language will be used.",
    "text": "which programming language will be used."
   },
   {
    "isCorrect": false,
    "html": "the programmer responsible for implementation.",
    "text": "the programmer responsible for implementation."
   },
   {
    "isCorrect": false,
    "html": "interacting classes.",
    "text": "interacting classes."
   },
   {
    "isCorrect": true,
    "html": "attributes.",
    "text": "attributes."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q89. What is the best name for the function that corrects this assessment?\n\n- [ ] makeResult()\n- [ ] questionScore()\n- [x] calculateScore()\n- [ ] getAnswers()\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q89. What is the best name for the function that corrects this assessment?</h4>",
   "text": "Q89. What is the best name for the function that corrects this assessment?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "makeResult()",
    "text": "makeResult()"
   },
   {
    "isCorrect": false,
    "html": "questionScore()",
    "text": "questionScore()"
   },
   {
    "isCorrect": true,
    "html": "calculateScore()",
    "text": "calculateScore()"
   },
   {
    "isCorrect": false,
    "html": "getAnswers()",
    "text": "getAnswers()"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q90. Which relationship best illustrates an abstract-concrete class relationship?\n\n- [ ] cat : kitten\n- [ ] color : red\n- [x] planet : moon\n- [ ] truck : window\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q90. Which relationship best illustrates an abstract-concrete class relationship?</h4>",
   "text": "Q90. Which relationship best illustrates an abstract-concrete class relationship?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "cat : kitten",
    "text": "cat : kitten"
   },
   {
    "isCorrect": false,
    "html": "color : red",
    "text": "color : red"
   },
   {
    "isCorrect": true,
    "html": "planet : moon",
    "text": "planet : moon"
   },
   {
    "isCorrect": false,
    "html": "truck : window",
    "text": "truck : window"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q91. What cannot be used for polymorphism?\n\n- [ ] overloading constructors\n- [ ] overloading member functions\n- [x] static member functions\n- [ ] overloading predefined operator\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q91. What cannot be used for polymorphism?</h4>",
   "text": "Q91. What cannot be used for polymorphism?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "overloading constructors",
    "text": "overloading constructors"
   },
   {
    "isCorrect": false,
    "html": "overloading member functions",
    "text": "overloading member functions"
   },
   {
    "isCorrect": true,
    "html": "static member functions",
    "text": "static member functions"
   },
   {
    "isCorrect": false,
    "html": "overloading predefined operator",
    "text": "overloading predefined operator"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q92. How many levels does multilevel inheritance allow in a program?\n\n- [ ] only 10 levels of inheritance\n- [ ] as many levels of inheritance as required within 10 minutes\n- [ ] as many levels of inheritance as required\n- [x] only the amount of levels memory permits, divided by processor speed\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q92. How many levels does multilevel inheritance allow in a program?</h4>",
   "text": "Q92. How many levels does multilevel inheritance allow in a program?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "only 10 levels of inheritance",
    "text": "only 10 levels of inheritance"
   },
   {
    "isCorrect": false,
    "html": "as many levels of inheritance as required within 10 minutes",
    "text": "as many levels of inheritance as required within 10 minutes"
   },
   {
    "isCorrect": false,
    "html": "as many levels of inheritance as required",
    "text": "as many levels of inheritance as required"
   },
   {
    "isCorrect": true,
    "html": "only the amount of levels memory permits, divided by processor speed",
    "text": "only the amount of levels memory permits, divided by processor speed"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q93. What is a virtual Method?\n\n- [x] a method that you expect may be redefined in derived classes\n- [ ] a method that you do not expect to be redefined in derived classes\n- [ ] a private method that you do not expect to be redefined in derived public classes\n- [ ] a method that exists temporarily - once used, it ceases to be used by any caller\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q93. What is a virtual Method?</h4>",
   "text": "Q93. What is a virtual Method?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "a method that you expect may be redefined in derived classes",
    "text": "a method that you expect may be redefined in derived classes"
   },
   {
    "isCorrect": false,
    "html": "a method that you do not expect to be redefined in derived classes",
    "text": "a method that you do not expect to be redefined in derived classes"
   },
   {
    "isCorrect": false,
    "html": "a private method that you do not expect to be redefined in derived public classes",
    "text": "a private method that you do not expect to be redefined in derived public classes"
   },
   {
    "isCorrect": false,
    "html": "a method that exists temporarily - once used, it ceases to be used by any caller",
    "text": "a method that exists temporarily - once used, it ceases to be used by any caller"
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q94. Which of these is not a basic principle of Object Oriented Programming?\n\n- [ ] Encapsulation\n- [x] Compilation\n- [ ] Inheritance\n- [ ] Polymorphism\n\n[Reference](https://www.interviewbit.com/blog/principles-of-oops/)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q94. Which of these is not a basic principle of Object Oriented Programming?</h4>",
   "text": "Q94. Which of these is not a basic principle of Object Oriented Programming?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Encapsulation",
    "text": "Encapsulation"
   },
   {
    "isCorrect": true,
    "html": "Compilation",
    "text": "Compilation"
   },
   {
    "isCorrect": false,
    "html": "Inheritance",
    "text": "Inheritance"
   },
   {
    "isCorrect": false,
    "html": "Polymorphism",
    "text": "Polymorphism"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.interviewbit.com/blog/principles-of-oops/\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q95. How do object behaviour and attributes differ?\n\n- [ ] Behaviour describe dynamic properties; attributes are static.\n- [x] Attributes describe a state; behaviours describe a change.\n- [ ] Attributes apply only to a specified object; behaviour apply to other linked objects.\n- [ ] Behaviours are vector quantities; attributes are scalars.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q95. How do object behaviour and attributes differ?</h4>",
   "text": "Q95. How do object behaviour and attributes differ?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Behaviour describe dynamic properties; attributes are static.",
    "text": "Behaviour describe dynamic properties; attributes are static."
   },
   {
    "isCorrect": true,
    "html": "Attributes describe a state; behaviours describe a change.",
    "text": "Attributes describe a state; behaviours describe a change."
   },
   {
    "isCorrect": false,
    "html": "Attributes apply only to a specified object; behaviour apply to other linked objects.",
    "text": "Attributes apply only to a specified object; behaviour apply to other linked objects."
   },
   {
    "isCorrect": false,
    "html": "Behaviours are vector quantities; attributes are scalars.",
    "text": "Behaviours are vector quantities; attributes are scalars."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q96. How coupled should your classes be and why?\n\n- [ ] You should increase coupling to improve dependencies between classes.\n- [x] You should limit coupling to reduce dependencies between classes.\n- [ ] You should increase coupling so that class members relate to the class purpose.\n- [ ] You should limit coupling so that class members relate to the class objective.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q96. How coupled should your classes be and why?</h4>",
   "text": "Q96. How coupled should your classes be and why?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "You should increase coupling to improve dependencies between classes.",
    "text": "You should increase coupling to improve dependencies between classes."
   },
   {
    "isCorrect": true,
    "html": "You should limit coupling to reduce dependencies between classes.",
    "text": "You should limit coupling to reduce dependencies between classes."
   },
   {
    "isCorrect": false,
    "html": "You should increase coupling so that class members relate to the class purpose.",
    "text": "You should increase coupling so that class members relate to the class purpose."
   },
   {
    "isCorrect": false,
    "html": "You should limit coupling so that class members relate to the class objective.",
    "text": "You should limit coupling so that class members relate to the class objective."
   }
  ]
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q97. Which statement best describes a friend class?\n\n- [ ] Friend classes support base class when necessary.\n- [x] A friend class can access the private and protected members of the class in which it is declared as a friend.\n- [ ] Friend classes do not have any implementation.\n- [ ] A friend class can access only protected members of the class of which it is a friend.\n\n[Reference](https://www.simplilearn.com/tutorials/cpp-tutorial/friend-class-in-cpp/)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q97. Which statement best describes a friend class?</h4>",
   "text": "Q97. Which statement best describes a friend class?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Friend classes support base class when necessary.",
    "text": "Friend classes support base class when necessary."
   },
   {
    "isCorrect": true,
    "html": "A friend class can access the private and protected members of the class in which it is declared as a friend.",
    "text": "A friend class can access the private and protected members of the class in which it is declared as a friend."
   },
   {
    "isCorrect": false,
    "html": "Friend classes do not have any implementation.",
    "text": "Friend classes do not have any implementation."
   },
   {
    "isCorrect": false,
    "html": "A friend class can access only protected members of the class of which it is a friend.",
    "text": "A friend class can access only protected members of the class of which it is a friend."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.simplilearn.com/tutorials/cpp-tutorial/friend-class-in-cpp/\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q99. What is multilevel inheritance?\n\n- [ ] a class that does not have more than one parent.\n- [ ] a class not derived from another derived obiect.\n- [ ] not doubling single-level inheritance.\n- [x] classes derived from other derived classes.\n\n[Reference](https://www.w3schools.com/cpp/cpp_inheritance_multilevel.asp)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q99. What is multilevel inheritance?</h4>",
   "text": "Q99. What is multilevel inheritance?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a class that does not have more than one parent.",
    "text": "a class that does not have more than one parent."
   },
   {
    "isCorrect": false,
    "html": "a class not derived from another derived obiect.",
    "text": "a class not derived from another derived obiect."
   },
   {
    "isCorrect": false,
    "html": "not doubling single-level inheritance.",
    "text": "not doubling single-level inheritance."
   },
   {
    "isCorrect": true,
    "html": "classes derived from other derived classes.",
    "text": "classes derived from other derived classes."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.w3schools.com/cpp/cpp_inheritance_multilevel.asp\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "Object-Oriented Programming (OOP)",
  "raw": "#### Q100. Can you have two classes with the same name in the same proiect?\n\n- [ ] No, you cannot.\n- [ ] Yes, as long as their constructors are different.\n- [ ] Yes, as long as their methods are different.\n- [x] Yes, as long as they are in different namespaces.\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q100. Can you have two classes with the same name in the same proiect?</h4>",
   "text": "Q100. Can you have two classes with the same name in the same proiect?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "No, you cannot.",
    "text": "No, you cannot."
   },
   {
    "isCorrect": false,
    "html": "Yes, as long as their constructors are different.",
    "text": "Yes, as long as their constructors are different."
   },
   {
    "isCorrect": false,
    "html": "Yes, as long as their methods are different.",
    "text": "Yes, as long as their methods are different."
   },
   {
    "isCorrect": true,
    "html": "Yes, as long as they are in different namespaces.",
    "text": "Yes, as long as they are in different namespaces."
   }
  ]
 }
]