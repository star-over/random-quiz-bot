[
 {
  "topic": "Git",
  "raw": "#### Q1. How can you check your current git version?\n\n- [ ] git --v\n- [x] git --version\n- [ ] git --option\n- [ ] git --current\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q1. How can you check your current git version?</h4>",
   "text": "Q1. How can you check your current git version?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git --v",
    "text": "git --v"
   },
   {
    "isCorrect": true,
    "html": "git --version",
    "text": "git --version"
   },
   {
    "isCorrect": false,
    "html": "git --option",
    "text": "git --option"
   },
   {
    "isCorrect": false,
    "html": "git --current",
    "text": "git --current"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q2. What command lets you create a connection between a local and remote repository?\n\n- [ ] git remote add new\n- [x] git remote add origin\n- [ ] git remote new origin\n- [ ] git remote origin\n\n[Reference](https://stackoverflow.com/questions/20291731/how-to-connect-to-a-remote-git-repository)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q2. What command lets you create a connection between a local and remote repository?</h4>",
   "text": "Q2. What command lets you create a connection between a local and remote repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git remote add new",
    "text": "git remote add new"
   },
   {
    "isCorrect": true,
    "html": "git remote add origin",
    "text": "git remote add origin"
   },
   {
    "isCorrect": false,
    "html": "git remote new origin",
    "text": "git remote new origin"
   },
   {
    "isCorrect": false,
    "html": "git remote origin",
    "text": "git remote origin"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/questions/20291731/how-to-connect-to-a-remote-git-repository\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q3. Describe what these Git commands do to the commit history:\n\n```bash\ngit reset --hard HEAD~5\ngit merge --squash HEAD@{1}\n```\n\n- [ ] They reset the HEAD to the fifth commit in the repo, then merge to the master branch.\n- [x] The current branch's HEAD is reset back five commits, then prior commits are squashed into a single commit.\n- [ ] They delete the last five commits.\n- [ ] They merge the last five commits into a new branch.\n\n**Explanation:**\n\n- `git reset --hard HEAD~5` resets the current branch to the commit just before the last 5 (see `man gitrevisions` for details about this notation and other cool alternatives like `HEAD@{2 days ago}`). As it is a hard reset, it will also overwrite every change in the working tree as well. See `man git-reset`.\n- `git merge --squash HEAD@{1}` HEAD@{1} is where the branch was just before the previous command (again, see `man gitrevisions`). This command sets the state of the index to be as it would just after a merge from that commit. This whole operation could be a way to take 5 commits from a branch in which you started a new feature and squash them to a single commit, a meaningful one.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q3. Describe what these Git commands do to the commit history:</h4>",
   "text": "Q3. Describe what these Git commands do to the commit history:"
  },
  "preformated": {
   "language": "bash",
   "html": "<pre><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD~5\n<span class=\"token function\">git</span> merge <span class=\"token parameter variable\">--squash</span> HEAD@<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "git reset --hard HEAD~5\ngit merge --squash HEAD@{1}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "They reset the HEAD to the fifth commit in the repo, then merge to the master branch.",
    "text": "They reset the HEAD to the fifth commit in the repo, then merge to the master branch."
   },
   {
    "isCorrect": true,
    "html": "The current branch's HEAD is reset back five commits, then prior commits are squashed into a single commit.",
    "text": "The current branch's HEAD is reset back five commits, then prior commits are squashed into a single commit."
   },
   {
    "isCorrect": false,
    "html": "They delete the last five commits.",
    "text": "They delete the last five commits."
   },
   {
    "isCorrect": false,
    "html": "They merge the last five commits into a new branch.",
    "text": "They merge the last five commits into a new branch."
   },
   {
    "isCorrect": false,
    "html": "e&gt;git reset --hard HEAD~5 resets the current branch to the commit just before the last 5 (see <code>man gitrevisions</code> for details about this notation and other cool alternatives like <code>HEAD@{2 days ago}</code>). As it is a hard reset, it will also overwrite every change in the working tree as well. See <code>man git-reset</code>.",
    "text": "e>git reset --hard HEAD~5 resets the current branch to the commit just before the last 5 (see man gitrevisions for details about this notation and other cool alternatives like HEAD@{2 days ago}). As it is a hard reset, it will also overwrite every change in the working tree as well. See man git-reset."
   },
   {
    "isCorrect": false,
    "html": "e&gt;git merge --squash HEAD@{1} HEAD@{1} is where the branch was just before the previous command (again, see <code>man gitrevisions</code>). This command sets the state of the index to be as it would just after a merge from that commit. This whole operation could be a way to take 5 commits from a branch in which you started a new feature and squash them to a single commit, a meaningful one.",
    "text": "e>git merge --squash HEAD@{1} HEAD@{1} is where the branch was just before the previous command (again, see man gitrevisions). This command sets the state of the index to be as it would just after a merge from that commit. This whole operation could be a way to take 5 commits from a branch in which you started a new feature and squash them to a single commit, a meaningful one."
   }
  ],
  "reference": {
   "html": "<p><strong>Explanation:</strong></p>",
   "text": "Explanation:"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q4. Your current project has several branches; master, beta, and push-notifications. You've just finished the notification feature in the push-notification branch, and you want to commit it to beta branch. How can you accomplish this?\n\n- [ ] Checkout the push-notifications branch and run git merge beta\n- [ ] Checkout the master branch and run git merge beta -> push-notifications\n- [ ] Delete the push-notifications branch and it will be committed to the master branch automatically\n- [x] Checkout the beta branch and run git merge push-notifications\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q4. Your current project has several branches; master, beta, and push-notifications. You've just finished the notification feature in the push-notification branch, and you want to commit it to beta branch. How can you accomplish this?</h4>",
   "text": "Q4. Your current project has several branches; master, beta, and push-notifications. You've just finished the notification feature in the push-notification branch, and you want to commit it to beta branch. How can you accomplish this?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Checkout the push-notifications branch and run git merge beta",
    "text": "Checkout the push-notifications branch and run git merge beta"
   },
   {
    "isCorrect": false,
    "html": "Checkout the master branch and run git merge beta -&gt; push-notifications",
    "text": "Checkout the master branch and run git merge beta -> push-notifications"
   },
   {
    "isCorrect": false,
    "html": "Delete the push-notifications branch and it will be committed to the master branch automatically",
    "text": "Delete the push-notifications branch and it will be committed to the master branch automatically"
   },
   {
    "isCorrect": true,
    "html": "Checkout the beta branch and run git merge push-notifications",
    "text": "Checkout the beta branch and run git merge push-notifications"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q5. Which of the following is true you when you use the following command?\n\n`git add -A`\n\n- [x] All new and updated files are staged\n- [ ] Files are staged in alphabetical order.\n- [ ] All new files are staged\n- [ ] Only updated files are staged\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q5. Which of the following is true you when you use the following command?</h4>",
   "text": "Q5. Which of the following is true you when you use the following command?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "All new and updated files are staged",
    "text": "All new and updated files are staged"
   },
   {
    "isCorrect": false,
    "html": "Files are staged in alphabetical order.",
    "text": "Files are staged in alphabetical order."
   },
   {
    "isCorrect": false,
    "html": "All new files are staged",
    "text": "All new files are staged"
   },
   {
    "isCorrect": false,
    "html": "Only updated files are staged",
    "text": "Only updated files are staged"
   }
  ],
  "reference": {
   "html": "<p><code>git add -A</code></p>",
   "text": "git add -A"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q6. What will the following command print to the Terminal?\n\n`git remote -v`\n\n- [x] A list of remote repositories and their URLs\n- [ ] The current git version you're running\n- [ ] An inline editor for modifying remote repositories\n- [ ] The last 5 git versions you've installed\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q6. What will the following command print to the Terminal?</h4>",
   "text": "Q6. What will the following command print to the Terminal?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "A list of remote repositories and their URLs",
    "text": "A list of remote repositories and their URLs"
   },
   {
    "isCorrect": false,
    "html": "The current git version you're running",
    "text": "The current git version you're running"
   },
   {
    "isCorrect": false,
    "html": "An inline editor for modifying remote repositories",
    "text": "An inline editor for modifying remote repositories"
   },
   {
    "isCorrect": false,
    "html": "The last 5 git versions you've installed",
    "text": "The last 5 git versions you've installed"
   }
  ],
  "reference": {
   "html": "<p><code>git remote -v</code></p>",
   "text": "git remote -v"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q7. Looking at the following commands, describe what is happening.\n\n```bash\ngit checkout feature-user-location\ngit cherry-pick kj2342134sdf090093f0sdgasdf99sdfo992mmmf9921231\n```\n\n- [ ] The commit is being tagged for release on the feature-user-location branch\n- [ ] A commit is being copied from its original branch over to the feature-user-location branch\n- [x] The commit is being cherry picked as the new HEAD of the commit history\n- [ ] A commit is being copied from the feature-user-location branch to the master branch\n- [ ] The branch is switched to the feature-user-location branch, and the specified commit is applied to the branch.\n\n**Explanation:** Commits aren't copied when cherry picking, they are cherry picked. The changes introduced by the commit are applied and a new commit is then created. This allow us to get specific changes as if they were patches (in the GIT's book, this is actually called [Patching](https://git-scm.com/book/en/v2/Appendix-C:-Git-Commands-Patching \"See this in the GIT's book\")). As a new commit is created upon feature-user-location, HEAD also changes to match it. You can see this in `cat .git/HEAD` and `cat .git/refs/heads/feature-user-location` for this case. See `man git-cherry-pick` for details.\n\n**NOTE**: There are two versions of this question so far. The task is always \"describe what is happening\", the commands are always a `checkout` and a `cherry-pick`, and the correct answer is always the same.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q7. Looking at the following commands, describe what is happening.</h4>",
   "text": "Q7. Looking at the following commands, describe what is happening."
  },
  "preformated": {
   "language": "bash",
   "html": "<pre><code class=\"language-bash\"><span class=\"token function\">git</span> checkout feature-user-location\n<span class=\"token function\">git</span> cherry-pick kj2342134sdf090093f0sdgasdf99sdfo992mmmf9921231\n</code></pre>",
   "text": "git checkout feature-user-location\ngit cherry-pick kj2342134sdf090093f0sdgasdf99sdfo992mmmf9921231\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The commit is being tagged for release on the feature-user-location branch",
    "text": "The commit is being tagged for release on the feature-user-location branch"
   },
   {
    "isCorrect": false,
    "html": "A commit is being copied from its original branch over to the feature-user-location branch",
    "text": "A commit is being copied from its original branch over to the feature-user-location branch"
   },
   {
    "isCorrect": true,
    "html": "The commit is being cherry picked as the new HEAD of the commit history",
    "text": "The commit is being cherry picked as the new HEAD of the commit history"
   },
   {
    "isCorrect": false,
    "html": "A commit is being copied from the feature-user-location branch to the master branch",
    "text": "A commit is being copied from the feature-user-location branch to the master branch"
   },
   {
    "isCorrect": false,
    "html": "The branch is switched to the feature-user-location branch, and the specified commit is applied to the branch.",
    "text": "The branch is switched to the feature-user-location branch, and the specified commit is applied to the branch."
   }
  ],
  "reference": {
   "html": "<p><strong>Explanation:</strong> Commits aren't copied when cherry picking, they are cherry picked. The changes introduced by the commit are applied and a new commit is then created. This allow us to get specific changes as if they were patches (in the GIT's book, this is actually called <a href=\"https://git-scm.com/book/en/v2/Appendix-C:-Git-Commands-Patching\" title=\"See this in the GIT's book\">Patching</a>). As a new commit is created upon feature-user-location, HEAD also changes to match it. You can see this in <code>cat .git/HEAD</code> and <code>cat .git/refs/heads/feature-user-location</code> for this case. See <code>man git-cherry-pick</code> for details.</p>",
   "text": "Explanation: Commits aren't copied when cherry picking, they are cherry picked. The changes introduced by the commit are applied and a new commit is then created. This allow us to get specific changes as if they were patches (in the GIT's book, this is actually called Patching). As a new commit is created upon feature-user-location, HEAD also changes to match it. You can see this in cat .git/HEAD and cat .git/refs/heads/feature-user-location for this case. See man git-cherry-pick for details."
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q8. What does the following command do to the git repository?\n\n`git reset --soft HEAD^`\n\n- [ ] It deletes all previous commits and reset the repository history back to its initial state.\n- [ ] It resets the working branch to the first commit.\n- [ ] It keeps the HEAD at the current commit, but clears all previous commits.\n- [x] It sets HEAD to the previous commit and leaves changes from the undone commit in the stage/index.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q8. What does the following command do to the git repository?</h4>",
   "text": "Q8. What does the following command do to the git repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It deletes all previous commits and reset the repository history back to its initial state.",
    "text": "It deletes all previous commits and reset the repository history back to its initial state."
   },
   {
    "isCorrect": false,
    "html": "It resets the working branch to the first commit.",
    "text": "It resets the working branch to the first commit."
   },
   {
    "isCorrect": false,
    "html": "It keeps the HEAD at the current commit, but clears all previous commits.",
    "text": "It keeps the HEAD at the current commit, but clears all previous commits."
   },
   {
    "isCorrect": true,
    "html": "It sets HEAD to the previous commit and leaves changes from the undone commit in the stage/index.",
    "text": "It sets HEAD to the previous commit and leaves changes from the undone commit in the stage/index."
   }
  ],
  "reference": {
   "html": "<p><code>git reset --soft HEAD^</code></p>",
   "text": "git reset --soft HEAD^"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q9. You find a bug in your project, but can't locate where it was introduced in the commit history. How would you diagnose this problem?\n\n- [ ] Manually backtrack through your commit history.\n- [ ] Use git search -diff to compare all commits in your repository history.\n- [ ] Run a git rebase to find the buggy commit.\n- [x] Use git bisect to compare the buggy commit to an early commit that works as expected.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q9. You find a bug in your project, but can't locate where it was introduced in the commit history. How would you diagnose this problem?</h4>",
   "text": "Q9. You find a bug in your project, but can't locate where it was introduced in the commit history. How would you diagnose this problem?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Manually backtrack through your commit history.",
    "text": "Manually backtrack through your commit history."
   },
   {
    "isCorrect": false,
    "html": "Use git search -diff to compare all commits in your repository history.",
    "text": "Use git search -diff to compare all commits in your repository history."
   },
   {
    "isCorrect": false,
    "html": "Run a git rebase to find the buggy commit.",
    "text": "Run a git rebase to find the buggy commit."
   },
   {
    "isCorrect": true,
    "html": "Use git bisect to compare the buggy commit to an early commit that works as expected.",
    "text": "Use git bisect to compare the buggy commit to an early commit that works as expected."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q10. Why would the following command be used?\n\n`git rebase -i HEAD~10`\n\n- [ ] To run a comparative search of the last 10 commits for differences\n- [x] To list the last 10 commits and modify them with either the squash or fixup command\n- [ ] To delete the last 10 commits and reset the HEAD\n- [ ] In order to locally cache the last 10 commits\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q10. Why would the following command be used?</h4>",
   "text": "Q10. Why would the following command be used?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "To run a comparative search of the last 10 commits for differences",
    "text": "To run a comparative search of the last 10 commits for differences"
   },
   {
    "isCorrect": true,
    "html": "To list the last 10 commits and modify them with either the squash or fixup command",
    "text": "To list the last 10 commits and modify them with either the squash or fixup command"
   },
   {
    "isCorrect": false,
    "html": "To delete the last 10 commits and reset the HEAD",
    "text": "To delete the last 10 commits and reset the HEAD"
   },
   {
    "isCorrect": false,
    "html": "In order to locally cache the last 10 commits",
    "text": "In order to locally cache the last 10 commits"
   }
  ],
  "reference": {
   "html": "<p><code>git rebase -i HEAD~10</code></p>",
   "text": "git rebase -i HEAD~10"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q11. Why would you use a pre-receive hook in your remote repository?\n\n- [ ] You wouldn't, you would use it in the local repository\n- [x] To execute a script when a remote receives a push that is triggered before any refs are updated\n- [ ] To fire a script after updates are made to the remote repository\n- [ ] To debug all commit tags and release versions\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q11. Why would you use a pre-receive hook in your remote repository?</h4>",
   "text": "Q11. Why would you use a pre-receive hook in your remote repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "You wouldn't, you would use it in the local repository",
    "text": "You wouldn't, you would use it in the local repository"
   },
   {
    "isCorrect": true,
    "html": "To execute a script when a remote receives a push that is triggered before any refs are updated",
    "text": "To execute a script when a remote receives a push that is triggered before any refs are updated"
   },
   {
    "isCorrect": false,
    "html": "To fire a script after updates are made to the remote repository",
    "text": "To fire a script after updates are made to the remote repository"
   },
   {
    "isCorrect": false,
    "html": "To debug all commit tags and release versions",
    "text": "To debug all commit tags and release versions"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q12. What option can you use to apply git configurations across your entire git environment?\n\n- [ ] `--all`\n- [ ] `--master`\n- [x] `--global`\n- [ ] `--update`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q12. What option can you use to apply git configurations across your entire git environment?</h4>",
   "text": "Q12. What option can you use to apply git configurations across your entire git environment?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>--all</code>",
    "text": "--all"
   },
   {
    "isCorrect": false,
    "html": "<code>--master</code>",
    "text": "--master"
   },
   {
    "isCorrect": true,
    "html": "<code>--global</code>",
    "text": "--global"
   },
   {
    "isCorrect": false,
    "html": "<code>--update</code>",
    "text": "--update"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q13. How could you squash multiple commits together without using git merge --squash?\n\n- [ ] Caching\n- [ ] You can't. git merge --squash is the only git command for that operation.\n- [x] Rebasing\n- [ ] Reflogging\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q13. How could you squash multiple commits together without using git merge --squash?</h4>",
   "text": "Q13. How could you squash multiple commits together without using git merge --squash?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Caching",
    "text": "Caching"
   },
   {
    "isCorrect": false,
    "html": "You can't. git merge --squash is the only git command for that operation.",
    "text": "You can't. git merge --squash is the only git command for that operation."
   },
   {
    "isCorrect": true,
    "html": "Rebasing",
    "text": "Rebasing"
   },
   {
    "isCorrect": false,
    "html": "Reflogging",
    "text": "Reflogging"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q14. If you cloned an existing git repository, what would happen?\n\n- [ ] A new copy would overwrite the central repository\n- [x] A copy of the repository would be created on your local machine\n- [ ] Nothing, cloning is not a supported git function\n- [ ] A copy of the repository would be created on the hosting platform\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q14. If you cloned an existing git repository, what would happen?</h4>",
   "text": "Q14. If you cloned an existing git repository, what would happen?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A new copy would overwrite the central repository",
    "text": "A new copy would overwrite the central repository"
   },
   {
    "isCorrect": true,
    "html": "A copy of the repository would be created on your local machine",
    "text": "A copy of the repository would be created on your local machine"
   },
   {
    "isCorrect": false,
    "html": "Nothing, cloning is not a supported git function",
    "text": "Nothing, cloning is not a supported git function"
   },
   {
    "isCorrect": false,
    "html": "A copy of the repository would be created on the hosting platform",
    "text": "A copy of the repository would be created on the hosting platform"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q15. How can you display a list of files added or modified in a specific commit?\n\n- [ ] Find the commit in the remote repository, as that's the only place that kind of information is stored.\n- [x] Use the `diff-tree` command with the commit hash.\n- [ ] Run `git commit --info` with the commit hash.\n- [ ] Access the commit stash data with `git stash`.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q15. How can you display a list of files added or modified in a specific commit?</h4>",
   "text": "Q15. How can you display a list of files added or modified in a specific commit?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Find the commit in the remote repository, as that's the only place that kind of information is stored.",
    "text": "Find the commit in the remote repository, as that's the only place that kind of information is stored."
   },
   {
    "isCorrect": true,
    "html": "Use the <code>diff-tree</code> command with the commit hash.",
    "text": "Use the diff-tree command with the commit hash."
   },
   {
    "isCorrect": false,
    "html": "Run <code>git commit --info</code> with the commit hash.",
    "text": "Run git commit --info with the commit hash."
   },
   {
    "isCorrect": false,
    "html": "Access the commit stash data with <code>git stash</code>.",
    "text": "Access the commit stash data with git stash."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q16. What files is this .gitignore programmed to leave out?\n\n```shell\n#.swift\nbuild/\n\n*.txt\n*.metadata\n```\n\n- [ ] All files with a .swift, .txt, or metadata file extension, as well as the entire build directory\n- [ ] Only the build directory\n- [x] All files in the build directory, as well as files ending with .txt or .metadata\n- [ ] Only files with .swift and .txt extensions.\n\nA line starting with `#` serves as a comment. Hence `# .swift` does not do anything. See `man gitignore`.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q16. What files is this .gitignore programmed to leave out?</h4>",
   "text": "Q16. What files is this .gitignore programmed to leave out?"
  },
  "preformated": {
   "language": "shell",
   "html": "<pre><code class=\"language-shell\"><span class=\"token comment\">#.swift</span>\nbuild/\n\n*.txt\n*.metadata\n</code></pre>",
   "text": "#.swift\nbuild/\n\n*.txt\n*.metadata\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "All files with a .swift, .txt, or metadata file extension, as well as the entire build directory",
    "text": "All files with a .swift, .txt, or metadata file extension, as well as the entire build directory"
   },
   {
    "isCorrect": false,
    "html": "Only the build directory",
    "text": "Only the build directory"
   },
   {
    "isCorrect": true,
    "html": "All files in the build directory, as well as files ending with .txt or .metadata",
    "text": "All files in the build directory, as well as files ending with .txt or .metadata"
   },
   {
    "isCorrect": false,
    "html": "Only files with .swift and .txt extensions.",
    "text": "Only files with .swift and .txt extensions."
   }
  ],
  "reference": {
   "html": "<p>A line starting with <code>#</code> serves as a comment. Hence <code># .swift</code> does not do anything. See <code>man gitignore</code>.</p>",
   "text": "A line starting with # serves as a comment. Hence # .swift does not do anything. See man gitignore."
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q17. After you make changes to a local repository, you run the following command. What will this do?\n\n`git commit -a -m \"Refactor code base\"`\n\n- [ ] Nothing, you can't use multiple options in the same command\n- [ ] Adds all new files to the staging area\n- [ ] Commits all new files with a message\n- [x] Adds all modified files to the staging area, then commits them with a message\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q17. After you make changes to a local repository, you run the following command. What will this do?</h4>",
   "text": "Q17. After you make changes to a local repository, you run the following command. What will this do?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Nothing, you can't use multiple options in the same command",
    "text": "Nothing, you can't use multiple options in the same command"
   },
   {
    "isCorrect": false,
    "html": "Adds all new files to the staging area",
    "text": "Adds all new files to the staging area"
   },
   {
    "isCorrect": false,
    "html": "Commits all new files with a message",
    "text": "Commits all new files with a message"
   },
   {
    "isCorrect": true,
    "html": "Adds all modified files to the staging area, then commits them with a message",
    "text": "Adds all modified files to the staging area, then commits them with a message"
   }
  ],
  "reference": {
   "html": "<p><code>git commit -a -m \"Refactor code base\"</code></p>",
   "text": "git commit -a -m \"Refactor code base\""
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q18. After checking your git status you get the following output, which shows the file beta-notes.js in the commit but also unstaged. How can this situation occur?\n\n```shell\nChange to be committed:\n\n(use \"git reset HEAD <file>...\" to unstage)\nmodified: beta-notes.js\nChanges not staged for commit:\n(use \"git add <file>...\" to update what will be committed)\n(use \"git checkout --<file>...\" to discard changes in working directory)\n\nmodified: beta-notes.js\n```\n\n- [ ] There were two copies of beta-notes.js but one was deleted\n- [x] beta-notes.js was staged, then modified afterwards, creating two different versions of the file\n- [ ] Two copies of beta-notes.js were created, but only one is being tracked\n- [ ] There are two tracked copies of beta-notes.js, but one was removed from the commit\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q18. After checking your git status you get the following output, which shows the file beta-notes.js in the commit but also unstaged. How can this situation occur?</h4>",
   "text": "Q18. After checking your git status you get the following output, which shows the file beta-notes.js in the commit but also unstaged. How can this situation occur?"
  },
  "preformated": {
   "language": "shell",
   "html": "<pre><code class=\"language-shell\">Change to be committed:\n\n<span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage<span class=\"token punctuation\">)</span>\nmodified: beta-notes.js\nChanges not staged <span class=\"token keyword\">for</span> commit:\n<span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout --&lt;file&gt;...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span>\n\nmodified: beta-notes.js\n</code></pre>",
   "text": "Change to be committed:\n\n(use \"git reset HEAD <file>...\" to unstage)\nmodified: beta-notes.js\nChanges not staged for commit:\n(use \"git add <file>...\" to update what will be committed)\n(use \"git checkout --<file>...\" to discard changes in working directory)\n\nmodified: beta-notes.js\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "There were two copies of beta-notes.js but one was deleted",
    "text": "There were two copies of beta-notes.js but one was deleted"
   },
   {
    "isCorrect": true,
    "html": "beta-notes.js was staged, then modified afterwards, creating two different versions of the file",
    "text": "beta-notes.js was staged, then modified afterwards, creating two different versions of the file"
   },
   {
    "isCorrect": false,
    "html": "Two copies of beta-notes.js were created, but only one is being tracked",
    "text": "Two copies of beta-notes.js were created, but only one is being tracked"
   },
   {
    "isCorrect": false,
    "html": "There are two tracked copies of beta-notes.js, but one was removed from the commit",
    "text": "There are two tracked copies of beta-notes.js, but one was removed from the commit"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q19. Where are files stored before they are committed to the local repository?\n\n- [ ] Saved files\n- [ ] git documents\n- [x] Staging area\n- [ ] git cache\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q19. Where are files stored before they are committed to the local repository?</h4>",
   "text": "Q19. Where are files stored before they are committed to the local repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Saved files",
    "text": "Saved files"
   },
   {
    "isCorrect": false,
    "html": "git documents",
    "text": "git documents"
   },
   {
    "isCorrect": true,
    "html": "Staging area",
    "text": "Staging area"
   },
   {
    "isCorrect": false,
    "html": "git cache",
    "text": "git cache"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q21. Which statement is true when you use the git add -A command?\n\n- [ ] Only new files in the working directory are staged to the index.\n- [x] All new and updated files from the working directory are staged to the index.\n- [ ] All files in the working directory are staged to the index in alphabetical order.\n- [ ] Only updated files in the working directory are staged to the index.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q21. Which statement is true when you use the git add -A command?</h4>",
   "text": "Q21. Which statement is true when you use the git add -A command?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Only new files in the working directory are staged to the index.",
    "text": "Only new files in the working directory are staged to the index."
   },
   {
    "isCorrect": true,
    "html": "All new and updated files from the working directory are staged to the index.",
    "text": "All new and updated files from the working directory are staged to the index."
   },
   {
    "isCorrect": false,
    "html": "All files in the working directory are staged to the index in alphabetical order.",
    "text": "All files in the working directory are staged to the index in alphabetical order."
   },
   {
    "isCorrect": false,
    "html": "Only updated files in the working directory are staged to the index.",
    "text": "Only updated files in the working directory are staged to the index."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q22. You find that your project has a tag and branch both named push-notifications, which causes confusion when trying to print out given reference. How can you specify which branch you want to look at?\n\n- [ ] use git show refs/push-notifications\n- [ ] use git show push-notifications\n- [ ] use git show head/refs/push-notifications\n- [x] use git show refs/head/push-notifications\n\n[Reference](https://geedew.com/fixing-git-branch-and-tag-name-collision/)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q22. You find that your project has a tag and branch both named push-notifications, which causes confusion when trying to print out given reference. How can you specify which branch you want to look at?</h4>",
   "text": "Q22. You find that your project has a tag and branch both named push-notifications, which causes confusion when trying to print out given reference. How can you specify which branch you want to look at?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "use git show refs/push-notifications",
    "text": "use git show refs/push-notifications"
   },
   {
    "isCorrect": false,
    "html": "use git show push-notifications",
    "text": "use git show push-notifications"
   },
   {
    "isCorrect": false,
    "html": "use git show head/refs/push-notifications",
    "text": "use git show head/refs/push-notifications"
   },
   {
    "isCorrect": true,
    "html": "use git show refs/head/push-notifications",
    "text": "use git show refs/head/push-notifications"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://geedew.com/fixing-git-branch-and-tag-name-collision/\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q23. Your team lead needs a list of all commits that will be moved before you perform a rebase. Which command can you use to access that information?\n\n- [ ] git rebase -log\n- [x] git rebase -i\n- [ ] git rebase -verbose\n- [ ] git rebase -all\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q23. Your team lead needs a list of all commits that will be moved before you perform a rebase. Which command can you use to access that information?</h4>",
   "text": "Q23. Your team lead needs a list of all commits that will be moved before you perform a rebase. Which command can you use to access that information?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git rebase -log",
    "text": "git rebase -log"
   },
   {
    "isCorrect": true,
    "html": "git rebase -i",
    "text": "git rebase -i"
   },
   {
    "isCorrect": false,
    "html": "git rebase -verbose",
    "text": "git rebase -verbose"
   },
   {
    "isCorrect": false,
    "html": "git rebase -all",
    "text": "git rebase -all"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q24. What is the operation doing given the Git commands below?\n\n```\ngit bisect start\ngit bisect bad 5d41402abc4b2a76b9719d911017c592\ngit bisect good 69faab6268350295550de7d587bc323d\n```\n\n- [ ] It runs a merge of a good commit that is discovered using a known bad commit and known good commit\n- [ ] It marks a commit for deletion using a known bad commit and known good commit to determine which commit introduced a bug\n- [ ] It defines a bad commit and resets the HEAD using a known bad commit and known good commit\n- [x] It performs a binary search using a known bad commit and known good commit to determine which commit introduced a bug\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q24. What is the operation doing given the Git commands below?</h4>",
   "text": "Q24. What is the operation doing given the Git commands below?"
  },
  "preformated": {
   "language": "",
   "html": "<pre><code>git bisect start\ngit bisect bad 5d41402abc4b2a76b9719d911017c592\ngit bisect good 69faab6268350295550de7d587bc323d\n</code></pre>",
   "text": "git bisect start\ngit bisect bad 5d41402abc4b2a76b9719d911017c592\ngit bisect good 69faab6268350295550de7d587bc323d\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It runs a merge of a good commit that is discovered using a known bad commit and known good commit",
    "text": "It runs a merge of a good commit that is discovered using a known bad commit and known good commit"
   },
   {
    "isCorrect": false,
    "html": "It marks a commit for deletion using a known bad commit and known good commit to determine which commit introduced a bug",
    "text": "It marks a commit for deletion using a known bad commit and known good commit to determine which commit introduced a bug"
   },
   {
    "isCorrect": false,
    "html": "It defines a bad commit and resets the HEAD using a known bad commit and known good commit",
    "text": "It defines a bad commit and resets the HEAD using a known bad commit and known good commit"
   },
   {
    "isCorrect": true,
    "html": "It performs a binary search using a known bad commit and known good commit to determine which commit introduced a bug",
    "text": "It performs a binary search using a known bad commit and known good commit to determine which commit introduced a bug"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q25. In a situation where you have several commits for a single task, what is the most efficient way to restructure your commit history?\n\n- [ ] Cherry pick the related commits to another branch.\n- [ ] Delete the task commits and recommit with a new message.\n- [x] Squash the related commits together into a single coherent commit.\n- [ ] Stash the related commits under a new hash.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q25. In a situation where you have several commits for a single task, what is the most efficient way to restructure your commit history?</h4>",
   "text": "Q25. In a situation where you have several commits for a single task, what is the most efficient way to restructure your commit history?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Cherry pick the related commits to another branch.",
    "text": "Cherry pick the related commits to another branch."
   },
   {
    "isCorrect": false,
    "html": "Delete the task commits and recommit with a new message.",
    "text": "Delete the task commits and recommit with a new message."
   },
   {
    "isCorrect": true,
    "html": "Squash the related commits together into a single coherent commit.",
    "text": "Squash the related commits together into a single coherent commit."
   },
   {
    "isCorrect": false,
    "html": "Stash the related commits under a new hash.",
    "text": "Stash the related commits under a new hash."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q26. Which of the following is true of the git push command?\n\n- [x] By default a push doesn't send tags to the remote repository.\n- [ ] Commits can only be tagged when they are created.\n- [ ] Tags are pushed to the remote repository with their respective commits.\n- [ ] Only annotated tags are automatically pushed to the remote repository with a commit.\n\n[Reference](https://git-scm.com/book/en/v2/Git-Basics-Tagging#_sharing_tags)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q26. Which of the following is true of the git push command?</h4>",
   "text": "Q26. Which of the following is true of the git push command?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "By default a push doesn't send tags to the remote repository.",
    "text": "By default a push doesn't send tags to the remote repository."
   },
   {
    "isCorrect": false,
    "html": "Commits can only be tagged when they are created.",
    "text": "Commits can only be tagged when they are created."
   },
   {
    "isCorrect": false,
    "html": "Tags are pushed to the remote repository with their respective commits.",
    "text": "Tags are pushed to the remote repository with their respective commits."
   },
   {
    "isCorrect": false,
    "html": "Only annotated tags are automatically pushed to the remote repository with a commit.",
    "text": "Only annotated tags are automatically pushed to the remote repository with a commit."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://git-scm.com/book/en/v2/Git-Basics-Tagging#_sharing_tags\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q27. After pushing commits to the remote repository for the first time using the command below, what shorthand command can you use in future?\n\n```bash\ngit push -u origin master\n```\n\n- [ ] git push master\n- [ ] git push origin\n- [ ] Same as before, git push -u origin master\n- [x] git push\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q27. After pushing commits to the remote repository for the first time using the command below, what shorthand command can you use in future?</h4>",
   "text": "Q27. After pushing commits to the remote repository for the first time using the command below, what shorthand command can you use in future?"
  },
  "preformated": {
   "language": "bash",
   "html": "<pre><code class=\"language-bash\"><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master\n</code></pre>",
   "text": "git push -u origin master\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git push master",
    "text": "git push master"
   },
   {
    "isCorrect": false,
    "html": "git push origin",
    "text": "git push origin"
   },
   {
    "isCorrect": false,
    "html": "Same as before, git push -u origin master",
    "text": "Same as before, git push -u origin master"
   },
   {
    "isCorrect": true,
    "html": "git push",
    "text": "git push"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q28. How would you create a custom shortcut or command across your git environment?\n\n- [ ] Run git hotfix with the shortcut name.\n- [ ] Assign a shortcut or command using git options file.\n- [ ] Use the git custom-key command.\n- [x] Create an alias using the git config command.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q28. How would you create a custom shortcut or command across your git environment?</h4>",
   "text": "Q28. How would you create a custom shortcut or command across your git environment?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Run git hotfix with the shortcut name.",
    "text": "Run git hotfix with the shortcut name."
   },
   {
    "isCorrect": false,
    "html": "Assign a shortcut or command using git options file.",
    "text": "Assign a shortcut or command using git options file."
   },
   {
    "isCorrect": false,
    "html": "Use the git custom-key command.",
    "text": "Use the git custom-key command."
   },
   {
    "isCorrect": true,
    "html": "Create an alias using the git config command.",
    "text": "Create an alias using the git config command."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q29. What is the status of the beta-notes.js file in the following output?\n\n```shell\nChanges not staged for commit:\n(use \"git add <file>...\" to update what will be committed)\n(use \"git checkout -- <file>...\" to discard changes in working directory)\n\nmodified: beta-notes.js\n```\n\n- [ ] beta-notes.js is untracked and has been modified.\n- [x] beta-notes.js is a tracked file and has been modified, but has not been added to the current commit.\n- [ ] beta-notes.js is untracked but has been added to the current commit.\n- [ ] beta-notes.js is tracked, and the modified file has been added to the current commit.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q29. What is the status of the beta-notes.js file in the following output?</h4>",
   "text": "Q29. What is the status of the beta-notes.js file in the following output?"
  },
  "preformated": {
   "language": "shell",
   "html": "<pre><code class=\"language-shell\">Changes not staged <span class=\"token keyword\">for</span> commit:\n<span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span>\n\nmodified: beta-notes.js\n</code></pre>",
   "text": "Changes not staged for commit:\n(use \"git add <file>...\" to update what will be committed)\n(use \"git checkout -- <file>...\" to discard changes in working directory)\n\nmodified: beta-notes.js\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "beta-notes.js is untracked and has been modified.",
    "text": "beta-notes.js is untracked and has been modified."
   },
   {
    "isCorrect": true,
    "html": "beta-notes.js is a tracked file and has been modified, but has not been added to the current commit.",
    "text": "beta-notes.js is a tracked file and has been modified, but has not been added to the current commit."
   },
   {
    "isCorrect": false,
    "html": "beta-notes.js is untracked but has been added to the current commit.",
    "text": "beta-notes.js is untracked but has been added to the current commit."
   },
   {
    "isCorrect": false,
    "html": "beta-notes.js is tracked, and the modified file has been added to the current commit.",
    "text": "beta-notes.js is tracked, and the modified file has been added to the current commit."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q30. What command would let you modify your previous commit?\n\n- [ ] --fix\n- [ ] --quickfix\n- [ ] --modify\n- [x] --amend\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q30. What command would let you modify your previous commit?</h4>",
   "text": "Q30. What command would let you modify your previous commit?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "--fix",
    "text": "--fix"
   },
   {
    "isCorrect": false,
    "html": "--quickfix",
    "text": "--quickfix"
   },
   {
    "isCorrect": false,
    "html": "--modify",
    "text": "--modify"
   },
   {
    "isCorrect": true,
    "html": "--amend",
    "text": "--amend"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q31. What is the best way to characterize the git commit structure?\n\n- [ ] Data array\n- [x] Data log\n- [ ] Data snapshot\n- [ ] Data dictionary\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q31. What is the best way to characterize the git commit structure?</h4>",
   "text": "Q31. What is the best way to characterize the git commit structure?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Data array",
    "text": "Data array"
   },
   {
    "isCorrect": true,
    "html": "Data log",
    "text": "Data log"
   },
   {
    "isCorrect": false,
    "html": "Data snapshot",
    "text": "Data snapshot"
   },
   {
    "isCorrect": false,
    "html": "Data dictionary",
    "text": "Data dictionary"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q32. What change will the following command make to the staging area files?\n\n`git rm --cached testfile.js`\n\n- [x] testfile.js will be removed from the staging area and its changes no longer tracked.\n- [ ] testfile.js will be removed from the staging area but its changes will still be tracked.\n- [ ] A copy of testfile.js will be cached on your desktop.\n- [ ] The current copy of testfile.js will be saved in the staging area.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q32. What change will the following command make to the staging area files?</h4>",
   "text": "Q32. What change will the following command make to the staging area files?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "testfile.js will be removed from the staging area and its changes no longer tracked.",
    "text": "testfile.js will be removed from the staging area and its changes no longer tracked."
   },
   {
    "isCorrect": false,
    "html": "testfile.js will be removed from the staging area but its changes will still be tracked.",
    "text": "testfile.js will be removed from the staging area but its changes will still be tracked."
   },
   {
    "isCorrect": false,
    "html": "A copy of testfile.js will be cached on your desktop.",
    "text": "A copy of testfile.js will be cached on your desktop."
   },
   {
    "isCorrect": false,
    "html": "The current copy of testfile.js will be saved in the staging area.",
    "text": "The current copy of testfile.js will be saved in the staging area."
   }
  ],
  "reference": {
   "html": "<p><code>git rm --cached testfile.js</code></p>",
   "text": "git rm --cached testfile.js"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q33. After you've successfully merged two branches and committed the changes, what is the next step in keeping your git structure organized?\n\n- [ ] Use the git reset --soft HEAD to roll back one commit.\n- [x] Run git branch -d `<branch name>` to delete the merged branch.\n- [ ] Use git clear-all to clean up any hanging files.\n- [ ] Run git rebase to move the current commit to its original location.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q33. After you've successfully merged two branches and committed the changes, what is the next step in keeping your git structure organized?</h4>",
   "text": "Q33. After you've successfully merged two branches and committed the changes, what is the next step in keeping your git structure organized?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Use the git reset --soft HEAD to roll back one commit.",
    "text": "Use the git reset --soft HEAD to roll back one commit."
   },
   {
    "isCorrect": true,
    "html": "Run git branch -d <code>&lt;branch name&gt;</code> to delete the merged branch.",
    "text": "Run git branch -d <branch name> to delete the merged branch."
   },
   {
    "isCorrect": false,
    "html": "Use git clear-all to clean up any hanging files.",
    "text": "Use git clear-all to clean up any hanging files."
   },
   {
    "isCorrect": false,
    "html": "Run git rebase to move the current commit to its original location.",
    "text": "Run git rebase to move the current commit to its original location."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q34. While modifying a file, you're unexpectedly assigned an urgent bug fix on another branch. How can you temporarily save your local work without committing?\n\n- [ ] This is not possible, as you cannot save locally without committing.\n- [ ] Run git hold to save a local copy of what you're doing to return to later.\n- [ ] Save your work with git local-cache.\n- [x] Use git stash to save your work and come back later and reapply the stashed commit.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q34. While modifying a file, you're unexpectedly assigned an urgent bug fix on another branch. How can you temporarily save your local work without committing?</h4>",
   "text": "Q34. While modifying a file, you're unexpectedly assigned an urgent bug fix on another branch. How can you temporarily save your local work without committing?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "This is not possible, as you cannot save locally without committing.",
    "text": "This is not possible, as you cannot save locally without committing."
   },
   {
    "isCorrect": false,
    "html": "Run git hold to save a local copy of what you're doing to return to later.",
    "text": "Run git hold to save a local copy of what you're doing to return to later."
   },
   {
    "isCorrect": false,
    "html": "Save your work with git local-cache.",
    "text": "Save your work with git local-cache."
   },
   {
    "isCorrect": true,
    "html": "Use git stash to save your work and come back later and reapply the stashed commit.",
    "text": "Use git stash to save your work and come back later and reapply the stashed commit."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q35. What command would you use to create a new git repository?\n\n- [ ] git add\n- [ ] git start\n- [ ] git new\n- [x] git init\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q35. What command would you use to create a new git repository?</h4>",
   "text": "Q35. What command would you use to create a new git repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git add",
    "text": "git add"
   },
   {
    "isCorrect": false,
    "html": "git start",
    "text": "git start"
   },
   {
    "isCorrect": false,
    "html": "git new",
    "text": "git new"
   },
   {
    "isCorrect": true,
    "html": "git init",
    "text": "git init"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q36. While working on a feature branch you try to use \"git rerere\" to solve a recurring merge conflict but nothing is happening. What could be causing this issue?\n\n- [ ] The \"-all\" option isn't added to the command.\n- [x] \"rerere.enabled\" isn't enable in the config file.\n- [ ] The commit hash is missing.\n- [ ] The filepath isn't specified.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q36. While working on a feature branch you try to use \"git rerere\" to solve a recurring merge conflict but nothing is happening. What could be causing this issue?</h4>",
   "text": "Q36. While working on a feature branch you try to use \"git rerere\" to solve a recurring merge conflict but nothing is happening. What could be causing this issue?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The \"-all\" option isn't added to the command.",
    "text": "The \"-all\" option isn't added to the command."
   },
   {
    "isCorrect": true,
    "html": "\"rerere.enabled\" isn't enable in the config file.",
    "text": "\"rerere.enabled\" isn't enable in the config file."
   },
   {
    "isCorrect": false,
    "html": "The commit hash is missing.",
    "text": "The commit hash is missing."
   },
   {
    "isCorrect": false,
    "html": "The filepath isn't specified.",
    "text": "The filepath isn't specified."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q37. Which setting determines what pager is used when Git pages output?\n\n- [ ] core.page\n- [ ] page\n- [ ] pager\n- [x] core.pager\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q37. Which setting determines what pager is used when Git pages output?</h4>",
   "text": "Q37. Which setting determines what pager is used when Git pages output?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "core.page",
    "text": "core.page"
   },
   {
    "isCorrect": false,
    "html": "page",
    "text": "page"
   },
   {
    "isCorrect": false,
    "html": "pager",
    "text": "pager"
   },
   {
    "isCorrect": true,
    "html": "core.pager",
    "text": "core.pager"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q38. What does commit object contain?\n\n- [ ] A set of files, representing the state of a project at a given point of time.\n- [ ] Reference to parent commit objects.\n- [x] An SHA1 name, a 40-character string that uniquely identifies the commit object.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q38. What does commit object contain?</h4>",
   "text": "Q38. What does commit object contain?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A set of files, representing the state of a project at a given point of time.",
    "text": "A set of files, representing the state of a project at a given point of time."
   },
   {
    "isCorrect": false,
    "html": "Reference to parent commit objects.",
    "text": "Reference to parent commit objects."
   },
   {
    "isCorrect": true,
    "html": "An SHA1 name, a 40-character string that uniquely identifies the commit object.",
    "text": "An SHA1 name, a 40-character string that uniquely identifies the commit object."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q39. Which option enables inclusion of committer name in custom log format?\n\n- [ ] %ce\n- [ ] %cr\n- [ ] %cd\n- [x] %cn\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q39. Which option enables inclusion of committer name in custom log format?</h4>",
   "text": "Q39. Which option enables inclusion of committer name in custom log format?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "%ce",
    "text": "%ce"
   },
   {
    "isCorrect": false,
    "html": "%cr",
    "text": "%cr"
   },
   {
    "isCorrect": false,
    "html": "%cd",
    "text": "%cd"
   },
   {
    "isCorrect": true,
    "html": "%cn",
    "text": "%cn"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q40. How many ways are present in Git to integrate changes from one branch into another?\n\n- [ ] 3\n- [ ] 5\n- [x] 2\n- [ ] 4\n\n[Reference link](https://git-scm.com/book/en/v2/Git-Branching-Rebasing)\n`In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase.`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q40. How many ways are present in Git to integrate changes from one branch into another?</h4>",
   "text": "Q40. How many ways are present in Git to integrate changes from one branch into another?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "3",
    "text": "3"
   },
   {
    "isCorrect": false,
    "html": "5",
    "text": "5"
   },
   {
    "isCorrect": true,
    "html": "2",
    "text": "2"
   },
   {
    "isCorrect": false,
    "html": "4",
    "text": "4"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://git-scm.com/book/en/v2/Git-Branching-Rebasing\">Reference link</a>\n<code>In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase.</code></p>",
   "text": "Reference link\nIn Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase."
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q41. Which user should be created first during setting up of SSH?\n\n- [x] git\n- [ ] admin\n- [ ] root\n- [ ] None of these\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q41. Which user should be created first during setting up of SSH?</h4>",
   "text": "Q41. Which user should be created first during setting up of SSH?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "git",
    "text": "git"
   },
   {
    "isCorrect": false,
    "html": "admin",
    "text": "admin"
   },
   {
    "isCorrect": false,
    "html": "root",
    "text": "root"
   },
   {
    "isCorrect": false,
    "html": "None of these",
    "text": "None of these"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q42. Which command will list tags with the 1.4.2 series?\n\n- [ ] git tag 'v1.4.2'\n- [x] git tag -I 'v1.4.2.\\*'\n- [ ] git tag-list 'v1.4.2\\*'\n- [ ] git tag 'v1.4.2\\*'\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q42. Which command will list tags with the 1.4.2 series?</h4>",
   "text": "Q42. Which command will list tags with the 1.4.2 series?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git tag 'v1.4.2'",
    "text": "git tag 'v1.4.2'"
   },
   {
    "isCorrect": true,
    "html": "git tag -I 'v1.4.2.*'",
    "text": "git tag -I 'v1.4.2.*'"
   },
   {
    "isCorrect": false,
    "html": "git tag-list 'v1.4.2*'",
    "text": "git tag-list 'v1.4.2*'"
   },
   {
    "isCorrect": false,
    "html": "git tag 'v1.4.2*'",
    "text": "git tag 'v1.4.2*'"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q43. Which of the following is an integration manager?\n\n- [ ] lieutenants\n- [x] benevolent dictator\n- [ ] Depends upon project type\n- [ ] Depends upon data\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q43. Which of the following is an integration manager?</h4>",
   "text": "Q43. Which of the following is an integration manager?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "lieutenants",
    "text": "lieutenants"
   },
   {
    "isCorrect": true,
    "html": "benevolent dictator",
    "text": "benevolent dictator"
   },
   {
    "isCorrect": false,
    "html": "Depends upon project type",
    "text": "Depends upon project type"
   },
   {
    "isCorrect": false,
    "html": "Depends upon data",
    "text": "Depends upon data"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q44. Which Git command begins tracking of a new file?\n\n- [x] add\n- [ ] addfile\n- [ ] begin\n- [ ] track\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q44. Which Git command begins tracking of a new file?</h4>",
   "text": "Q44. Which Git command begins tracking of a new file?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "add",
    "text": "add"
   },
   {
    "isCorrect": false,
    "html": "addfile",
    "text": "addfile"
   },
   {
    "isCorrect": false,
    "html": "begin",
    "text": "begin"
   },
   {
    "isCorrect": false,
    "html": "track",
    "text": "track"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q45. Which of the following is called dumb protocol?\n\n- [ ] All of these\n- [ ] SSH\n- [ ] Git\n- [x] HTTP\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q45. Which of the following is called dumb protocol?</h4>",
   "text": "Q45. Which of the following is called dumb protocol?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "All of these",
    "text": "All of these"
   },
   {
    "isCorrect": false,
    "html": "SSH",
    "text": "SSH"
   },
   {
    "isCorrect": false,
    "html": "Git",
    "text": "Git"
   },
   {
    "isCorrect": true,
    "html": "HTTP",
    "text": "HTTP"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q46. Which key press returns a set of suggestions to pick from, when writing a Git command?\n\n- [ ] Control\n- [ ] Shift\n- [x] Tab\n- [ ] Alt\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q46. Which key press returns a set of suggestions to pick from, when writing a Git command?</h4>",
   "text": "Q46. Which key press returns a set of suggestions to pick from, when writing a Git command?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Control",
    "text": "Control"
   },
   {
    "isCorrect": false,
    "html": "Shift",
    "text": "Shift"
   },
   {
    "isCorrect": true,
    "html": "Tab",
    "text": "Tab"
   },
   {
    "isCorrect": false,
    "html": "Alt",
    "text": "Alt"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q47. Which of these terms best describes Git?\n\n- [x] Distributed Version Control System\n- [ ] Issue Tracking System\n- [ ] Integrated Development Environment\n- [ ] Web-Based Repository Hosting Service\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q47. Which of these terms best describes Git?</h4>",
   "text": "Q47. Which of these terms best describes Git?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Distributed Version Control System",
    "text": "Distributed Version Control System"
   },
   {
    "isCorrect": false,
    "html": "Issue Tracking System",
    "text": "Issue Tracking System"
   },
   {
    "isCorrect": false,
    "html": "Integrated Development Environment",
    "text": "Integrated Development Environment"
   },
   {
    "isCorrect": false,
    "html": "Web-Based Repository Hosting Service",
    "text": "Web-Based Repository Hosting Service"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q48. Which command gets a copy of an existing Git repository?\n\n- [ ] duplicate\n- [ ] replicate\n- [ ] copy\n- [x] clone\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q48. Which command gets a copy of an existing Git repository?</h4>",
   "text": "Q48. Which command gets a copy of an existing Git repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "duplicate",
    "text": "duplicate"
   },
   {
    "isCorrect": false,
    "html": "replicate",
    "text": "replicate"
   },
   {
    "isCorrect": false,
    "html": "copy",
    "text": "copy"
   },
   {
    "isCorrect": true,
    "html": "clone",
    "text": "clone"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q49. How does Git think of its data?\n\n- [ ] File\n- [ ] None of these\n- [x] Snapshot\n- [ ] Folder\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q49. How does Git think of its data?</h4>",
   "text": "Q49. How does Git think of its data?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "File",
    "text": "File"
   },
   {
    "isCorrect": false,
    "html": "None of these",
    "text": "None of these"
   },
   {
    "isCorrect": true,
    "html": "Snapshot",
    "text": "Snapshot"
   },
   {
    "isCorrect": false,
    "html": "Folder",
    "text": "Folder"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q50. Which option enables inclusion of author name in custom log format?\n\n- [ ] %am\n- [ ] %ad\n- [ ] %ae\n- [x] %an\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q50. Which option enables inclusion of author name in custom log format?</h4>",
   "text": "Q50. Which option enables inclusion of author name in custom log format?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "%am",
    "text": "%am"
   },
   {
    "isCorrect": false,
    "html": "%ad",
    "text": "%ad"
   },
   {
    "isCorrect": false,
    "html": "%ae",
    "text": "%ae"
   },
   {
    "isCorrect": true,
    "html": "%an",
    "text": "%an"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q51. Which version onwards did Git offer reversing a file back to what it looked like when last committed?\n\n- [ ] 1.7\n- [x] 1.6\n- [ ] 2.0\n- [ ] 1.8\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q51. Which version onwards did Git offer reversing a file back to what it looked like when last committed?</h4>",
   "text": "Q51. Which version onwards did Git offer reversing a file back to what it looked like when last committed?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "1.7",
    "text": "1.7"
   },
   {
    "isCorrect": true,
    "html": "1.6",
    "text": "1.6"
   },
   {
    "isCorrect": false,
    "html": "2.0",
    "text": "2.0"
   },
   {
    "isCorrect": false,
    "html": "1.8",
    "text": "1.8"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q52. Which strategy is used by Git for merging two branches?\n\n- [ ] LIFO\n- [x] recursive\n- [ ] FIFO\n- [ ] octopus\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q52. Which strategy is used by Git for merging two branches?</h4>",
   "text": "Q52. Which strategy is used by Git for merging two branches?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "LIFO",
    "text": "LIFO"
   },
   {
    "isCorrect": true,
    "html": "recursive",
    "text": "recursive"
   },
   {
    "isCorrect": false,
    "html": "FIFO",
    "text": "FIFO"
   },
   {
    "isCorrect": false,
    "html": "octopus",
    "text": "octopus"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q53. What does refs store?\n\n- [x] SHA-1 value\n- [ ] None of these\n- [ ] Branch name\n- [ ] Project name\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q53. What does refs store?</h4>",
   "text": "Q53. What does refs store?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "SHA-1 value",
    "text": "SHA-1 value"
   },
   {
    "isCorrect": false,
    "html": "None of these",
    "text": "None of these"
   },
   {
    "isCorrect": false,
    "html": "Branch name",
    "text": "Branch name"
   },
   {
    "isCorrect": false,
    "html": "Project name",
    "text": "Project name"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q54. What Language is used in GIT?\n\n- [x] C\n- [ ] C++\n- [ ] C#\n- [ ] Java\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q54. What Language is used in GIT?</h4>",
   "text": "Q54. What Language is used in GIT?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "C",
    "text": "C"
   },
   {
    "isCorrect": false,
    "html": "C++",
    "text": "C++"
   },
   {
    "isCorrect": false,
    "html": "C#",
    "text": "C#"
   },
   {
    "isCorrect": false,
    "html": "Java",
    "text": "Java"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q55. What is usually the extension of file which has the public key?\n\n- [ ] ssh\n- [x] pub\n- [ ] key\n- [ ] pk\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q55. What is usually the extension of file which has the public key?</h4>",
   "text": "Q55. What is usually the extension of file which has the public key?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "ssh",
    "text": "ssh"
   },
   {
    "isCorrect": true,
    "html": "pub",
    "text": "pub"
   },
   {
    "isCorrect": false,
    "html": "key",
    "text": "key"
   },
   {
    "isCorrect": false,
    "html": "pk",
    "text": "pk"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q56. What is the difference between initializing a normal repo and a bare repo?\n\n- [ ] Bare repos store their git history in a .git subfolder.\n- [ ] Bare repos do not have the .git extension.\n- [x] Bare repos do not come with working or checked-out source files.\n- [ ] Bare repos should be used for local rather than remote repos.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q56. What is the difference between initializing a normal repo and a bare repo?</h4>",
   "text": "Q56. What is the difference between initializing a normal repo and a bare repo?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Bare repos store their git history in a .git subfolder.",
    "text": "Bare repos store their git history in a .git subfolder."
   },
   {
    "isCorrect": false,
    "html": "Bare repos do not have the .git extension.",
    "text": "Bare repos do not have the .git extension."
   },
   {
    "isCorrect": true,
    "html": "Bare repos do not come with working or checked-out source files.",
    "text": "Bare repos do not come with working or checked-out source files."
   },
   {
    "isCorrect": false,
    "html": "Bare repos should be used for local rather than remote repos.",
    "text": "Bare repos should be used for local rather than remote repos."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q57. How many individual commits can a single repository have?\n\n- [x] any number of commits\n- [ ] only one commit local per repository\n- [ ] only three commits per branch\n- [ ] only one commit per HEAD\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q57. How many individual commits can a single repository have?</h4>",
   "text": "Q57. How many individual commits can a single repository have?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "any number of commits",
    "text": "any number of commits"
   },
   {
    "isCorrect": false,
    "html": "only one commit local per repository",
    "text": "only one commit local per repository"
   },
   {
    "isCorrect": false,
    "html": "only three commits per branch",
    "text": "only three commits per branch"
   },
   {
    "isCorrect": false,
    "html": "only one commit per HEAD",
    "text": "only one commit per HEAD"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q58. What types of tags does Git support?\n\n- [ ] heavy and concise\n- [ ] lightweight and immutable\n- [ ] heavy and annotated\n- [x] lightweight and annotated\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q58. What types of tags does Git support?</h4>",
   "text": "Q58. What types of tags does Git support?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "heavy and concise",
    "text": "heavy and concise"
   },
   {
    "isCorrect": false,
    "html": "lightweight and immutable",
    "text": "lightweight and immutable"
   },
   {
    "isCorrect": false,
    "html": "heavy and annotated",
    "text": "heavy and annotated"
   },
   {
    "isCorrect": true,
    "html": "lightweight and annotated",
    "text": "lightweight and annotated"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q59. After staging a series of changes to the index, which command could you use to review them prior to a commit?\n\n- [x] git diff --cached\n- [ ] git diff\n- [ ] git diff --HEAD\n- [ ] git status -v -v\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q59. After staging a series of changes to the index, which command could you use to review them prior to a commit?</h4>",
   "text": "Q59. After staging a series of changes to the index, which command could you use to review them prior to a commit?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "git diff --cached",
    "text": "git diff --cached"
   },
   {
    "isCorrect": false,
    "html": "git diff",
    "text": "git diff"
   },
   {
    "isCorrect": false,
    "html": "git diff --HEAD",
    "text": "git diff --HEAD"
   },
   {
    "isCorrect": false,
    "html": "git status -v -v",
    "text": "git status -v -v"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q60. What does the git stash drop command do?\n\n- [x] removes the most recent stash entry\n- [ ] deletes the stash\n- [ ] lists everything in the stash\n- [ ] throws away the oldest entry\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q60. What does the git stash drop command do?</h4>",
   "text": "Q60. What does the git stash drop command do?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "removes the most recent stash entry",
    "text": "removes the most recent stash entry"
   },
   {
    "isCorrect": false,
    "html": "deletes the stash",
    "text": "deletes the stash"
   },
   {
    "isCorrect": false,
    "html": "lists everything in the stash",
    "text": "lists everything in the stash"
   },
   {
    "isCorrect": false,
    "html": "throws away the oldest entry",
    "text": "throws away the oldest entry"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q61. What command creates a new branch from the currently checked-out branch?\n\n- [ ] `git -b checkout <nameOfBranch>`\n- [ ] `git branch`\n- [ ] `git checkout <nameOfBranch>`\n- [x] `git checkout -b <nameOfBranch>`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q61. What command creates a new branch from the currently checked-out branch?</h4>",
   "text": "Q61. What command creates a new branch from the currently checked-out branch?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git -b checkout &lt;nameOfBranch&gt;</code>",
    "text": "git -b checkout <nameOfBranch>"
   },
   {
    "isCorrect": false,
    "html": "<code>git branch</code>",
    "text": "git branch"
   },
   {
    "isCorrect": false,
    "html": "<code>git checkout &lt;nameOfBranch&gt;</code>",
    "text": "git checkout <nameOfBranch>"
   },
   {
    "isCorrect": true,
    "html": "<code>git checkout -b &lt;nameOfBranch&gt;</code>",
    "text": "git checkout -b <nameOfBranch>"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q62. After mistakenly staging a file named myFile to the index, how would you remove it from the index to exclude it from your next commit?\n\n- [ ] Use git reset HEAD^.\n- [x] Use git reset myFile.txt.\n- [ ] Use git -rm myFile.txt.\n- [ ] Use git reset.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q62. After mistakenly staging a file named myFile to the index, how would you remove it from the index to exclude it from your next commit?</h4>",
   "text": "Q62. After mistakenly staging a file named myFile to the index, how would you remove it from the index to exclude it from your next commit?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Use git reset HEAD^.",
    "text": "Use git reset HEAD^."
   },
   {
    "isCorrect": true,
    "html": "Use git reset myFile.txt.",
    "text": "Use git reset myFile.txt."
   },
   {
    "isCorrect": false,
    "html": "Use git -rm myFile.txt.",
    "text": "Use git -rm myFile.txt."
   },
   {
    "isCorrect": false,
    "html": "Use git reset.",
    "text": "Use git reset."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q63. What happens if you run this command from your master branch?\n\n```bash\ngit checkout -b beta-test\n```\n\n- [ ] The beta-test branch will be checked out of the current commit.\n- [ ] The beta-test branch will be checked out and deleted.\n- [x] A new branch called beta-test will be created and switched to.\n- [ ] The beta-test branch will be merged with the master branch.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q63. What happens if you run this command from your master branch?</h4>",
   "text": "Q63. What happens if you run this command from your master branch?"
  },
  "preformated": {
   "language": "bash",
   "html": "<pre><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> beta-test\n</code></pre>",
   "text": "git checkout -b beta-test\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The beta-test branch will be checked out of the current commit.",
    "text": "The beta-test branch will be checked out of the current commit."
   },
   {
    "isCorrect": false,
    "html": "The beta-test branch will be checked out and deleted.",
    "text": "The beta-test branch will be checked out and deleted."
   },
   {
    "isCorrect": true,
    "html": "A new branch called beta-test will be created and switched to.",
    "text": "A new branch called beta-test will be created and switched to."
   },
   {
    "isCorrect": false,
    "html": "The beta-test branch will be merged with the master branch.",
    "text": "The beta-test branch will be merged with the master branch."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q64. How does Git internally manage branches?\n\n- [x] by creating a pointer to the most recent snapshot/commit for the branch.\n- [ ] by creating a data array of branches in the same repository.\n- [ ] by creating a data dictionary of code changes.\n- [ ] be creating a debug log that stores repository changes.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q64. How does Git internally manage branches?</h4>",
   "text": "Q64. How does Git internally manage branches?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "by creating a pointer to the most recent snapshot/commit for the branch.",
    "text": "by creating a pointer to the most recent snapshot/commit for the branch."
   },
   {
    "isCorrect": false,
    "html": "by creating a data array of branches in the same repository.",
    "text": "by creating a data array of branches in the same repository."
   },
   {
    "isCorrect": false,
    "html": "by creating a data dictionary of code changes.",
    "text": "by creating a data dictionary of code changes."
   },
   {
    "isCorrect": false,
    "html": "be creating a debug log that stores repository changes.",
    "text": "be creating a debug log that stores repository changes."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q65. You want to perform a git reset but cannot recall all of the available options. What command would you use to see a description of them?\n\n- [x] git help reset\n- [ ] git -h reset\n- [ ] git options reset\n- [ ] git reset help\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q65. You want to perform a git reset but cannot recall all of the available options. What command would you use to see a description of them?</h4>",
   "text": "Q65. You want to perform a git reset but cannot recall all of the available options. What command would you use to see a description of them?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "git help reset",
    "text": "git help reset"
   },
   {
    "isCorrect": false,
    "html": "git -h reset",
    "text": "git -h reset"
   },
   {
    "isCorrect": false,
    "html": "git options reset",
    "text": "git options reset"
   },
   {
    "isCorrect": false,
    "html": "git reset help",
    "text": "git reset help"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q66. What is a remote repository?\n\n- [ ] a version of the repository that mirrors changes made in the local repository's master branch for open-source collaboration efforts\n- [ ] the lead repository elected by the Git arbitrator found within local repositories of collaborating team members\n- [ ] a read-only version of the repository stored on a backup server in case local repositories become lost or corrupted\n- [x] a version of the repository hosted on the internet or network that is pushed to or pulled from by collaborators\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q66. What is a remote repository?</h4>",
   "text": "Q66. What is a remote repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a version of the repository that mirrors changes made in the local repository's master branch for open-source collaboration efforts",
    "text": "a version of the repository that mirrors changes made in the local repository's master branch for open-source collaboration efforts"
   },
   {
    "isCorrect": false,
    "html": "the lead repository elected by the Git arbitrator found within local repositories of collaborating team members",
    "text": "the lead repository elected by the Git arbitrator found within local repositories of collaborating team members"
   },
   {
    "isCorrect": false,
    "html": "a read-only version of the repository stored on a backup server in case local repositories become lost or corrupted",
    "text": "a read-only version of the repository stored on a backup server in case local repositories become lost or corrupted"
   },
   {
    "isCorrect": true,
    "html": "a version of the repository hosted on the internet or network that is pushed to or pulled from by collaborators",
    "text": "a version of the repository hosted on the internet or network that is pushed to or pulled from by collaborators"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q67. After modifying some existing files in a repository, you decide to discard the changes. What command can you use?\n\n- [x] git restore\n- [ ] git undo\n- [ ] git clean\n- [ ] git checkout\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q67. After modifying some existing files in a repository, you decide to discard the changes. What command can you use?</h4>",
   "text": "Q67. After modifying some existing files in a repository, you decide to discard the changes. What command can you use?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "git restore",
    "text": "git restore"
   },
   {
    "isCorrect": false,
    "html": "git undo",
    "text": "git undo"
   },
   {
    "isCorrect": false,
    "html": "git clean",
    "text": "git clean"
   },
   {
    "isCorrect": false,
    "html": "git checkout",
    "text": "git checkout"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q68. After starting to merge a feature branch into your master branch, you encounter a merge conflict and decide you do not want to perform the merge. How can you stop the merge and restore to the pre-merge state?\n\n- [ ] Use git restore -p.\n- [ ] Use git merge -u.\n- [x] Use git merge --abort.\n- [ ] Use git merge --undo.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q68. After starting to merge a feature branch into your master branch, you encounter a merge conflict and decide you do not want to perform the merge. How can you stop the merge and restore to the pre-merge state?</h4>",
   "text": "Q68. After starting to merge a feature branch into your master branch, you encounter a merge conflict and decide you do not want to perform the merge. How can you stop the merge and restore to the pre-merge state?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Use git restore -p.",
    "text": "Use git restore -p."
   },
   {
    "isCorrect": false,
    "html": "Use git merge -u.",
    "text": "Use git merge -u."
   },
   {
    "isCorrect": true,
    "html": "Use git merge --abort.",
    "text": "Use git merge --abort."
   },
   {
    "isCorrect": false,
    "html": "Use git merge --undo.",
    "text": "Use git merge --undo."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q69. If you have several commits for a single feature, what is the most efficient way to restructure your commit history?\n\n- [ ] Use git stash to consolidate the commits under a new hash.\n- [x] Use git squash to consolidate the commits together into a single coherent commit.\n- [ ] Delete the task commits and recommit with a new message.\n- [ ] Use git cherry-pick to place the commits in another branch.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q69. If you have several commits for a single feature, what is the most efficient way to restructure your commit history?</h4>",
   "text": "Q69. If you have several commits for a single feature, what is the most efficient way to restructure your commit history?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Use git stash to consolidate the commits under a new hash.",
    "text": "Use git stash to consolidate the commits under a new hash."
   },
   {
    "isCorrect": true,
    "html": "Use git squash to consolidate the commits together into a single coherent commit.",
    "text": "Use git squash to consolidate the commits together into a single coherent commit."
   },
   {
    "isCorrect": false,
    "html": "Delete the task commits and recommit with a new message.",
    "text": "Delete the task commits and recommit with a new message."
   },
   {
    "isCorrect": false,
    "html": "Use git cherry-pick to place the commits in another branch.",
    "text": "Use git cherry-pick to place the commits in another branch."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q70. Which command correctly creates a lightweight tag?\n\n- [x] `git tag v3.8.1`\n- [ ] `git tag --light \"v3.8.1\"`\n- [ ] `git tag v3.8.1 —-annotate -m \"<tagMessage>\"`\n- [ ] `git tag -l v3.8.1`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q70. Which command correctly creates a lightweight tag?</h4>",
   "text": "Q70. Which command correctly creates a lightweight tag?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "<code>git tag v3.8.1</code>",
    "text": "git tag v3.8.1"
   },
   {
    "isCorrect": false,
    "html": "<code>git tag --light \"v3.8.1\"</code>",
    "text": "git tag --light \"v3.8.1\""
   },
   {
    "isCorrect": false,
    "html": "<code>git tag v3.8.1 —-annotate -m \"&lt;tagMessage&gt;\"</code>",
    "text": "git tag v3.8.1 —-annotate -m \"<tagMessage>\""
   },
   {
    "isCorrect": false,
    "html": "<code>git tag -l v3.8.1</code>",
    "text": "git tag -l v3.8.1"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q71. What is the main issue with using git rebase when working with multiple developers?\n\n- [ ] Rebase affects only your repository and creates a diff in the master branch.\n- [ ] Rebase creates a temporary copy of the master branch in the remote repo.\n- [ ] Rebase moves the HEAD of the remote master branch one commit forward.\n- [x] Rebase deletes all commit history for the new feature branch.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q71. What is the main issue with using git rebase when working with multiple developers?</h4>",
   "text": "Q71. What is the main issue with using git rebase when working with multiple developers?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Rebase affects only your repository and creates a diff in the master branch.",
    "text": "Rebase affects only your repository and creates a diff in the master branch."
   },
   {
    "isCorrect": false,
    "html": "Rebase creates a temporary copy of the master branch in the remote repo.",
    "text": "Rebase creates a temporary copy of the master branch in the remote repo."
   },
   {
    "isCorrect": false,
    "html": "Rebase moves the HEAD of the remote master branch one commit forward.",
    "text": "Rebase moves the HEAD of the remote master branch one commit forward."
   },
   {
    "isCorrect": true,
    "html": "Rebase deletes all commit history for the new feature branch.",
    "text": "Rebase deletes all commit history for the new feature branch."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q72. What Git workflow is used by teams that collaborate on a single branch and avoid creating long-lived development branches?\n\n- [ ] Git flow\n- [ ] Mainline flow\n- [x] Trunk-Based Development\n- [ ] GitHub flow\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q72. What Git workflow is used by teams that collaborate on a single branch and avoid creating long-lived development branches?</h4>",
   "text": "Q72. What Git workflow is used by teams that collaborate on a single branch and avoid creating long-lived development branches?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Git flow",
    "text": "Git flow"
   },
   {
    "isCorrect": false,
    "html": "Mainline flow",
    "text": "Mainline flow"
   },
   {
    "isCorrect": true,
    "html": "Trunk-Based Development",
    "text": "Trunk-Based Development"
   },
   {
    "isCorrect": false,
    "html": "GitHub flow",
    "text": "GitHub flow"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q73. Which option on the git log command allows you to limit output to commits made after certain date?\n\n- [x] `--since`\n- [ ] `--sinceWhen`\n- [ ] `-<n>`\n- [ ] `--afterDate`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q73. Which option on the git log command allows you to limit output to commits made after certain date?</h4>",
   "text": "Q73. Which option on the git log command allows you to limit output to commits made after certain date?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "<code>--since</code>",
    "text": "--since"
   },
   {
    "isCorrect": false,
    "html": "<code>--sinceWhen</code>",
    "text": "--sinceWhen"
   },
   {
    "isCorrect": false,
    "html": "<code>-&lt;n&gt;</code>",
    "text": "-<n>"
   },
   {
    "isCorrect": false,
    "html": "<code>--afterDate</code>",
    "text": "--afterDate"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q74. How would you delete unreachable objects older than a specified time from your project database?\n\n- [ ] `git cache --obsolete <time>`\n- [ ] `git branch --rebase <time>`\n- [ ] `git delete --inert <time>`\n- [x] `git prune --expire <time>`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q74. How would you delete unreachable objects older than a specified time from your project database?</h4>",
   "text": "Q74. How would you delete unreachable objects older than a specified time from your project database?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git cache --obsolete &lt;time&gt;</code>",
    "text": "git cache --obsolete <time>"
   },
   {
    "isCorrect": false,
    "html": "<code>git branch --rebase &lt;time&gt;</code>",
    "text": "git branch --rebase <time>"
   },
   {
    "isCorrect": false,
    "html": "<code>git delete --inert &lt;time&gt;</code>",
    "text": "git delete --inert <time>"
   },
   {
    "isCorrect": true,
    "html": "<code>git prune --expire &lt;time&gt;</code>",
    "text": "git prune --expire <time>"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q75. What conflicts can occur when forcing a push after rebasing?\n\n- [x] The remote master branch could have existing changes overwritten.\n- [ ] The origin URL will be reset to its default value.\n- [ ] The current HEAD will be deleted and can't be reinstated.\n- [ ] Nothing, it's common practice to force a push after rebasing.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q75. What conflicts can occur when forcing a push after rebasing?</h4>",
   "text": "Q75. What conflicts can occur when forcing a push after rebasing?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "The remote master branch could have existing changes overwritten.",
    "text": "The remote master branch could have existing changes overwritten."
   },
   {
    "isCorrect": false,
    "html": "The origin URL will be reset to its default value.",
    "text": "The origin URL will be reset to its default value."
   },
   {
    "isCorrect": false,
    "html": "The current HEAD will be deleted and can't be reinstated.",
    "text": "The current HEAD will be deleted and can't be reinstated."
   },
   {
    "isCorrect": false,
    "html": "Nothing, it's common practice to force a push after rebasing.",
    "text": "Nothing, it's common practice to force a push after rebasing."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q76. How does this command alter the currently checked-out branch?\n\n`git reset --soft HEAD^`\n\n- [ ] It resets the working branch to the first commit.\n- [x] It sets HEAD to previous commit and leaves changes from the undone commit in the stage/index.\n- [ ] It deletes all previous commits and resets the repository history back to its initial state.\n- [ ] It keeps the HEAD at the current commit, but clears all previous commits.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q76. How does this command alter the currently checked-out branch?</h4>",
   "text": "Q76. How does this command alter the currently checked-out branch?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It resets the working branch to the first commit.",
    "text": "It resets the working branch to the first commit."
   },
   {
    "isCorrect": true,
    "html": "It sets HEAD to previous commit and leaves changes from the undone commit in the stage/index.",
    "text": "It sets HEAD to previous commit and leaves changes from the undone commit in the stage/index."
   },
   {
    "isCorrect": false,
    "html": "It deletes all previous commits and resets the repository history back to its initial state.",
    "text": "It deletes all previous commits and resets the repository history back to its initial state."
   },
   {
    "isCorrect": false,
    "html": "It keeps the HEAD at the current commit, but clears all previous commits.",
    "text": "It keeps the HEAD at the current commit, but clears all previous commits."
   }
  ],
  "reference": {
   "html": "<p><code>git reset --soft HEAD^</code></p>",
   "text": "git reset --soft HEAD^"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q77. What is the difference between Git and SVN?\n\n- [ ] Git works only on Linux, while SVN works on all operating systems.\n- [ ] SVN works only on Linux, while Git works on all operating systems.\n- [x] SVN is a centralized system, while Git is a distributed system.\n- [ ] Git a centralized system, while SVN is a distributed system.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q77. What is the difference between Git and SVN?</h4>",
   "text": "Q77. What is the difference between Git and SVN?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Git works only on Linux, while SVN works on all operating systems.",
    "text": "Git works only on Linux, while SVN works on all operating systems."
   },
   {
    "isCorrect": false,
    "html": "SVN works only on Linux, while Git works on all operating systems.",
    "text": "SVN works only on Linux, while Git works on all operating systems."
   },
   {
    "isCorrect": true,
    "html": "SVN is a centralized system, while Git is a distributed system.",
    "text": "SVN is a centralized system, while Git is a distributed system."
   },
   {
    "isCorrect": false,
    "html": "Git a centralized system, while SVN is a distributed system.",
    "text": "Git a centralized system, while SVN is a distributed system."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q78. This command is an example of what kind of tag?\n\n`git tag -a v1.4 -m \"ABCD v1.5\"`\n\n- [ ] verbose\n- [x] annotated\n- [ ] lightweight\n- [ ] deferred\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q78. This command is an example of what kind of tag?</h4>",
   "text": "Q78. This command is an example of what kind of tag?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "verbose",
    "text": "verbose"
   },
   {
    "isCorrect": true,
    "html": "annotated",
    "text": "annotated"
   },
   {
    "isCorrect": false,
    "html": "lightweight",
    "text": "lightweight"
   },
   {
    "isCorrect": false,
    "html": "deferred",
    "text": "deferred"
   }
  ],
  "reference": {
   "html": "<p><code>git tag -a v1.4 -m \"ABCD v1.5\"</code></p>",
   "text": "git tag -a v1.4 -m \"ABCD v1.5\""
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q79. What is the difference between a soft reset (`git reset --soft`) and a hard reset (`git reset –hard`) ?\n\n- [x] A soft reset only changes the commit that HEAD points to, while a hard reset resets the index and working tree to match the specified commit, discarding any changes.\n- [ ] A soft reset caches the old HEAD pointer, while a hard reset deletes it entirely.\n- [ ] A hard reset changes only where the HEAD is pointing, while a soft reset changes the HEAD and index.\n- [ ] A hard reset caches the old HEAD pointer, while a soft reset deletes it entirely.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q79. What is the difference between a soft reset (<code>git reset --soft</code>) and a hard reset (<code>git reset –hard</code>) ?</h4>",
   "text": "Q79. What is the difference between a soft reset (git reset --soft) and a hard reset (git reset –hard) ?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "A soft reset only changes the commit that HEAD points to, while a hard reset resets the index and working tree to match the specified commit, discarding any changes.",
    "text": "A soft reset only changes the commit that HEAD points to, while a hard reset resets the index and working tree to match the specified commit, discarding any changes."
   },
   {
    "isCorrect": false,
    "html": "A soft reset caches the old HEAD pointer, while a hard reset deletes it entirely.",
    "text": "A soft reset caches the old HEAD pointer, while a hard reset deletes it entirely."
   },
   {
    "isCorrect": false,
    "html": "A hard reset changes only where the HEAD is pointing, while a soft reset changes the HEAD and index.",
    "text": "A hard reset changes only where the HEAD is pointing, while a soft reset changes the HEAD and index."
   },
   {
    "isCorrect": false,
    "html": "A hard reset caches the old HEAD pointer, while a soft reset deletes it entirely.",
    "text": "A hard reset caches the old HEAD pointer, while a soft reset deletes it entirely."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q81. What information does the git config file store?\n\n- [ ] shell scripts and flags\n- [ ] keychain and account information\n- [x] local and global repository options\n- [ ] pre-compile scripts and settings\n\n[Reference](https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config#:~:text=The%20git%20config%20command%20is,modify%20a%20configuration%20text%20file.)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q81. What information does the git config file store?</h4>",
   "text": "Q81. What information does the git config file store?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "shell scripts and flags",
    "text": "shell scripts and flags"
   },
   {
    "isCorrect": false,
    "html": "keychain and account information",
    "text": "keychain and account information"
   },
   {
    "isCorrect": true,
    "html": "local and global repository options",
    "text": "local and global repository options"
   },
   {
    "isCorrect": false,
    "html": "pre-compile scripts and settings",
    "text": "pre-compile scripts and settings"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config#:~:text=The%20git%20config%20command%20is,modify%20a%20configuration%20text%20file.\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q82. What is version control?\n\n- [ ] a type of architecture used to manage large databases\n- [x] a system that shows, tracks, and controls changes to a set of files over time\n- [ ] a programmatic design pattern used to manage code between multiple engineering teams\n- [ ] a type of software that links a project with a GitHub repository\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q82. What is version control?</h4>",
   "text": "Q82. What is version control?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a type of architecture used to manage large databases",
    "text": "a type of architecture used to manage large databases"
   },
   {
    "isCorrect": true,
    "html": "a system that shows, tracks, and controls changes to a set of files over time",
    "text": "a system that shows, tracks, and controls changes to a set of files over time"
   },
   {
    "isCorrect": false,
    "html": "a programmatic design pattern used to manage code between multiple engineering teams",
    "text": "a programmatic design pattern used to manage code between multiple engineering teams"
   },
   {
    "isCorrect": false,
    "html": "a type of software that links a project with a GitHub repository",
    "text": "a type of software that links a project with a GitHub repository"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q83. What is the difference between using the git stash and git stash pop commands?\n\n- [ ] git stash removes a commit from the repo history, while git stash pop saves changes to multiple branches.\n- [ ] git stash saves changes to multiple branches, while git stash pop removes a commit from the repo history.\n- [ ] git stash removes the most recent commit, while git stash pop saves current changes.\n- [x] git stash creates a stash entry, while git stash pop places the saved state onto the working directory.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q83. What is the difference between using the git stash and git stash pop commands?</h4>",
   "text": "Q83. What is the difference between using the git stash and git stash pop commands?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git stash removes a commit from the repo history, while git stash pop saves changes to multiple branches.",
    "text": "git stash removes a commit from the repo history, while git stash pop saves changes to multiple branches."
   },
   {
    "isCorrect": false,
    "html": "git stash saves changes to multiple branches, while git stash pop removes a commit from the repo history.",
    "text": "git stash saves changes to multiple branches, while git stash pop removes a commit from the repo history."
   },
   {
    "isCorrect": false,
    "html": "git stash removes the most recent commit, while git stash pop saves current changes.",
    "text": "git stash removes the most recent commit, while git stash pop saves current changes."
   },
   {
    "isCorrect": true,
    "html": "git stash creates a stash entry, while git stash pop places the saved state onto the working directory.",
    "text": "git stash creates a stash entry, while git stash pop places the saved state onto the working directory."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q84. Which command can be used to list the branches that have been merged into the currently checked-out branch?\n\n- [ ] git master --status\n- [ ] git branch --status\n- [x] git branch --merged\n- [ ] git status --merged\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q84. Which command can be used to list the branches that have been merged into the currently checked-out branch?</h4>",
   "text": "Q84. Which command can be used to list the branches that have been merged into the currently checked-out branch?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git master --status",
    "text": "git master --status"
   },
   {
    "isCorrect": false,
    "html": "git branch --status",
    "text": "git branch --status"
   },
   {
    "isCorrect": true,
    "html": "git branch --merged",
    "text": "git branch --merged"
   },
   {
    "isCorrect": false,
    "html": "git status --merged",
    "text": "git status --merged"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q85. How would you configure Git to abort a commit if a smoke test script fails?\n\n- [ ] Create a post-commit shell script that triggers the action.\n- [ ] Create a post-commit hook to trigger the script.\n- [x] Create a pre-commit hook to trigger the script.\n- [ ] Create a pre-commit shell script that triggers the action.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q85. How would you configure Git to abort a commit if a smoke test script fails?</h4>",
   "text": "Q85. How would you configure Git to abort a commit if a smoke test script fails?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Create a post-commit shell script that triggers the action.",
    "text": "Create a post-commit shell script that triggers the action."
   },
   {
    "isCorrect": false,
    "html": "Create a post-commit hook to trigger the script.",
    "text": "Create a post-commit hook to trigger the script."
   },
   {
    "isCorrect": true,
    "html": "Create a pre-commit hook to trigger the script.",
    "text": "Create a pre-commit hook to trigger the script."
   },
   {
    "isCorrect": false,
    "html": "Create a pre-commit shell script that triggers the action.",
    "text": "Create a pre-commit shell script that triggers the action."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q86. Which use case is NOT a good candidate for a Git hook?\n\n- [x] state dependent environment changes\n- [ ] continuous integration\n- [ ] increasing code coverage\n- [ ] enforcing commit rules\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q86. Which use case is NOT a good candidate for a Git hook?</h4>",
   "text": "Q86. Which use case is NOT a good candidate for a Git hook?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "state dependent environment changes",
    "text": "state dependent environment changes"
   },
   {
    "isCorrect": false,
    "html": "continuous integration",
    "text": "continuous integration"
   },
   {
    "isCorrect": false,
    "html": "increasing code coverage",
    "text": "increasing code coverage"
   },
   {
    "isCorrect": false,
    "html": "enforcing commit rules",
    "text": "enforcing commit rules"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q87. After starting to work on a new feature and creating new files in the working directory related to it, the customer determined the feature was no longer required. What command can be used to remove the untracked files from the working directory ?\n\n- [x] `git clean -f`\n- [ ] `git rm .`\n- [ ] `git reset HEAD`\n- [ ] `git checkout .`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q87. After starting to work on a new feature and creating new files in the working directory related to it, the customer determined the feature was no longer required. What command can be used to remove the untracked files from the working directory ?</h4>",
   "text": "Q87. After starting to work on a new feature and creating new files in the working directory related to it, the customer determined the feature was no longer required. What command can be used to remove the untracked files from the working directory ?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "<code>git clean -f</code>",
    "text": "git clean -f"
   },
   {
    "isCorrect": false,
    "html": "<code>git rm .</code>",
    "text": "git rm ."
   },
   {
    "isCorrect": false,
    "html": "<code>git reset HEAD</code>",
    "text": "git reset HEAD"
   },
   {
    "isCorrect": false,
    "html": "<code>git checkout .</code>",
    "text": "git checkout ."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q88. What information do Git reflogs (reference logs) store?\n\n- [ ] shell script pointers and keychain credentials\n- [x] updates to branch tips and other references in the local repository\n- [ ] release notes and hook script values\n- [ ] tag and versioning information\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q88. What information do Git reflogs (reference logs) store?</h4>",
   "text": "Q88. What information do Git reflogs (reference logs) store?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "shell script pointers and keychain credentials",
    "text": "shell script pointers and keychain credentials"
   },
   {
    "isCorrect": true,
    "html": "updates to branch tips and other references in the local repository",
    "text": "updates to branch tips and other references in the local repository"
   },
   {
    "isCorrect": false,
    "html": "release notes and hook script values",
    "text": "release notes and hook script values"
   },
   {
    "isCorrect": false,
    "html": "tag and versioning information",
    "text": "tag and versioning information"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q89. You have just completed rebasing your master branch and need to manually update the remote master, even though there is a merge conflict. How can you accomplish this?\n\n- [ ] `git push --overwrite`\n- [ ] `git push --update`\n- [ ] `git push --assert`\n- [x] `git push --force-with-lease`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q89. You have just completed rebasing your master branch and need to manually update the remote master, even though there is a merge conflict. How can you accomplish this?</h4>",
   "text": "Q89. You have just completed rebasing your master branch and need to manually update the remote master, even though there is a merge conflict. How can you accomplish this?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git push --overwrite</code>",
    "text": "git push --overwrite"
   },
   {
    "isCorrect": false,
    "html": "<code>git push --update</code>",
    "text": "git push --update"
   },
   {
    "isCorrect": false,
    "html": "<code>git push --assert</code>",
    "text": "git push --assert"
   },
   {
    "isCorrect": true,
    "html": "<code>git push --force-with-lease</code>",
    "text": "git push --force-with-lease"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q90. What is the difference between `git fetch` and `git pull`\n\n- [ ] `git fetch` creates a new branch off the master branch, while `git pull` creates a new branch off the local repository's master branch.\n- [ ] `git pull` downloads new data from a remote repository without integrating it into local files, while `git fetch` updates the current HEAD branch with the latest changes from the remote server.\n- [x] `git fetch` updates remote tracking branches with changes from a remote repository, while `git pull` updates remote tracking branches with changes from a remote repository and merges them into their corresponding local branches.\n- [ ] `git fetch` downloads and merges data from the local repository, while `git pull` informs your colleagues you are about to make changes to the master branch.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q90. What is the difference between <code>git fetch</code> and <code>git pull</code></h4>",
   "text": "Q90. What is the difference between git fetch and git pull"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git fetch</code> creates a new branch off the master branch, while <code>git pull</code> creates a new branch off the local repository's master branch.",
    "text": "git fetch creates a new branch off the master branch, while git pull creates a new branch off the local repository's master branch."
   },
   {
    "isCorrect": false,
    "html": "<code>git pull</code> downloads new data from a remote repository without integrating it into local files, while <code>git fetch</code> updates the current HEAD branch with the latest changes from the remote server.",
    "text": "git pull downloads new data from a remote repository without integrating it into local files, while git fetch updates the current HEAD branch with the latest changes from the remote server."
   },
   {
    "isCorrect": true,
    "html": "<code>git fetch</code> updates remote tracking branches with changes from a remote repository, while <code>git pull</code> updates remote tracking branches with changes from a remote repository and merges them into their corresponding local branches.",
    "text": "git fetch updates remote tracking branches with changes from a remote repository, while git pull updates remote tracking branches with changes from a remote repository and merges them into their corresponding local branches."
   },
   {
    "isCorrect": false,
    "html": "<code>git fetch</code> downloads and merges data from the local repository, while <code>git pull</code> informs your colleagues you are about to make changes to the master branch.",
    "text": "git fetch downloads and merges data from the local repository, while git pull informs your colleagues you are about to make changes to the master branch."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q91. What command displays the difference between the working tree and the stage/index area, as well as files not tracked by Git?\n\n- [ ] `git current`\n- [x] `git status`\n- [ ] `git local`\n- [ ] `git context`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q91. What command displays the difference between the working tree and the stage/index area, as well as files not tracked by Git?</h4>",
   "text": "Q91. What command displays the difference between the working tree and the stage/index area, as well as files not tracked by Git?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git current</code>",
    "text": "git current"
   },
   {
    "isCorrect": true,
    "html": "<code>git status</code>",
    "text": "git status"
   },
   {
    "isCorrect": false,
    "html": "<code>git local</code>",
    "text": "git local"
   },
   {
    "isCorrect": false,
    "html": "<code>git context</code>",
    "text": "git context"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q92. You would like to restore some previously stashed work to a new branch. How can you do that?\n\n- [ ] Use `git branch <stash hash>`.\n- [ ] Add the stashed commits to the current commit, then create a new branch.\n- [ ] Use `git checkout -b`.\n- [x] Run `git stash branch <branch name>`.\n\n[reference here](https://stackoverflow.com/questions/6925099/git-stash-changes-apply-to-new-branch)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q92. You would like to restore some previously stashed work to a new branch. How can you do that?</h4>",
   "text": "Q92. You would like to restore some previously stashed work to a new branch. How can you do that?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Use <code>git branch &lt;stash hash&gt;</code>.",
    "text": "Use git branch <stash hash>."
   },
   {
    "isCorrect": false,
    "html": "Add the stashed commits to the current commit, then create a new branch.",
    "text": "Add the stashed commits to the current commit, then create a new branch."
   },
   {
    "isCorrect": false,
    "html": "Use <code>git checkout -b</code>.",
    "text": "Use git checkout -b."
   },
   {
    "isCorrect": true,
    "html": "Run <code>git stash branch &lt;branch name&gt;</code>.",
    "text": "Run git stash branch <branch name>."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/questions/6925099/git-stash-changes-apply-to-new-branch\">reference here</a></p>",
   "text": "reference here"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q93. What is the difference between git branch -d and git branch -D?\n\n- [ ] -D deletes the local branch, while -d deletes the branch regardless of push and merge status.\n- [ ] -d deletes the current commit head, while -D deletes the entire branch.\n- [x] -d deletes the local branch, while -D deletes the local branch regardless of push and merge status.\n- [ ] -D deletes the current commit head, while -d deletes the entire branch.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q93. What is the difference between git branch -d and git branch -D?</h4>",
   "text": "Q93. What is the difference between git branch -d and git branch -D?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "-D deletes the local branch, while -d deletes the branch regardless of push and merge status.",
    "text": "-D deletes the local branch, while -d deletes the branch regardless of push and merge status."
   },
   {
    "isCorrect": false,
    "html": "-d deletes the current commit head, while -D deletes the entire branch.",
    "text": "-d deletes the current commit head, while -D deletes the entire branch."
   },
   {
    "isCorrect": true,
    "html": "-d deletes the local branch, while -D deletes the local branch regardless of push and merge status.",
    "text": "-d deletes the local branch, while -D deletes the local branch regardless of push and merge status."
   },
   {
    "isCorrect": false,
    "html": "-D deletes the current commit head, while -d deletes the entire branch.",
    "text": "-D deletes the current commit head, while -d deletes the entire branch."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q94. You stashed three sets of changes but cannot remember the contents of the first stash entry. What command would you use to see the details of the changes in the first of the three stash entries?\n\n- [x] git stash show -p stash@{2}\n- [ ] git stash list\n- [ ] git stash show -p stash@{1}\n- [ ] git stash show -p\n\n[reference here](https://stackoverflow.com/questions/10725729/see-whats-in-a-stash-without-applying-it)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q94. You stashed three sets of changes but cannot remember the contents of the first stash entry. What command would you use to see the details of the changes in the first of the three stash entries?</h4>",
   "text": "Q94. You stashed three sets of changes but cannot remember the contents of the first stash entry. What command would you use to see the details of the changes in the first of the three stash entries?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "git stash show -p stash@{2}",
    "text": "git stash show -p stash@{2}"
   },
   {
    "isCorrect": false,
    "html": "git stash list",
    "text": "git stash list"
   },
   {
    "isCorrect": false,
    "html": "git stash show -p stash@{1}",
    "text": "git stash show -p stash@{1}"
   },
   {
    "isCorrect": false,
    "html": "git stash show -p",
    "text": "git stash show -p"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/questions/10725729/see-whats-in-a-stash-without-applying-it\">reference here</a></p>",
   "text": "reference here"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q95. How would you delete a remote branch in your repository?\n\n- [ ] Use `git --delete <branch_name>`.\n- [ ] Use `git push <remote_name> --d <branch_name>`.\n- [ ] Use `git push <remote_name> --D`.\n- [x] Use `git push <remote_name> --delete <branch_name>`.\n\n[reference here](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q95. How would you delete a remote branch in your repository?</h4>",
   "text": "Q95. How would you delete a remote branch in your repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Use <code>git --delete &lt;branch_name&gt;</code>.",
    "text": "Use git --delete <branch_name>."
   },
   {
    "isCorrect": false,
    "html": "Use <code>git push &lt;remote_name&gt; --d &lt;branch_name&gt;</code>.",
    "text": "Use git push <remote_name> --d <branch_name>."
   },
   {
    "isCorrect": false,
    "html": "Use <code>git push &lt;remote_name&gt; --D</code>.",
    "text": "Use git push <remote_name> --D."
   },
   {
    "isCorrect": true,
    "html": "Use <code>git push &lt;remote_name&gt; --delete &lt;branch_name&gt;</code>.",
    "text": "Use git push <remote_name> --delete <branch_name>."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely\">reference here</a></p>",
   "text": "reference here"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q96. What is the default setting of `git reflog` when no subcommands are specified?\n\n- [ ] delete\n- [ ] expire\n- [x] show\n- [ ] update\n\n[reference here](https://git-scm.com/docs/git-reflog)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q96. What is the default setting of <code>git reflog</code> when no subcommands are specified?</h4>",
   "text": "Q96. What is the default setting of git reflog when no subcommands are specified?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "delete",
    "text": "delete"
   },
   {
    "isCorrect": false,
    "html": "expire",
    "text": "expire"
   },
   {
    "isCorrect": true,
    "html": "show",
    "text": "show"
   },
   {
    "isCorrect": false,
    "html": "update",
    "text": "update"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://git-scm.com/docs/git-reflog\">reference here</a></p>",
   "text": "reference here"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q97. How does the `-p` option change the behavior of the `git add` command\n\n- [ ] It causes tracked files in the parent directory to be included in the staged files.\n- [x] It allows developers to interactively choose which changes to tracked files are staged and outputs the differences for review.\n- [ ] It automatically pushes changes to the corresponding branch on the remote repository.\n- [ ] It allows developers to interactively choose which files are committed and outputs the differences for review.\n\n[reference here](https://git-scm.com/docs/git-add#Documentation/git-add.txt--p)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q97. How does the <code>-p</code> option change the behavior of the <code>git add</code> command</h4>",
   "text": "Q97. How does the -p option change the behavior of the git add command"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It causes tracked files in the parent directory to be included in the staged files.",
    "text": "It causes tracked files in the parent directory to be included in the staged files."
   },
   {
    "isCorrect": true,
    "html": "It allows developers to interactively choose which changes to tracked files are staged and outputs the differences for review.",
    "text": "It allows developers to interactively choose which changes to tracked files are staged and outputs the differences for review."
   },
   {
    "isCorrect": false,
    "html": "It automatically pushes changes to the corresponding branch on the remote repository.",
    "text": "It automatically pushes changes to the corresponding branch on the remote repository."
   },
   {
    "isCorrect": false,
    "html": "It allows developers to interactively choose which files are committed and outputs the differences for review.",
    "text": "It allows developers to interactively choose which files are committed and outputs the differences for review."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://git-scm.com/docs/git-add#Documentation/git-add.txt--p\">reference here</a></p>",
   "text": "reference here"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q98. After checking out a specific commit, you receive a warning message indicating You are in 'detached HEAD' state. What is Git warning you of?\n\n- [x] You are not working on the most recent commit of a branch.\n- [ ] A teammate has flagged the code with an issue.\n- [ ] The commit does not have a parent.\n- [ ] The branch has not been pushed to the remote repository.\n\n[reference here](https://www.git-tower.com/learn/git/faq/detached-head-when-checkout-commit)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q98. After checking out a specific commit, you receive a warning message indicating You are in 'detached HEAD' state. What is Git warning you of?</h4>",
   "text": "Q98. After checking out a specific commit, you receive a warning message indicating You are in 'detached HEAD' state. What is Git warning you of?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "You are not working on the most recent commit of a branch.",
    "text": "You are not working on the most recent commit of a branch."
   },
   {
    "isCorrect": false,
    "html": "A teammate has flagged the code with an issue.",
    "text": "A teammate has flagged the code with an issue."
   },
   {
    "isCorrect": false,
    "html": "The commit does not have a parent.",
    "text": "The commit does not have a parent."
   },
   {
    "isCorrect": false,
    "html": "The branch has not been pushed to the remote repository.",
    "text": "The branch has not been pushed to the remote repository."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.git-tower.com/learn/git/faq/detached-head-when-checkout-commit\">reference here</a></p>",
   "text": "reference here"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q99. After accidentally deleting a branch in your local repository, how can you recover it?\n\n- [ ] It cannot be recovered.\n- [ ] Find the hash of the branch with the `log` command, then execute `git checkout -b <branchname> <hash>`.\n- [x] Find the hash of the branch with the `reflog` command, then execute `git checkout -b <branchname> <hash>`.\n- [ ] Execute `git checkout -b <branchname>`.\n\n[Reference](https://stackoverflow.com/questions/1992364/git-recover-deleted-remote-branch)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q99. After accidentally deleting a branch in your local repository, how can you recover it?</h4>",
   "text": "Q99. After accidentally deleting a branch in your local repository, how can you recover it?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It cannot be recovered.",
    "text": "It cannot be recovered."
   },
   {
    "isCorrect": false,
    "html": "Find the hash of the branch with the <code>log</code> command, then execute <code>git checkout -b &lt;branchname&gt; &lt;hash&gt;</code>.",
    "text": "Find the hash of the branch with the log command, then execute git checkout -b <branchname> <hash>."
   },
   {
    "isCorrect": true,
    "html": "Find the hash of the branch with the <code>reflog</code> command, then execute <code>git checkout -b &lt;branchname&gt; &lt;hash&gt;</code>.",
    "text": "Find the hash of the branch with the reflog command, then execute git checkout -b <branchname> <hash>."
   },
   {
    "isCorrect": false,
    "html": "Execute <code>git checkout -b &lt;branchname&gt;</code>.",
    "text": "Execute git checkout -b <branchname>."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/questions/1992364/git-recover-deleted-remote-branch\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q100. How would you display a histogram showing inserts, deletion, and modifications per file for a specific commit along with its general commit information?\n\n- [ ] Use `git stat`.\n- [ ] Use `git debug --prettyprint`.\n- [ ] Query the remote repository with the commit hash.\n- [x] Use `git show <commit> --stat`.\n\n[Reference](https://git-scm.com/docs/git-show#Documentation/git-show.txt---statltwidthgtltname-widthgtltcountgt)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q100. How would you display a histogram showing inserts, deletion, and modifications per file for a specific commit along with its general commit information?</h4>",
   "text": "Q100. How would you display a histogram showing inserts, deletion, and modifications per file for a specific commit along with its general commit information?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Use <code>git stat</code>.",
    "text": "Use git stat."
   },
   {
    "isCorrect": false,
    "html": "Use <code>git debug --prettyprint</code>.",
    "text": "Use git debug --prettyprint."
   },
   {
    "isCorrect": false,
    "html": "Query the remote repository with the commit hash.",
    "text": "Query the remote repository with the commit hash."
   },
   {
    "isCorrect": true,
    "html": "Use <code>git show &lt;commit&gt; --stat</code>.",
    "text": "Use git show <commit> --stat."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://git-scm.com/docs/git-show#Documentation/git-show.txt---statltwidthgtltname-widthgtltcountgt\">Reference</a></p>",
   "text": "Reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q101. What features do repository managers such as GitHub provide beyond Git?\n\n- [ ] Repository managers are proprietary versions of Git that do not include enhanced features.\n- [ ] Repository managers provide an enhanced command-line tool that is used to manage multiple local repositories.\n- [x] Repository managers provide an online service for hosting Git repositories that include collaboration features such as pull requests, issue tracking, and peer reviews.\n- [ ] Repository managers distribute repositories across multiple locations on a user's workstation, providing redundant storage that allows for quick backup and recovery.\n\n[reference](https://www.theserverside.com/video/Git-vs-GitHub-What-is-the-difference-between-them)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q101. What features do repository managers such as GitHub provide beyond Git?</h4>",
   "text": "Q101. What features do repository managers such as GitHub provide beyond Git?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Repository managers are proprietary versions of Git that do not include enhanced features.",
    "text": "Repository managers are proprietary versions of Git that do not include enhanced features."
   },
   {
    "isCorrect": false,
    "html": "Repository managers provide an enhanced command-line tool that is used to manage multiple local repositories.",
    "text": "Repository managers provide an enhanced command-line tool that is used to manage multiple local repositories."
   },
   {
    "isCorrect": true,
    "html": "Repository managers provide an online service for hosting Git repositories that include collaboration features such as pull requests, issue tracking, and peer reviews.",
    "text": "Repository managers provide an online service for hosting Git repositories that include collaboration features such as pull requests, issue tracking, and peer reviews."
   },
   {
    "isCorrect": false,
    "html": "Repository managers distribute repositories across multiple locations on a user's workstation, providing redundant storage that allows for quick backup and recovery.",
    "text": "Repository managers distribute repositories across multiple locations on a user's workstation, providing redundant storage that allows for quick backup and recovery."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.theserverside.com/video/Git-vs-GitHub-What-is-the-difference-between-them\">reference</a></p>",
   "text": "reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q102. What command finds the HEAD of the current branch?\n\n- [ ] `git head --verify`\n- [ ] `git log --head`\n- [ ] `git hash --head`\n- [x] `git show-ref --head`\n\n[reference](https://git-scm.com/docs/git-show-ref)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q102. What command finds the HEAD of the current branch?</h4>",
   "text": "Q102. What command finds the HEAD of the current branch?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git head --verify</code>",
    "text": "git head --verify"
   },
   {
    "isCorrect": false,
    "html": "<code>git log --head</code>",
    "text": "git log --head"
   },
   {
    "isCorrect": false,
    "html": "<code>git hash --head</code>",
    "text": "git hash --head"
   },
   {
    "isCorrect": true,
    "html": "<code>git show-ref --head</code>",
    "text": "git show-ref --head"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://git-scm.com/docs/git-show-ref\">reference</a></p>",
   "text": "reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q103. When Git Workflows contain a long-running branch, what purpose does the long-running branch serve?\n\n- [ ] Long-running branches store unstable code until it os peer reviewed for integration into a feature branch.\n- [ ] Long-running branches correspond to agile sprints and are used to store related to features developed in the sprint.\n- [ ] Long-running branches contain code related to experimental feature development that is merged into short-lived branches such as master.\n- [x] Long-running branches correspond to different stages of development and are always open for topic/feature branches to be pulled into.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q103. When Git Workflows contain a long-running branch, what purpose does the long-running branch serve?</h4>",
   "text": "Q103. When Git Workflows contain a long-running branch, what purpose does the long-running branch serve?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Long-running branches store unstable code until it os peer reviewed for integration into a feature branch.",
    "text": "Long-running branches store unstable code until it os peer reviewed for integration into a feature branch."
   },
   {
    "isCorrect": false,
    "html": "Long-running branches correspond to agile sprints and are used to store related to features developed in the sprint.",
    "text": "Long-running branches correspond to agile sprints and are used to store related to features developed in the sprint."
   },
   {
    "isCorrect": false,
    "html": "Long-running branches contain code related to experimental feature development that is merged into short-lived branches such as master.",
    "text": "Long-running branches contain code related to experimental feature development that is merged into short-lived branches such as master."
   },
   {
    "isCorrect": true,
    "html": "Long-running branches correspond to different stages of development and are always open for topic/feature branches to be pulled into.",
    "text": "Long-running branches correspond to different stages of development and are always open for topic/feature branches to be pulled into."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q104. What command takes changes from the master branch on the remote repository origin and merges then to the local checked-out branch?\n\n- [ ] `git commit -u origin`\n- [ ] `git checkout origin`\n- [x] `git pull origin master`\n- [ ] `git push origin master`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q104. What command takes changes from the master branch on the remote repository origin and merges then to the local checked-out branch?</h4>",
   "text": "Q104. What command takes changes from the master branch on the remote repository origin and merges then to the local checked-out branch?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git commit -u origin</code>",
    "text": "git commit -u origin"
   },
   {
    "isCorrect": false,
    "html": "<code>git checkout origin</code>",
    "text": "git checkout origin"
   },
   {
    "isCorrect": true,
    "html": "<code>git pull origin master</code>",
    "text": "git pull origin master"
   },
   {
    "isCorrect": false,
    "html": "<code>git push origin master</code>",
    "text": "git push origin master"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q105. While pushing changes to a remote repository, you receive the following message. How do you resolve this issue?\n\n```bash\nerror: failed to push some refs to 'https://github.com/myrepo/simple.git'\nhint: Updates were rejected because the remote contains work that you do not hint: not have locally.\n```\n\n- [ ] Use the --atomic option with the push command.\n- [x] Execute a pull, then resolve any merge conflicts and execute another push.\n- [ ] Execute a fetch, then execute another push.\n- [ ] Use the --force option with the push command.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q105. While pushing changes to a remote repository, you receive the following message. How do you resolve this issue?</h4>",
   "text": "Q105. While pushing changes to a remote repository, you receive the following message. How do you resolve this issue?"
  },
  "preformated": {
   "language": "bash",
   "html": "<pre><code class=\"language-bash\">error: failed to push some refs to <span class=\"token string\">'https://github.com/myrepo/simple.git'</span>\nhint: Updates were rejected because the remote contains work that you <span class=\"token keyword\">do</span> not hint: not have locally.\n</code></pre>",
   "text": "error: failed to push some refs to 'https://github.com/myrepo/simple.git'\nhint: Updates were rejected because the remote contains work that you do not hint: not have locally.\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Use the --atomic option with the push command.",
    "text": "Use the --atomic option with the push command."
   },
   {
    "isCorrect": true,
    "html": "Execute a pull, then resolve any merge conflicts and execute another push.",
    "text": "Execute a pull, then resolve any merge conflicts and execute another push."
   },
   {
    "isCorrect": false,
    "html": "Execute a fetch, then execute another push.",
    "text": "Execute a fetch, then execute another push."
   },
   {
    "isCorrect": false,
    "html": "Use the --force option with the push command.",
    "text": "Use the --force option with the push command."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q106. What does the -p option add to the output of the `git log` command?\n\n- [x] It adds patch output that shows the differences introduced in each commit.\n- [ ] It adds patch output that shows a summary listing modified files.\n- [ ] It adds padding to the output and displays a histogram showing the number of lines changed in each commit.\n- [ ] It adds the full commit message and notes associated with each commit.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q106. What does the -p option add to the output of the <code>git log</code> command?</h4>",
   "text": "Q106. What does the -p option add to the output of the git log command?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "It adds patch output that shows the differences introduced in each commit.",
    "text": "It adds patch output that shows the differences introduced in each commit."
   },
   {
    "isCorrect": false,
    "html": "It adds patch output that shows a summary listing modified files.",
    "text": "It adds patch output that shows a summary listing modified files."
   },
   {
    "isCorrect": false,
    "html": "It adds padding to the output and displays a histogram showing the number of lines changed in each commit.",
    "text": "It adds padding to the output and displays a histogram showing the number of lines changed in each commit."
   },
   {
    "isCorrect": false,
    "html": "It adds the full commit message and notes associated with each commit.",
    "text": "It adds the full commit message and notes associated with each commit."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q107. What is the staging area or index?\n\n- [ ] an area that stores commits prior to them being pushed to the remote repository\n- [ ] an area containing stash entries that can applied to the working files\n- [ ] an area where changes from a branch in the remote repository are stored before they are applied to a local branch\n- [x] an area that stores information about changes that will be included in the next commit\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q107. What is the staging area or index?</h4>",
   "text": "Q107. What is the staging area or index?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "an area that stores commits prior to them being pushed to the remote repository",
    "text": "an area that stores commits prior to them being pushed to the remote repository"
   },
   {
    "isCorrect": false,
    "html": "an area containing stash entries that can applied to the working files",
    "text": "an area containing stash entries that can applied to the working files"
   },
   {
    "isCorrect": false,
    "html": "an area where changes from a branch in the remote repository are stored before they are applied to a local branch",
    "text": "an area where changes from a branch in the remote repository are stored before they are applied to a local branch"
   },
   {
    "isCorrect": true,
    "html": "an area that stores information about changes that will be included in the next commit",
    "text": "an area that stores information about changes that will be included in the next commit"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q108. What command would you use to stage changes to the index strictly for properties files in the current directory?\n\n- [x] `git add *.properties`\n- [ ] `git add %.properties`\n- [ ] `git add .properties`\n- [ ] `git add properties`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q108. What command would you use to stage changes to the index strictly for properties files in the current directory?</h4>",
   "text": "Q108. What command would you use to stage changes to the index strictly for properties files in the current directory?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "<code>git add *.properties</code>",
    "text": "git add *.properties"
   },
   {
    "isCorrect": false,
    "html": "<code>git add %.properties</code>",
    "text": "git add %.properties"
   },
   {
    "isCorrect": false,
    "html": "<code>git add .properties</code>",
    "text": "git add .properties"
   },
   {
    "isCorrect": false,
    "html": "<code>git add properties</code>",
    "text": "git add properties"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q109. What are untracked files?\n\n- [ ] files in the local repository that have not been merged into the master branch\n- [ ] staged files that Git does not know about because the have not been committed\n- [x] files in the working directory that Git does not know about because the have not been staged or committed\n- [ ] files in the remote repository that Git does not know about because they have not been tagged\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q109. What are untracked files?</h4>",
   "text": "Q109. What are untracked files?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "files in the local repository that have not been merged into the master branch",
    "text": "files in the local repository that have not been merged into the master branch"
   },
   {
    "isCorrect": false,
    "html": "staged files that Git does not know about because the have not been committed",
    "text": "staged files that Git does not know about because the have not been committed"
   },
   {
    "isCorrect": true,
    "html": "files in the working directory that Git does not know about because the have not been staged or committed",
    "text": "files in the working directory that Git does not know about because the have not been staged or committed"
   },
   {
    "isCorrect": false,
    "html": "files in the remote repository that Git does not know about because they have not been tagged",
    "text": "files in the remote repository that Git does not know about because they have not been tagged"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q110. What type of Git hook could be used to validate that a commit message contains a ticket number?\n\n- [ ] pre-commit\n- [x] commit-msg\n- [ ] applypatch-msg\n- [ ] prepare-commit-msg\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q110. What type of Git hook could be used to validate that a commit message contains a ticket number?</h4>",
   "text": "Q110. What type of Git hook could be used to validate that a commit message contains a ticket number?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "pre-commit",
    "text": "pre-commit"
   },
   {
    "isCorrect": true,
    "html": "commit-msg",
    "text": "commit-msg"
   },
   {
    "isCorrect": false,
    "html": "applypatch-msg",
    "text": "applypatch-msg"
   },
   {
    "isCorrect": false,
    "html": "prepare-commit-msg",
    "text": "prepare-commit-msg"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q111. What is the difference between git stash pop and git stash apply?\n\n- [ ] git stash pop pushes the topmost commit to the current branch, while git stash apply caches the last commit in the current branch.\n- [x] git stash pop applies the topmost entry in the stash to the working files and removes it from the stash, while git stash apply applies the topmost entry in the stash to the working files but leaves it in the stash.\n- [ ] git stash pop merges the topmost commit to the current branch, while git stash apply merges the last commit in the current branch.\n- [ ] git stash pop applies the topmost entry in the stash to the working files but leaves it in the stash, while git stash apply applies the topmost entry in the stash to the working files and removes it from the stash.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q111. What is the difference between git stash pop and git stash apply?</h4>",
   "text": "Q111. What is the difference between git stash pop and git stash apply?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git stash pop pushes the topmost commit to the current branch, while git stash apply caches the last commit in the current branch.",
    "text": "git stash pop pushes the topmost commit to the current branch, while git stash apply caches the last commit in the current branch."
   },
   {
    "isCorrect": true,
    "html": "git stash pop applies the topmost entry in the stash to the working files and removes it from the stash, while git stash apply applies the topmost entry in the stash to the working files but leaves it in the stash.",
    "text": "git stash pop applies the topmost entry in the stash to the working files and removes it from the stash, while git stash apply applies the topmost entry in the stash to the working files but leaves it in the stash."
   },
   {
    "isCorrect": false,
    "html": "git stash pop merges the topmost commit to the current branch, while git stash apply merges the last commit in the current branch.",
    "text": "git stash pop merges the topmost commit to the current branch, while git stash apply merges the last commit in the current branch."
   },
   {
    "isCorrect": false,
    "html": "git stash pop applies the topmost entry in the stash to the working files but leaves it in the stash, while git stash apply applies the topmost entry in the stash to the working files and removes it from the stash.",
    "text": "git stash pop applies the topmost entry in the stash to the working files but leaves it in the stash, while git stash apply applies the topmost entry in the stash to the working files and removes it from the stash."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q112. After making some major changes to your code, you are a little nervous about committing. What command would you use to review the commit prior to making it?\n\n- [ ] git commit --verify\n- [ ] git notes show\n- [ ] git commit preview\n- [x] git commit --dry-run\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q112. After making some major changes to your code, you are a little nervous about committing. What command would you use to review the commit prior to making it?</h4>",
   "text": "Q112. After making some major changes to your code, you are a little nervous about committing. What command would you use to review the commit prior to making it?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git commit --verify",
    "text": "git commit --verify"
   },
   {
    "isCorrect": false,
    "html": "git notes show",
    "text": "git notes show"
   },
   {
    "isCorrect": false,
    "html": "git commit preview",
    "text": "git commit preview"
   },
   {
    "isCorrect": true,
    "html": "git commit --dry-run",
    "text": "git commit --dry-run"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q113. What statement best describes Git's concept of HEAD?\n\n- [ ] a pointer to the most recently changed file in the stage/index\n- [ ] a pointer to the master branch\n- [x] a pointer to the most recent commit in the currently checked-out branch\n- [ ] a pointer to where the repository is stored in memory\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q113. What statement best describes Git's concept of HEAD?</h4>",
   "text": "Q113. What statement best describes Git's concept of HEAD?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a pointer to the most recently changed file in the stage/index",
    "text": "a pointer to the most recently changed file in the stage/index"
   },
   {
    "isCorrect": false,
    "html": "a pointer to the master branch",
    "text": "a pointer to the master branch"
   },
   {
    "isCorrect": true,
    "html": "a pointer to the most recent commit in the currently checked-out branch",
    "text": "a pointer to the most recent commit in the currently checked-out branch"
   },
   {
    "isCorrect": false,
    "html": "a pointer to where the repository is stored in memory",
    "text": "a pointer to where the repository is stored in memory"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q114. After staging changes to several files, you realize the changes to the config.properties file are incorrect, and need to be removed from the stage and working directory. What command can you use to remove the staged changes to the file?\n\n- [ ] git reset HEAD^ -- config.properties\n- [ ] git rm config.properties\n- [ ] git rf config.properties\n- [x] git checkout HEAD -- config.properties\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q114. After staging changes to several files, you realize the changes to the config.properties file are incorrect, and need to be removed from the stage and working directory. What command can you use to remove the staged changes to the file?</h4>",
   "text": "Q114. After staging changes to several files, you realize the changes to the config.properties file are incorrect, and need to be removed from the stage and working directory. What command can you use to remove the staged changes to the file?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git reset HEAD^ -- config.properties",
    "text": "git reset HEAD^ -- config.properties"
   },
   {
    "isCorrect": false,
    "html": "git rm config.properties",
    "text": "git rm config.properties"
   },
   {
    "isCorrect": false,
    "html": "git rf config.properties",
    "text": "git rf config.properties"
   },
   {
    "isCorrect": true,
    "html": "git checkout HEAD -- config.properties",
    "text": "git checkout HEAD -- config.properties"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q115. After a recent release with a stack trace, an issue is create that indicates the problem is with a newly added configuration property named MaxConnections. What command can find all commits that add or remove the string MaxConnections?\n\n- [ ] - git grep -a \"MaxConnections\"\n- [ ] - git log --search-string \"MaxConnections\"\n- [x] - git log -S \"MaxConnections\"\n- [ ] - git commit --with \"MaxConnections\"\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q115. After a recent release with a stack trace, an issue is create that indicates the problem is with a newly added configuration property named MaxConnections. What command can find all commits that add or remove the string MaxConnections?</h4>",
   "text": "Q115. After a recent release with a stack trace, an issue is create that indicates the problem is with a newly added configuration property named MaxConnections. What command can find all commits that add or remove the string MaxConnections?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "- git grep -a \"MaxConnections\"",
    "text": "- git grep -a \"MaxConnections\""
   },
   {
    "isCorrect": false,
    "html": "- git log --search-string \"MaxConnections\"",
    "text": "- git log --search-string \"MaxConnections\""
   },
   {
    "isCorrect": true,
    "html": "- git log -S \"MaxConnections\"",
    "text": "- git log -S \"MaxConnections\""
   },
   {
    "isCorrect": false,
    "html": "- git commit --with \"MaxConnections\"",
    "text": "- git commit --with \"MaxConnections\""
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q116. Your company has moved its remote repository to GitHub at this location: https://github.com/yourcompany/core-api.git. What command updates the remote repository, named origin, to point to the new remote repository at this location?\n\n- [ ] - git remote create-update origin https://github.com/yourcompany/core-api.git\n- [ ] - git remote update origin https://github.com/yourcompany/core-api.git\n- [x] - git remote set-url origin https://github.com/yourcompany/core-api.git\n- [ ] - git remote add https://github.com/yourcompany/core-api.git\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q116. Your company has moved its remote repository to GitHub at this location: https://github.com/yourcompany/core-api.git. What command updates the remote repository, named origin, to point to the new remote repository at this location?</h4>",
   "text": "Q116. Your company has moved its remote repository to GitHub at this location: https://github.com/yourcompany/core-api.git. What command updates the remote repository, named origin, to point to the new remote repository at this location?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "- git remote create-update origin https://github.com/yourcompany/core-api.git",
    "text": "- git remote create-update origin https://github.com/yourcompany/core-api.git"
   },
   {
    "isCorrect": false,
    "html": "- git remote update origin https://github.com/yourcompany/core-api.git",
    "text": "- git remote update origin https://github.com/yourcompany/core-api.git"
   },
   {
    "isCorrect": true,
    "html": "- git remote set-url origin https://github.com/yourcompany/core-api.git",
    "text": "- git remote set-url origin https://github.com/yourcompany/core-api.git"
   },
   {
    "isCorrect": false,
    "html": "- git remote add https://github.com/yourcompany/core-api.git",
    "text": "- git remote add https://github.com/yourcompany/core-api.git"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q117. When is the cherry-pick command used?\n\n- [x] - when a commit from one branch needs to be copied into another branch\n- [ ] - when the HEAD needs to be reset to a specific commit\n- [ ] - when a specific commit needs to be pulled down from the remote repository\n- [ ] - when a hook script needs to be invoked\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q117. When is the cherry-pick command used?</h4>",
   "text": "Q117. When is the cherry-pick command used?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "- when a commit from one branch needs to be copied into another branch",
    "text": "- when a commit from one branch needs to be copied into another branch"
   },
   {
    "isCorrect": false,
    "html": "- when the HEAD needs to be reset to a specific commit",
    "text": "- when the HEAD needs to be reset to a specific commit"
   },
   {
    "isCorrect": false,
    "html": "- when a specific commit needs to be pulled down from the remote repository",
    "text": "- when a specific commit needs to be pulled down from the remote repository"
   },
   {
    "isCorrect": false,
    "html": "- when a hook script needs to be invoked",
    "text": "- when a hook script needs to be invoked"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q118. How would you describe a forked repository?\n\n- [ ] - a deleted or archived copy of a repository\n- [ ] - a beta release branch of a repository\n- [ ] - a future branch of a repository\n- [x] - a separate copy of a repository\n\n[reference](https://stackoverflow.com/a/9339460/1573267)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q118. How would you describe a forked repository?</h4>",
   "text": "Q118. How would you describe a forked repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "- a deleted or archived copy of a repository",
    "text": "- a deleted or archived copy of a repository"
   },
   {
    "isCorrect": false,
    "html": "- a beta release branch of a repository",
    "text": "- a beta release branch of a repository"
   },
   {
    "isCorrect": false,
    "html": "- a future branch of a repository",
    "text": "- a future branch of a repository"
   },
   {
    "isCorrect": true,
    "html": "- a separate copy of a repository",
    "text": "- a separate copy of a repository"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/a/9339460/1573267\">reference</a></p>",
   "text": "reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q119. How can you exclude untracked files within the working directory from a Git repository?\n\n- [ ] - You cannot exclude the files from the repository.\n- [ ] - Tag the files with excluded.\n- [x] - Add a pattern matching the files to the .gitignore file.\n- [ ] - Add the files to the omitted branch\n\n[reference](https://git-scm.com/docs/gitignore)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q119. How can you exclude untracked files within the working directory from a Git repository?</h4>",
   "text": "Q119. How can you exclude untracked files within the working directory from a Git repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "- You cannot exclude the files from the repository.",
    "text": "- You cannot exclude the files from the repository."
   },
   {
    "isCorrect": false,
    "html": "- Tag the files with excluded.",
    "text": "- Tag the files with excluded."
   },
   {
    "isCorrect": true,
    "html": "- Add a pattern matching the files to the .gitignore file.",
    "text": "- Add a pattern matching the files to the .gitignore file."
   },
   {
    "isCorrect": false,
    "html": "- Add the files to the omitted branch",
    "text": "- Add the files to the omitted branch"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://git-scm.com/docs/gitignore\">reference</a></p>",
   "text": "reference"
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q120. What command creates a near-exact copy of the entire repository from a server?\n\n- [ ] `git checkout <url>`\n- [ ] `git pull <url>`\n- [x] `git clone <url>`\n- [ ] `git replicate <url>`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q120. What command creates a near-exact copy of the entire repository from a server?</h4>",
   "text": "Q120. What command creates a near-exact copy of the entire repository from a server?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git checkout &lt;url&gt;</code>",
    "text": "git checkout <url>"
   },
   {
    "isCorrect": false,
    "html": "<code>git pull &lt;url&gt;</code>",
    "text": "git pull <url>"
   },
   {
    "isCorrect": true,
    "html": "<code>git clone &lt;url&gt;</code>",
    "text": "git clone <url>"
   },
   {
    "isCorrect": false,
    "html": "<code>git replicate &lt;url&gt;</code>",
    "text": "git replicate <url>"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q121. What would happen if you ran the `git reset testfile.js` command?\n\n- [ ] testfile.js would be reverted to a blank file.\n- [ ] testfile.js would be reset to its first saved state.\n- [x] testfile.js would be reverted to its last saved copy.\n- [ ] testfile.js would be removed from the stage/index area, if present.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q121. What would happen if you ran the <code>git reset testfile.js</code> command?</h4>",
   "text": "Q121. What would happen if you ran the git reset testfile.js command?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "testfile.js would be reverted to a blank file.",
    "text": "testfile.js would be reverted to a blank file."
   },
   {
    "isCorrect": false,
    "html": "testfile.js would be reset to its first saved state.",
    "text": "testfile.js would be reset to its first saved state."
   },
   {
    "isCorrect": true,
    "html": "testfile.js would be reverted to its last saved copy.",
    "text": "testfile.js would be reverted to its last saved copy."
   },
   {
    "isCorrect": false,
    "html": "testfile.js would be removed from the stage/index area, if present.",
    "text": "testfile.js would be removed from the stage/index area, if present."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q122. What situation can occur when attempting to combine branches containing changes to the same piece of code?\n\n- [ ] lost code\n- [ ] automatic override\n- [ ] collisions\n- [x] merge conflict\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q122. What situation can occur when attempting to combine branches containing changes to the same piece of code?</h4>",
   "text": "Q122. What situation can occur when attempting to combine branches containing changes to the same piece of code?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "lost code",
    "text": "lost code"
   },
   {
    "isCorrect": false,
    "html": "automatic override",
    "text": "automatic override"
   },
   {
    "isCorrect": false,
    "html": "collisions",
    "text": "collisions"
   },
   {
    "isCorrect": true,
    "html": "merge conflict",
    "text": "merge conflict"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q123. When Git workflows contain a topic branch, what purpose does the topic branch serve?\n\n- [ ] Topic branches store unstable code until it is peer reviewed for integration into another feature branch. <url>\n- [x] Topic branches correspond to different stages of development and are always open for long-running branches to be pulled into. <url>\n- [ ] Topic branches are used in waterfall development methodologies to track the state of the code during the various stages of waterfall. <url>\n- [ ] Topic branches are short-lived branches used to store work related to a particular feature. <url>\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q123. When Git workflows contain a topic branch, what purpose does the topic branch serve?</h4>",
   "text": "Q123. When Git workflows contain a topic branch, what purpose does the topic branch serve?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Topic branches store unstable code until it is peer reviewed for integration into another feature branch. &lt;url&gt;",
    "text": "Topic branches store unstable code until it is peer reviewed for integration into another feature branch. <url>"
   },
   {
    "isCorrect": true,
    "html": "Topic branches correspond to different stages of development and are always open for long-running branches to be pulled into. &lt;url&gt;",
    "text": "Topic branches correspond to different stages of development and are always open for long-running branches to be pulled into. <url>"
   },
   {
    "isCorrect": false,
    "html": "Topic branches are used in waterfall development methodologies to track the state of the code during the various stages of waterfall. &lt;url&gt;",
    "text": "Topic branches are used in waterfall development methodologies to track the state of the code during the various stages of waterfall. <url>"
   },
   {
    "isCorrect": false,
    "html": "Topic branches are short-lived branches used to store work related to a particular feature. &lt;url&gt;",
    "text": "Topic branches are short-lived branches used to store work related to a particular feature. <url>"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q124. What practice can help reduce the chances of encountering a merge conflict?\n\n- [ ] Provide detailed commit messages that describe the changes being introduced by the commit. <url>\n- [ ] make large commits that introduce multiple features. <url>\n- [x] Keep local repository branches in sync with upstream branches in the remote repository by committing,pushing and pulling frequently. <url>\n- [ ] Avoid frequent interaction with the remote repository to reduce the probability of pulling conflicts. <url>\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q124. What practice can help reduce the chances of encountering a merge conflict?</h4>",
   "text": "Q124. What practice can help reduce the chances of encountering a merge conflict?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Provide detailed commit messages that describe the changes being introduced by the commit. &lt;url&gt;",
    "text": "Provide detailed commit messages that describe the changes being introduced by the commit. <url>"
   },
   {
    "isCorrect": false,
    "html": "make large commits that introduce multiple features. &lt;url&gt;",
    "text": "make large commits that introduce multiple features. <url>"
   },
   {
    "isCorrect": true,
    "html": "Keep local repository branches in sync with upstream branches in the remote repository by committing,pushing and pulling frequently. &lt;url&gt;",
    "text": "Keep local repository branches in sync with upstream branches in the remote repository by committing,pushing and pulling frequently. <url>"
   },
   {
    "isCorrect": false,
    "html": "Avoid frequent interaction with the remote repository to reduce the probability of pulling conflicts. &lt;url&gt;",
    "text": "Avoid frequent interaction with the remote repository to reduce the probability of pulling conflicts. <url>"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q125. You have changed your mind about adding broccoli to your project. How should you remove it?\n\n```bash\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n  brccoli\n```\n\n- [x] `git remove broccoli`\n- [ ] `git clean -f`\n- [ ] `git clean`\n- [ ] `git remove .`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q125. You have changed your mind about adding broccoli to your project. How should you remove it?</h4>",
   "text": "Q125. You have changed your mind about adding broccoli to your project. How should you remove it?"
  },
  "preformated": {
   "language": "bash",
   "html": "<pre><code class=\"language-bash\">Untracked files:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"token keyword\">in</span> what will be committed<span class=\"token punctuation\">)</span>\n  brccoli\n</code></pre>",
   "text": "Untracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n  brccoli\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "<code>git remove broccoli</code>",
    "text": "git remove broccoli"
   },
   {
    "isCorrect": false,
    "html": "<code>git clean -f</code>",
    "text": "git clean -f"
   },
   {
    "isCorrect": false,
    "html": "<code>git clean</code>",
    "text": "git clean"
   },
   {
    "isCorrect": false,
    "html": "<code>git remove .</code>",
    "text": "git remove ."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q126. What command can you use to remove untracked files from the working directory?\n\n- [ ] `git rm -all`\n- [ ] `git rm --cached`\n- [x] `git clean -d -f`\n- [ ] `git checkout`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q126. What command can you use to remove untracked files from the working directory?</h4>",
   "text": "Q126. What command can you use to remove untracked files from the working directory?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git rm -all</code>",
    "text": "git rm -all"
   },
   {
    "isCorrect": false,
    "html": "<code>git rm --cached</code>",
    "text": "git rm --cached"
   },
   {
    "isCorrect": true,
    "html": "<code>git clean -d -f</code>",
    "text": "git clean -d -f"
   },
   {
    "isCorrect": false,
    "html": "<code>git checkout</code>",
    "text": "git checkout"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q127. After making a commit, you notice that you forgot to include changes to the doge.txt file. What command or commands would you use to add the changes to the commit ?\n\n- [x] ⠀\n\n```bash\n  git add doge.txt\n  git commit --amend --no-edit\n```\n\n- [ ] ⠀\n\n```bash\n  git commit --amend --no-edit\n```\n\n- [ ] ⠀\n\n```bash\n  git add doge.txt\n  git commit --patch --no-edit\n```\n\n- [ ] ⠀\n\n```bash\n  git commit --patch --no-edit\n```\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q127. After making a commit, you notice that you forgot to include changes to the doge.txt file. What command or commands would you use to add the changes to the commit ?</h4>",
   "text": "Q127. After making a commit, you notice that you forgot to include changes to the doge.txt file. What command or commands would you use to add the changes to the commit ?"
  },
  "preformated": {
   "language": "bash",
   "html": "<pre><code class=\"language-bash\">  <span class=\"token function\">git</span> <span class=\"token function\">add</span> doge.txt\n  <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span> --no-edit\n</code></pre>",
   "text": "  git add doge.txt\n  git commit --amend --no-edit\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "⠀<br><pre><code class=\"language-bash\">  <span class=\"token function\">git</span> <span class=\"token function\">add</span> doge.txt\n  <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span> --no-edit\n</code></pre>",
    "text": "⠀  git add doge.txt\n  git commit --amend --no-edit\n"
   },
   {
    "isCorrect": false,
    "html": "⠀<br><pre><code class=\"language-bash\">  <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span> --no-edit\n</code></pre>",
    "text": "⠀  git commit --amend --no-edit\n"
   },
   {
    "isCorrect": false,
    "html": "⠀<br><pre><code class=\"language-bash\">  <span class=\"token function\">git</span> <span class=\"token function\">add</span> doge.txt\n  <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--patch</span> --no-edit\n</code></pre>",
    "text": "⠀  git add doge.txt\n  git commit --patch --no-edit\n"
   },
   {
    "isCorrect": false,
    "html": "⠀<br><pre><code class=\"language-bash\">  <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--patch</span> --no-edit\n</code></pre>",
    "text": "⠀  git commit --patch --no-edit\n"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q128. Which command would remove a file named wrongfile from the current branch of a repository, the index, and working files?\n\n- [ ] ⠀\n\n```bash\ngit rm wrongfile\ngit commit -m \"Removed file\"\n```\n\n- [ ] ⠀\n\n```bash\n  git forget -rf wrongfile\n  git commit -m \"Removed file\"\n```\n\n- [ ] ⠀\n\n```bash\n  git untrack -rf wrongfile\n  git commit -m \"Removed file\"\n```\n\n- [x] ⠀\n\n```bash\n  git rm --cached wrongfile\n  git commit -m \"Removed file\"\n```\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q128. Which command would remove a file named wrongfile from the current branch of a repository, the index, and working files?</h4>",
   "text": "Q128. Which command would remove a file named wrongfile from the current branch of a repository, the index, and working files?"
  },
  "preformated": {
   "language": "bash",
   "html": "<pre><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> wrongfile\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Removed file\"</span>\n</code></pre>",
   "text": "git rm wrongfile\ngit commit -m \"Removed file\"\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "⠀<br><pre><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> wrongfile\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Removed file\"</span>\n</code></pre>",
    "text": "⠀git rm wrongfile\ngit commit -m \"Removed file\"\n"
   },
   {
    "isCorrect": false,
    "html": "⠀<br><pre><code class=\"language-bash\">  <span class=\"token function\">git</span> forget <span class=\"token parameter variable\">-rf</span> wrongfile\n  <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Removed file\"</span>\n</code></pre>",
    "text": "⠀  git forget -rf wrongfile\n  git commit -m \"Removed file\"\n"
   },
   {
    "isCorrect": false,
    "html": "⠀<br><pre><code class=\"language-bash\">  <span class=\"token function\">git</span> untrack <span class=\"token parameter variable\">-rf</span> wrongfile\n  <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Removed file\"</span>\n</code></pre>",
    "text": "⠀  git untrack -rf wrongfile\n  git commit -m \"Removed file\"\n"
   },
   {
    "isCorrect": true,
    "html": "⠀<br><pre><code class=\"language-bash\">  <span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">--cached</span> wrongfile\n  <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Removed file\"</span>\n</code></pre>",
    "text": "⠀  git rm --cached wrongfile\n  git commit -m \"Removed file\"\n"
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q129. What is the best way to report a bug to a GitHub project?\n\n- [ ] Send an email to a project owner.\n- [ ] I don't bother reporting software bugs because there's no transparency and they never get fixed anyway.\n- [x] Search for the bug in the project's existing issues and create a new one if it hasn't been reported yet.\n- [ ] Use git search -diff to compare all commits in your repository history.\n\nExplanation: A project's issues are visible to anyone who has access to the project, so you may find a resolution is already planned or available. Otherwise, you can create and track the issue yourself.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q129. What is the best way to report a bug to a GitHub project?</h4>",
   "text": "Q129. What is the best way to report a bug to a GitHub project?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Send an email to a project owner.",
    "text": "Send an email to a project owner."
   },
   {
    "isCorrect": false,
    "html": "I don't bother reporting software bugs because there's no transparency and they never get fixed anyway.",
    "text": "I don't bother reporting software bugs because there's no transparency and they never get fixed anyway."
   },
   {
    "isCorrect": true,
    "html": "Search for the bug in the project's existing issues and create a new one if it hasn't been reported yet.",
    "text": "Search for the bug in the project's existing issues and create a new one if it hasn't been reported yet."
   },
   {
    "isCorrect": false,
    "html": "Use git search -diff to compare all commits in your repository history.",
    "text": "Use git search -diff to compare all commits in your repository history."
   }
  ],
  "reference": {
   "html": "<p>Explanation: A project's issues are visible to anyone who has access to the project, so you may find a resolution is already planned or available. Otherwise, you can create and track the issue yourself.</p>",
   "text": "Explanation: A project's issues are visible to anyone who has access to the project, so you may find a resolution is already planned or available. Otherwise, you can create and track the issue yourself."
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q130. Suppose you have created a bug fix on a new branch and want it to become part of the next production build generated from the main branch. What should you do next?\n\n- [ ] Copy your branch changes and commit them directly to the main branch.\n- [x] Create a pull request to merge your new branch into the main branch.\n- [ ] On second thought, maybe I won't share this fix. I'll just put it in my own private version of the source code.\n- [ ] Use git bisect to compare the buggy commit to an early commit that works as expected.\n\nExplanation: Pull requests are the correct way to communicate that commits are ready for review and ultimate inclusion on the main branch.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q130. Suppose you have created a bug fix on a new branch and want it to become part of the next production build generated from the main branch. What should you do next?</h4>",
   "text": "Q130. Suppose you have created a bug fix on a new branch and want it to become part of the next production build generated from the main branch. What should you do next?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Copy your branch changes and commit them directly to the main branch.",
    "text": "Copy your branch changes and commit them directly to the main branch."
   },
   {
    "isCorrect": true,
    "html": "Create a pull request to merge your new branch into the main branch.",
    "text": "Create a pull request to merge your new branch into the main branch."
   },
   {
    "isCorrect": false,
    "html": "On second thought, maybe I won't share this fix. I'll just put it in my own private version of the source code.",
    "text": "On second thought, maybe I won't share this fix. I'll just put it in my own private version of the source code."
   },
   {
    "isCorrect": false,
    "html": "Use git bisect to compare the buggy commit to an early commit that works as expected.",
    "text": "Use git bisect to compare the buggy commit to an early commit that works as expected."
   }
  ],
  "reference": {
   "html": "<p>Explanation: Pull requests are the correct way to communicate that commits are ready for review and ultimate inclusion on the main branch.</p>",
   "text": "Explanation: Pull requests are the correct way to communicate that commits are ready for review and ultimate inclusion on the main branch."
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q131. Which command would remove a file named wrongfile from the current branch of a repository, the index, and working files?\n\n- [x] Fork the project's repository to your GitHub account, clone the forked repository to your local machine, push changes to your repository, and submit a pull request to the target (upstream) repository.\n- [ ] Clone the project to your local machine and push updates directly to the project repository.\n- [ ] Use git commands to make a copy of the project so that you can work locally. Submit an issue to get your changes into the target repository.\n- [ ] Use git show push-notifications\n\nExplanation: GitHub provides forking functionality designed to allow you to work with projects where you aren't an owner or don't have write access. Forking makes a remote copy of the project in your repository that you can then clone locally. To submit updates to the target repository (upstream repository) you can submit a pull request.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q131. Which command would remove a file named wrongfile from the current branch of a repository, the index, and working files?</h4>",
   "text": "Q131. Which command would remove a file named wrongfile from the current branch of a repository, the index, and working files?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Fork the project's repository to your GitHub account, clone the forked repository to your local machine, push changes to your repository, and submit a pull request to the target (upstream) repository.",
    "text": "Fork the project's repository to your GitHub account, clone the forked repository to your local machine, push changes to your repository, and submit a pull request to the target (upstream) repository."
   },
   {
    "isCorrect": false,
    "html": "Clone the project to your local machine and push updates directly to the project repository.",
    "text": "Clone the project to your local machine and push updates directly to the project repository."
   },
   {
    "isCorrect": false,
    "html": "Use git commands to make a copy of the project so that you can work locally. Submit an issue to get your changes into the target repository.",
    "text": "Use git commands to make a copy of the project so that you can work locally. Submit an issue to get your changes into the target repository."
   },
   {
    "isCorrect": false,
    "html": "Use git show push-notifications",
    "text": "Use git show push-notifications"
   }
  ],
  "reference": {
   "html": "<p>Explanation: GitHub provides forking functionality designed to allow you to work with projects where you aren't an owner or don't have write access. Forking makes a remote copy of the project in your repository that you can then clone locally. To submit updates to the target repository (upstream repository) you can submit a pull request.</p>",
   "text": "Explanation: GitHub provides forking functionality designed to allow you to work with projects where you aren't an owner or don't have write access. Forking makes a remote copy of the project in your repository that you can then clone locally. To submit updates to the target repository (upstream repository) you can submit a pull request."
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q132. What is GitHub?\n\n- [ ] version control\n- [x] A hosting platform for Git repositories\n- [ ] for keeping images\n- [ ] for social networking\n\nExplanation: GitHub is a popular hosting platform for developers to store their Git repositories and collaborate with other developers all around the world.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q132. What is GitHub?</h4>",
   "text": "Q132. What is GitHub?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "version control",
    "text": "version control"
   },
   {
    "isCorrect": true,
    "html": "A hosting platform for Git repositories",
    "text": "A hosting platform for Git repositories"
   },
   {
    "isCorrect": false,
    "html": "for keeping images",
    "text": "for keeping images"
   },
   {
    "isCorrect": false,
    "html": "for social networking",
    "text": "for social networking"
   }
  ],
  "reference": {
   "html": "<p>Explanation: GitHub is a popular hosting platform for developers to store their Git repositories and collaborate with other developers all around the world.</p>",
   "text": "Explanation: GitHub is a popular hosting platform for developers to store their Git repositories and collaborate with other developers all around the world."
  }
 },
 {
  "topic": "Git",
  "raw": "#### Q133. Which statement is true of the git push command?\n\n- [x] By default, a push doesn’t send tags to the remote repository.\n- [ ] Only annotated tags are automatically pushed to the remote repository with a commit.\n- [ ] Tags are pushed to the remote repository with their respective commits.\n- [ ] Commits can be tagged only when they are created.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q133. Which statement is true of the git push command?</h4>",
   "text": "Q133. Which statement is true of the git push command?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "By default, a push doesn’t send tags to the remote repository.",
    "text": "By default, a push doesn’t send tags to the remote repository."
   },
   {
    "isCorrect": false,
    "html": "Only annotated tags are automatically pushed to the remote repository with a commit.",
    "text": "Only annotated tags are automatically pushed to the remote repository with a commit."
   },
   {
    "isCorrect": false,
    "html": "Tags are pushed to the remote repository with their respective commits.",
    "text": "Tags are pushed to the remote repository with their respective commits."
   },
   {
    "isCorrect": false,
    "html": "Commits can be tagged only when they are created.",
    "text": "Commits can be tagged only when they are created."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q134. Git Pull is a combination of?\n\n- [ ] Add and commit.\n- [ ] branch and checkout.\n- [x] fetch and merge.\n- [ ] None of these.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q134. Git Pull is a combination of?</h4>",
   "text": "Q134. Git Pull is a combination of?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Add and commit.",
    "text": "Add and commit."
   },
   {
    "isCorrect": false,
    "html": "branch and checkout.",
    "text": "branch and checkout."
   },
   {
    "isCorrect": true,
    "html": "fetch and merge.",
    "text": "fetch and merge."
   },
   {
    "isCorrect": false,
    "html": "None of these.",
    "text": "None of these."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q135. What is the command to set the user email for the current repository?\n\n- [ ] git email.user\n- [x] git config user.email\n- [ ] git config email\n- [ ] All of the above.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q135. What is the command to set the user email for the current repository?</h4>",
   "text": "Q135. What is the command to set the user email for the current repository?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "git email.user",
    "text": "git email.user"
   },
   {
    "isCorrect": true,
    "html": "git config user.email",
    "text": "git config user.email"
   },
   {
    "isCorrect": false,
    "html": "git config email",
    "text": "git config email"
   },
   {
    "isCorrect": false,
    "html": "All of the above.",
    "text": "All of the above."
   }
  ]
 },
 {
  "topic": "Git",
  "raw": "#### Q136. **\\_** will rewind your project to a specific point in time, losing all commits that came after it. **\\_** will keep changes in those rewound commits as local modifications\n\n- [ ] `git reset HEAD`; `git reset HEAD^`\n- [x] `git reset --hard`; `git reset --soft`\n- [ ] `git reset --soft`; `git reset --hard`\n- [ ] `git rewind`; `git update`\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q136. <strong>_</strong> will rewind your project to a specific point in time, losing all commits that came after it. <strong>_</strong> will keep changes in those rewound commits as local modifications</h4>",
   "text": "Q136. _ will rewind your project to a specific point in time, losing all commits that came after it. _ will keep changes in those rewound commits as local modifications"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>git reset HEAD</code>; <code>git reset HEAD^</code>",
    "text": "git reset HEAD; git reset HEAD^"
   },
   {
    "isCorrect": true,
    "html": "<code>git reset --hard</code>; <code>git reset --soft</code>",
    "text": "git reset --hard; git reset --soft"
   },
   {
    "isCorrect": false,
    "html": "<code>git reset --soft</code>; <code>git reset --hard</code>",
    "text": "git reset --soft; git reset --hard"
   },
   {
    "isCorrect": false,
    "html": "<code>git rewind</code>; <code>git update</code>",
    "text": "git rewind; git update"
   }
  ]
 }
]