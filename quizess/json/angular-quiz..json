[
 {
  "topic": "Angular",
  "raw": "#### Q1. What is the purpose of the ViewChild decorator in this component class?\n\n```ts\n@Component({\n    ...\n    template: '<p #bio></p>'\n})\nexport class UserDetailsComponent {\n    @ViewChild('bio') bio;\n}\n```\n\n- [x] It provides access from within the component class to the ElementRef object for the `<p>` tag that has the bio template reference variable in the component's template view.\n- [ ] It indicates that the `<p>` tag be rendered as a child of the parent view that uses this component.\n- [ ] It makes the `<p>` tag in the template support content projection.\n- [ ] It makes the `<p>` tag visible in the final render. If the #bio was used in the template and the @ViewChild was not used in the class, then Angular would automatically hide the `<p>` tag that has #bio on it.\n\n[DigitalOcean - viewchild-access-component](https://www.digitalocean.com/community/tutorials/angular-viewchild-access-component)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q1. What is the purpose of the ViewChild decorator in this component class?</h4>",
   "text": "Q1. What is the purpose of the ViewChild decorator in this component class?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;p #bio&gt;&lt;/p&gt;'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDetailsComponent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ViewChild</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'bio'</span><span class=\"token punctuation\">)</span> bio<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Component({\n    ...\n    template: '<p #bio></p>'\n})\nexport class UserDetailsComponent {\n    @ViewChild('bio') bio;\n}\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "It provides access from within the component class to the ElementRef object for the <code>&lt;p&gt;</code> tag that has the bio template reference variable in the component's template view.",
    "text": "It provides access from within the component class to the ElementRef object for the <p> tag that has the bio template reference variable in the component's template view."
   },
   {
    "isCorrect": false,
    "html": "It indicates that the <code>&lt;p&gt;</code> tag be rendered as a child of the parent view that uses this component.",
    "text": "It indicates that the <p> tag be rendered as a child of the parent view that uses this component."
   },
   {
    "isCorrect": false,
    "html": "It makes the <code>&lt;p&gt;</code> tag in the template support content projection.",
    "text": "It makes the <p> tag in the template support content projection."
   },
   {
    "isCorrect": false,
    "html": "It makes the <code>&lt;p&gt;</code> tag visible in the final render. If the #bio was used in the template and the @ViewChild was not used in the class, then Angular would automatically hide the <code>&lt;p&gt;</code> tag that has #bio on it.",
    "text": "It makes the <p> tag visible in the final render. If the #bio was used in the template and the @ViewChild was not used in the class, then Angular would automatically hide the <p> tag that has #bio on it."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.digitalocean.com/community/tutorials/angular-viewchild-access-component\">DigitalOcean - viewchild-access-component</a></p>",
   "text": "DigitalOcean - viewchild-access-component"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q2. What method is used to wire up a FormControl to a native DOM input element in reactive forms?\n\n- [ ] Add the string name given to the FormControl to an attribute named controls on the <form> element to indicate what fields it should include.\n- [ ] Use the square bracket binding syntax around the value attribute on the DOM element and set that equal to an instance of the FormControl.\n- [x] Use the formControlName directive and set the value equal to the string name given to the FormControl.\n- [ ] Use the string name given to the FormControl as the value for the DOM element id attribute.\n\n[Angular.io - Reactive Form Groups](https://angular.io/guide/reactive-forms#creating-nested-form-groups)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q2. What method is used to wire up a FormControl to a native DOM input element in reactive forms?</h4>",
   "text": "Q2. What method is used to wire up a FormControl to a native DOM input element in reactive forms?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Add the string name given to the FormControl to an attribute named controls on the &lt;form&gt; element to indicate what fields it should include.",
    "text": "Add the string name given to the FormControl to an attribute named controls on the <form> element to indicate what fields it should include."
   },
   {
    "isCorrect": false,
    "html": "Use the square bracket binding syntax around the value attribute on the DOM element and set that equal to an instance of the FormControl.",
    "text": "Use the square bracket binding syntax around the value attribute on the DOM element and set that equal to an instance of the FormControl."
   },
   {
    "isCorrect": true,
    "html": "Use the formControlName directive and set the value equal to the string name given to the FormControl.",
    "text": "Use the formControlName directive and set the value equal to the string name given to the FormControl."
   },
   {
    "isCorrect": false,
    "html": "Use the string name given to the FormControl as the value for the DOM element id attribute.",
    "text": "Use the string name given to the FormControl as the value for the DOM element id attribute."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/reactive-forms#creating-nested-form-groups\">Angular.io - Reactive Form Groups</a></p>",
   "text": "Angular.io - Reactive Form Groups"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q3. What is the difference between the `paramMap` and the `queryParamMap` on the `ActivatedRoute` class?\n\n- [ ] The paramMap is an object literal of the parameters in a route's URL path. The queryParamMap is an Observable of those same parameters.\n- [ ] The paramMap is an Observable that contains the parameter values that are part of a route's URL path. The queryParamMap is a method that takes in an array of keys and is used to find specific parameters in the paramMap.\n- [ ] paramMap is the legacy name from Angular 3. The new name is queryParamMap.\n- [x] Both are Observables containing values from the requested route's URL string. The paramMap contains the parameter values that are in the URL path and the queryParamMap contains the URL query parameters.\n\n[StackOverflow](https://stackoverflow.com/a/49617621)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q3. What is the difference between the <code>paramMap</code> and the <code>queryParamMap</code> on the <code>ActivatedRoute</code> class?</h4>",
   "text": "Q3. What is the difference between the paramMap and the queryParamMap on the ActivatedRoute class?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The paramMap is an object literal of the parameters in a route's URL path. The queryParamMap is an Observable of those same parameters.",
    "text": "The paramMap is an object literal of the parameters in a route's URL path. The queryParamMap is an Observable of those same parameters."
   },
   {
    "isCorrect": false,
    "html": "The paramMap is an Observable that contains the parameter values that are part of a route's URL path. The queryParamMap is a method that takes in an array of keys and is used to find specific parameters in the paramMap.",
    "text": "The paramMap is an Observable that contains the parameter values that are part of a route's URL path. The queryParamMap is a method that takes in an array of keys and is used to find specific parameters in the paramMap."
   },
   {
    "isCorrect": false,
    "html": "paramMap is the legacy name from Angular 3. The new name is queryParamMap.",
    "text": "paramMap is the legacy name from Angular 3. The new name is queryParamMap."
   },
   {
    "isCorrect": true,
    "html": "Both are Observables containing values from the requested route's URL string. The paramMap contains the parameter values that are in the URL path and the queryParamMap contains the URL query parameters.",
    "text": "Both are Observables containing values from the requested route's URL string. The paramMap contains the parameter values that are in the URL path and the queryParamMap contains the URL query parameters."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/a/49617621\">StackOverflow</a></p>",
   "text": "StackOverflow"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q4. Based on the following usage of the async pipe, and assuming the users class field is an Observable, how many subscriptions to the users Observable are being made?\n\n```html\n<h2>Names</h2>\n<div *ngFor=\"let user of users | async\">{{ user.name }}</div>\n<h2>Ages</h2>\n<div *ngFor=\"let user of users | async\">{{ user.age }}</div>\n<h2>Genders</h2>\n<div *ngFor=\"let user of users | async\">{{ user.gender }}</div>\n```\n\n- [ ] None. The async pipe does not subscribe automatically.\n- [ ] None. The template syntax is not correct.\n- [x] Three. There is one for each async pipe.\n- [ ] One. The async pipe caches Observables by type internally.\n\n[UltimateCourses](https://ultimatecourses.com/blog/angular-ngfor-async-pipe)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q4. Based on the following usage of the async pipe, and assuming the users class field is an Observable, how many subscriptions to the users Observable are being made?</h4>",
   "text": "Q4. Based on the following usage of the async pipe, and assuming the users class field is an Observable, how many subscriptions to the users Observable are being made?"
  },
  "preformated": {
   "language": "html",
   "html": "<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>Names<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let user of users | async<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ user.name }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>Ages<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let user of users | async<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ user.age }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>Genders<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let user of users | async<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ user.gender }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
   "text": "<h2>Names</h2>\n<div *ngFor=\"let user of users | async\">{{ user.name }}</div>\n<h2>Ages</h2>\n<div *ngFor=\"let user of users | async\">{{ user.age }}</div>\n<h2>Genders</h2>\n<div *ngFor=\"let user of users | async\">{{ user.gender }}</div>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "None. The async pipe does not subscribe automatically.",
    "text": "None. The async pipe does not subscribe automatically."
   },
   {
    "isCorrect": false,
    "html": "None. The template syntax is not correct.",
    "text": "None. The template syntax is not correct."
   },
   {
    "isCorrect": true,
    "html": "Three. There is one for each async pipe.",
    "text": "Three. There is one for each async pipe."
   },
   {
    "isCorrect": false,
    "html": "One. The async pipe caches Observables by type internally.",
    "text": "One. The async pipe caches Observables by type internally."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://ultimatecourses.com/blog/angular-ngfor-async-pipe\">UltimateCourses</a></p>",
   "text": "UltimateCourses"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q5. How can you use the HttpClient to send a POST request to an endpoint from within an addOrder function in this OrderService?\n\n```ts\nexport class OrderService {\n  constructor(private httpClient: HttpClient) {}\n\n  addOrder(order: Order) {\n    // Missing line\n  }\n}\n```\n\n- [ ] this.httpClient.url(this.orderUrl).post(order);\n- [ ] this.httpClient.send(this.orderUrl, order);\n- [ ] this.httpClient.post<Order>(this.orderUrl, order);\n- [x] this.httpClient.post<Order>(this.orderUrl, order).subscribe();\n\n[Angular.io - Sending data to server](https://angular.io/guide/http#sending-data-to-a-server)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q5. How can you use the HttpClient to send a POST request to an endpoint from within an addOrder function in this OrderService?</h4>",
   "text": "Q5. How can you use the HttpClient to send a POST request to an endpoint from within an addOrder function in this OrderService?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> httpClient<span class=\"token operator\">:</span> HttpClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addOrder</span><span class=\"token punctuation\">(</span>order<span class=\"token operator\">:</span> Order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Missing line</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "export class OrderService {\n  constructor(private httpClient: HttpClient) {}\n\n  addOrder(order: Order) {\n    // Missing line\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "this.httpClient.url(this.orderUrl).post(order);",
    "text": "this.httpClient.url(this.orderUrl).post(order);"
   },
   {
    "isCorrect": false,
    "html": "this.httpClient.send(this.orderUrl, order);",
    "text": "this.httpClient.send(this.orderUrl, order);"
   },
   {
    "isCorrect": false,
    "html": "this.httpClient.post&lt;Order&gt;(this.orderUrl, order);",
    "text": "this.httpClient.post<Order>(this.orderUrl, order);"
   },
   {
    "isCorrect": true,
    "html": "this.httpClient.post&lt;Order&gt;(this.orderUrl, order).subscribe();",
    "text": "this.httpClient.post<Order>(this.orderUrl, order).subscribe();"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/http#sending-data-to-a-server\">Angular.io - Sending data to server</a></p>",
   "text": "Angular.io - Sending data to server"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q6. What is the RouterModule.forRoot method used for?\n\n- [ ] Registering any providers that you intend to use in routed components.\n- [x] Registering route definitions at the root application level.\n- [ ] Indicating that Angular should cheer on your routes to be successful.\n- [ ] Declaring that you intend to use routing only at the root level.\n\n[O'REILLY](https://www.oreilly.com/library/view/switching-to-angular/9781788620703/c9e90774-0e10-410b-bd20-d3e9e0b8d117.xhtml)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q6. What is the RouterModule.forRoot method used for?</h4>",
   "text": "Q6. What is the RouterModule.forRoot method used for?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Registering any providers that you intend to use in routed components.",
    "text": "Registering any providers that you intend to use in routed components."
   },
   {
    "isCorrect": true,
    "html": "Registering route definitions at the root application level.",
    "text": "Registering route definitions at the root application level."
   },
   {
    "isCorrect": false,
    "html": "Indicating that Angular should cheer on your routes to be successful.",
    "text": "Indicating that Angular should cheer on your routes to be successful."
   },
   {
    "isCorrect": false,
    "html": "Declaring that you intend to use routing only at the root level.",
    "text": "Declaring that you intend to use routing only at the root level."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.oreilly.com/library/view/switching-to-angular/9781788620703/c9e90774-0e10-410b-bd20-d3e9e0b8d117.xhtml\">O'REILLY</a></p>",
   "text": "O'REILLY"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q7. Which DOM elements will this component metadata selector match on?\n\n```ts\n@Component({\n    selector: 'app-user-card',\n    . . .\n})\n```\n\n- [ ] Any element with the attribute app-user-card, such as `<div app-user-card></div>`.\n- [ ] The first instance of `<app-user-card></app-user-card>`.\n- [x] All instances of `<app-user-card></app-user-card>`.\n- [ ] All instances of `<user-card></user-card>`.\n\n[Angular.io - Component Metadata](https://angular.io/guide/architecture-components#component-metadata)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q7. Which DOM elements will this component metadata selector match on?</h4>",
   "text": "Q7. Which DOM elements will this component metadata selector match on?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-user-card'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>",
   "text": "@Component({\n    selector: 'app-user-card',\n    . . .\n})\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Any element with the attribute app-user-card, such as <code>&lt;div app-user-card&gt;&lt;/div&gt;</code>.",
    "text": "Any element with the attribute app-user-card, such as <div app-user-card></div>."
   },
   {
    "isCorrect": false,
    "html": "The first instance of <code>&lt;app-user-card&gt;&lt;/app-user-card&gt;</code>.",
    "text": "The first instance of <app-user-card></app-user-card>."
   },
   {
    "isCorrect": true,
    "html": "All instances of <code>&lt;app-user-card&gt;&lt;/app-user-card&gt;</code>.",
    "text": "All instances of <app-user-card></app-user-card>."
   },
   {
    "isCorrect": false,
    "html": "All instances of <code>&lt;user-card&gt;&lt;/user-card&gt;</code>.",
    "text": "All instances of <user-card></user-card>."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/architecture-components#component-metadata\">Angular.io - Component Metadata</a></p>",
   "text": "Angular.io - Component Metadata"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q8. What is the correct template syntax for using the built-in ngFor structural directive to render out a list of productNames?\n\n- [ ] A\n\n```ts\n<ul>\n  <li [ngFor]=\"let productName of productNames\">{{ productName }}</li>\n</ul>\n```\n\n- [ ] B\n\n```ts\n<ul>\n  <li ngFor=\"let productName of productNames\">{{ productName }}</li>\n</ul>\n```\n\n- [x] C\n\n```ts\n<ul>\n  <li *ngFor=\"let productName of productNames\">{{ productName }}</li>\n</ul>\n```\n\n- [ ] D\n\n```ts\n<ul>\n  <? for productName in productNames { ?>\n  <li>{{ productName }}</li>\n  <? } ?>\n</ul>\n```\n\n[Angular.io- Structural Directives](https://angular.io/guide/built-in-directives#listing-items-with-ngfor)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q8. What is the correct template syntax for using the built-in ngFor structural directive to render out a list of productNames?</h4>",
   "text": "Q8. What is the correct template syntax for using the built-in ngFor structural directive to render out a list of productNames?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>li <span class=\"token punctuation\">[</span>ngFor<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"let productName of productNames\"</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> productName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<ul>\n  <li [ngFor]=\"let productName of productNames\">{{ productName }}</li>\n</ul>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>li <span class=\"token punctuation\">[</span>ngFor<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"let productName of productNames\"</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> productName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "A<ul>\n  <li [ngFor]=\"let productName of productNames\">{{ productName }}</li>\n</ul>\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>li ngFor<span class=\"token operator\">=</span><span class=\"token string\">\"let productName of productNames\"</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> productName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "B<ul>\n  <li ngFor=\"let productName of productNames\">{{ productName }}</li>\n</ul>\n"
   },
   {
    "isCorrect": true,
    "html": "C<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>li <span class=\"token operator\">*</span>ngFor<span class=\"token operator\">=</span><span class=\"token string\">\"let productName of productNames\"</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> productName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "C<ul>\n  <li *ngFor=\"let productName of productNames\">{{ productName }}</li>\n</ul>\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">for</span> productName <span class=\"token keyword\">in</span> productNames <span class=\"token punctuation\">{</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> productName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "D<ul>\n  <? for productName in productNames { ?>\n  <li>{{ productName }}</li>\n  <? } ?>\n</ul>\n"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/built-in-directives#listing-items-with-ngfor\">Angular.io- Structural Directives</a></p>",
   "text": "Angular.io- Structural Directives"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q9. What are the two component decorator metadata properties used to set up CSS styles for a component?\n\n- [ ] viewEncapsulation and viewEncapsulationFiles.\n- [ ] There is only one and it is the property named css.\n- [ ] css and cssUrl.\n- [x] styles and styleUrls.\n\n[Angular.io - Component Styles](https://angular.io/guide/component-styles)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q9. What are the two component decorator metadata properties used to set up CSS styles for a component?</h4>",
   "text": "Q9. What are the two component decorator metadata properties used to set up CSS styles for a component?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "viewEncapsulation and viewEncapsulationFiles.",
    "text": "viewEncapsulation and viewEncapsulationFiles."
   },
   {
    "isCorrect": false,
    "html": "There is only one and it is the property named css.",
    "text": "There is only one and it is the property named css."
   },
   {
    "isCorrect": false,
    "html": "css and cssUrl.",
    "text": "css and cssUrl."
   },
   {
    "isCorrect": true,
    "html": "styles and styleUrls.",
    "text": "styles and styleUrls."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/component-styles\">Angular.io - Component Styles</a></p>",
   "text": "Angular.io - Component Styles"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q10. With the following component class, what template syntax would you use in the template to display the value of the title class field?\n\n```ts\n@Component({\n  selector: 'app-title-card',\n  template: '',\n})\nclass TitleCardComponent {\n  title = 'User Data';\n}\n```\n\n- [ ] `{{ 'title' }}`\n- [x] `{{ title }}`\n- [ ] `[title]`\n- [ ] A class field cannot be displayed in a template via the template syntax.\n\n[Angular.io - String Interpolation or Text Interpolation](https://angular.io/guide/interpolation)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q10. With the following component class, what template syntax would you use in the template to display the value of the title class field?</h4>",
   "text": "Q10. With the following component class, what template syntax would you use in the template to display the value of the title class field?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-title-card'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TitleCardComponent</span> <span class=\"token punctuation\">{</span>\n  title <span class=\"token operator\">=</span> <span class=\"token string\">'User Data'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Component({\n  selector: 'app-title-card',\n  template: '',\n})\nclass TitleCardComponent {\n  title = 'User Data';\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>{{ 'title' }}</code>",
    "text": "{{ 'title' }}"
   },
   {
    "isCorrect": true,
    "html": "<code>{{ title }}</code>",
    "text": "{{ title }}"
   },
   {
    "isCorrect": false,
    "html": "<code>[title]</code>",
    "text": "[title]"
   },
   {
    "isCorrect": false,
    "html": "A class field cannot be displayed in a template via the template syntax.",
    "text": "A class field cannot be displayed in a template via the template syntax."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/interpolation\">Angular.io - String Interpolation or Text Interpolation</a></p>",
   "text": "Angular.io - String Interpolation or Text Interpolation"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q11. What is the purpose of the valueChanges method on a FormControl?\n\n- [ ] It is used to configure what values are allowed for the control.\n- [ ] It is used to change the value of a control to a new value. You would call that method and pass in the new value for the form field. It even supports passing in an array of values that can be set over time.\n- [ ] It returns a Boolean based on if the value of the control is different from the value with which it was initialized.\n- [x] It is an observable that emits every time the value of the control changes, so you can react to new values and make logic decisions at that time.\n\n[Angular.io - Displaying a from control value](https://angular.io/guide/reactive-forms#displaying-a-form-control-value)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q11. What is the purpose of the valueChanges method on a FormControl?</h4>",
   "text": "Q11. What is the purpose of the valueChanges method on a FormControl?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It is used to configure what values are allowed for the control.",
    "text": "It is used to configure what values are allowed for the control."
   },
   {
    "isCorrect": false,
    "html": "It is used to change the value of a control to a new value. You would call that method and pass in the new value for the form field. It even supports passing in an array of values that can be set over time.",
    "text": "It is used to change the value of a control to a new value. You would call that method and pass in the new value for the form field. It even supports passing in an array of values that can be set over time."
   },
   {
    "isCorrect": false,
    "html": "It returns a Boolean based on if the value of the control is different from the value with which it was initialized.",
    "text": "It returns a Boolean based on if the value of the control is different from the value with which it was initialized."
   },
   {
    "isCorrect": true,
    "html": "It is an observable that emits every time the value of the control changes, so you can react to new values and make logic decisions at that time.",
    "text": "It is an observable that emits every time the value of the control changes, so you can react to new values and make logic decisions at that time."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/reactive-forms#displaying-a-form-control-value\">Angular.io - Displaying a from control value</a></p>",
   "text": "Angular.io - Displaying a from control value"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q12. What directive is used to link an `<a>` tag to routing?\n\n- [ ] routeTo\n- [x] routerLink\n- [ ] routePath\n- [ ] appLink\n\n[Angular.io - RouterLink](https://angular.io/api/router/RouterLink#description)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q12. What directive is used to link an <code>&lt;a&gt;</code> tag to routing?</h4>",
   "text": "Q12. What directive is used to link an <a> tag to routing?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "routeTo",
    "text": "routeTo"
   },
   {
    "isCorrect": true,
    "html": "routerLink",
    "text": "routerLink"
   },
   {
    "isCorrect": false,
    "html": "routePath",
    "text": "routePath"
   },
   {
    "isCorrect": false,
    "html": "appLink",
    "text": "appLink"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/api/router/RouterLink#description\">Angular.io - RouterLink</a></p>",
   "text": "Angular.io - RouterLink"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q13. What is the Output decorator used for in this component class?\n\n```ts\n@Component({\n    selector: 'app-shopping-cart',\n    . . .\n})\nexport class ShoppingCartComponent {\n    @Output() itemTotalChanged = new EventEmitter();\n}\n```\n\n- [ ] It makes the `itemTotalChanged` class field public.\n- [ ] It provides a way to bind values to the `itemTotalChanged` class field, like so: `<app-shopping-cart [itemTotalChanged]=\"newTotal\"></app-shopping-cart>`.\n- [x] It provides a way to bind events to the `itemTotalChanged` class field, like so: `<app-shopping-cart (itemTotalChanged)=\"logNewTotal($event)\"></app-shopping-cart>`.\n- [ ] It is simply a way to put a comment in front of a class field for documentation.\n\n[Angular.io - Sending data to parent component](https://angular.io/guide/inputs-outputs#sending-data-to-a-parent-component)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q13. What is the Output decorator used for in this component class?</h4>",
   "text": "Q13. What is the Output decorator used for in this component class?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-shopping-cart'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShoppingCartComponent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Output</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> itemTotalChanged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Component({\n    selector: 'app-shopping-cart',\n    . . .\n})\nexport class ShoppingCartComponent {\n    @Output() itemTotalChanged = new EventEmitter();\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It makes the <code>itemTotalChanged</code> class field public.",
    "text": "It makes the itemTotalChanged class field public."
   },
   {
    "isCorrect": false,
    "html": "It provides a way to bind values to the <code>itemTotalChanged</code> class field, like so: <code>&lt;app-shopping-cart [itemTotalChanged]=\"newTotal\"&gt;&lt;/app-shopping-cart&gt;</code>.",
    "text": "It provides a way to bind values to the itemTotalChanged class field, like so: <app-shopping-cart [itemTotalChanged]=\"newTotal\"></app-shopping-cart>."
   },
   {
    "isCorrect": true,
    "html": "It provides a way to bind events to the <code>itemTotalChanged</code> class field, like so: <code>&lt;app-shopping-cart (itemTotalChanged)=\"logNewTotal($event)\"&gt;&lt;/app-shopping-cart&gt;</code>.",
    "text": "It provides a way to bind events to the itemTotalChanged class field, like so: <app-shopping-cart (itemTotalChanged)=\"logNewTotal($event)\"></app-shopping-cart>."
   },
   {
    "isCorrect": false,
    "html": "It is simply a way to put a comment in front of a class field for documentation.",
    "text": "It is simply a way to put a comment in front of a class field for documentation."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/inputs-outputs#sending-data-to-a-parent-component\">Angular.io - Sending data to parent component</a></p>",
   "text": "Angular.io - Sending data to parent component"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q14. What is the difference between these two markup examples for conditionally handling display?\n\n```html\n<div *ngIf=\"isVisible\">Active</div>\n<div [hidden]=\"!isVisible\">Active</div>\n```\n\n- [ ] The `ngIf` is shorthand for the other example. When Angular processes that directive, it writes a div element to the DOM with the hidden property.\n- [ ] They are fundamentally the same.\n- [x] The `ngIf` directive does not render the div in the DOM if the expression is false. The `hidden` property usage hides the div content in the browser viewport, but the div is still in the DOM.\n- [ ] The `ngIf` is valid, but the use of the `hidden` property is wrong and will throw an error.\n\n[StackOverflow](https://stackoverflow.com/a/39778145)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q14. What is the difference between these two markup examples for conditionally handling display?</h4>",
   "text": "Q14. What is the difference between these two markup examples for conditionally handling display?"
  },
  "preformated": {
   "language": "html",
   "html": "<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isVisible<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Active<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">[hidden]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>!isVisible<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Active<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
   "text": "<div *ngIf=\"isVisible\">Active</div>\n<div [hidden]=\"!isVisible\">Active</div>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The <code>ngIf</code> is shorthand for the other example. When Angular processes that directive, it writes a div element to the DOM with the hidden property.",
    "text": "The ngIf is shorthand for the other example. When Angular processes that directive, it writes a div element to the DOM with the hidden property."
   },
   {
    "isCorrect": false,
    "html": "They are fundamentally the same.",
    "text": "They are fundamentally the same."
   },
   {
    "isCorrect": true,
    "html": "The <code>ngIf</code> directive does not render the div in the DOM if the expression is false. The <code>hidden</code> property usage hides the div content in the browser viewport, but the div is still in the DOM.",
    "text": "The ngIf directive does not render the div in the DOM if the expression is false. The hidden property usage hides the div content in the browser viewport, but the div is still in the DOM."
   },
   {
    "isCorrect": false,
    "html": "The <code>ngIf</code> is valid, but the use of the <code>hidden</code> property is wrong and will throw an error.",
    "text": "The ngIf is valid, but the use of the hidden property is wrong and will throw an error."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/a/39778145\">StackOverflow</a></p>",
   "text": "StackOverflow"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q15. How can you disable the submit button when the form has errors in this template-driven forms example?\n\n```html\n<form #userForm=\"ngForm\">\n  <input type=\"text\" ngModel name=\"firstName\" required />\n  <input type=\"text\" ngModel name=\"lastName\" required />\n  <button (click)=\"submit(userForm.value)\">Save</button>\n</form>\n```\n\n- [ ] A\n\n```html\n<button (click)=\"submit(userForm.value)\" disable=\"userForm.invalid\">Save</button>\n```\n\n- [x] B\n\n```html\n<button (click)=\"submit(userForm.value)\" [disabled]=\"userForm.invalid\">Save</button>\n```\n\n- [ ] C\n\n```html\n<button (click)=\"submit(userForm.value)\" [ngForm.disabled]=\"userForm.valid\">Save</button>\n```\n\n- [ ] D\n\n```html\n<button (click)=\"submit(userForm.value)\" *ngIf=\"userForm.valid\">Save</button>\n```\n\n[Angular.io - Submit the form with ngSubmit](https://angular.io/guide/forms#submit-the-form-with-ngsubmit)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q15. How can you disable the submit button when the form has errors in this template-driven forms example?</h4>",
   "text": "Q15. How can you disable the submit button when the form has errors in this template-driven forms example?"
  },
  "preformated": {
   "language": "html",
   "html": "<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">#userForm</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ngForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lastName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit(userForm.value)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Save<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
   "text": "<form #userForm=\"ngForm\">\n  <input type=\"text\" ngModel name=\"firstName\" required />\n  <input type=\"text\" ngModel name=\"lastName\" required />\n  <button (click)=\"submit(userForm.value)\">Save</button>\n</form>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit(userForm.value)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userForm.invalid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Save<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
    "text": "A<button (click)=\"submit(userForm.value)\" disable=\"userForm.invalid\">Save</button>\n"
   },
   {
    "isCorrect": true,
    "html": "B<br><pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit(userForm.value)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[disabled]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userForm.invalid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Save<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
    "text": "B<button (click)=\"submit(userForm.value)\" [disabled]=\"userForm.invalid\">Save</button>\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit(userForm.value)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[ngForm.disabled]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userForm.valid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Save<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
    "text": "C<button (click)=\"submit(userForm.value)\" [ngForm.disabled]=\"userForm.valid\">Save</button>\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit(userForm.value)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userForm.valid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Save<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
    "text": "D<button (click)=\"submit(userForm.value)\" *ngIf=\"userForm.valid\">Save</button>\n"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/forms#submit-the-form-with-ngsubmit\">Angular.io - Submit the form with ngSubmit</a></p>",
   "text": "Angular.io - Submit the form with ngSubmit"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q16. You want to see what files would be generated by creating a new contact-card component. Which command would you use?\n\n- [x] ng generate component contact-card --dry-run\n- [ ] ng generate component contact-card --no-files\n- [ ] ng generate component component --dry\n- [ ] ng generate component --exclude\n\n[Angular.io - ng generate options](https://angular.io/cli/generate#options)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q16. You want to see what files would be generated by creating a new contact-card component. Which command would you use?</h4>",
   "text": "Q16. You want to see what files would be generated by creating a new contact-card component. Which command would you use?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "ng generate component contact-card --dry-run",
    "text": "ng generate component contact-card --dry-run"
   },
   {
    "isCorrect": false,
    "html": "ng generate component contact-card --no-files",
    "text": "ng generate component contact-card --no-files"
   },
   {
    "isCorrect": false,
    "html": "ng generate component component --dry",
    "text": "ng generate component component --dry"
   },
   {
    "isCorrect": false,
    "html": "ng generate component --exclude",
    "text": "ng generate component --exclude"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/cli/generate#options\">Angular.io - ng generate options</a></p>",
   "text": "Angular.io - ng generate options"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q17. Based on the following component, what template syntax would you use to bind the TitleCardComponent's titleText field to the h1 element title property?\n\n```ts\n@Component({\n  selector: 'app-title-card',\n  template: '<h1 title=\"User Data\"> {{titleText}}</h1>',\n})\nexport class TitleCardComponent {\n  titleText = 'User Data';\n}\n```\n\n- [ ] `<h1 data-title=\"titleText\">{{ titleText }}</h1>`\n- [ ] `<h1 title=\"titleText\">{{ titleText }}</h1>`\n- [x] `<h1 [title]=\"titleText\">{{ titleText }}</h1>`\n- [ ] `<h1 titleText>{{ titleText }}</h1>`\n\n[Angular.io - String Interpolation](https://angular.io/guide/interpolation)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q17. Based on the following component, what template syntax would you use to bind the TitleCardComponent's titleText field to the h1 element title property?</h4>",
   "text": "Q17. Based on the following component, what template syntax would you use to bind the TitleCardComponent's titleText field to the h1 element title property?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-title-card'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;h1 title=\"User Data\"&gt; {{titleText}}&lt;/h1&gt;'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TitleCardComponent</span> <span class=\"token punctuation\">{</span>\n  titleText <span class=\"token operator\">=</span> <span class=\"token string\">'User Data'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Component({\n  selector: 'app-title-card',\n  template: '<h1 title=\"User Data\"> {{titleText}}</h1>',\n})\nexport class TitleCardComponent {\n  titleText = 'User Data';\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>&lt;h1 data-title=\"titleText\"&gt;{{ titleText }}&lt;/h1&gt;</code>",
    "text": "<h1 data-title=\"titleText\">{{ titleText }}</h1>"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;h1 title=\"titleText\"&gt;{{ titleText }}&lt;/h1&gt;</code>",
    "text": "<h1 title=\"titleText\">{{ titleText }}</h1>"
   },
   {
    "isCorrect": true,
    "html": "<code>&lt;h1 [title]=\"titleText\"&gt;{{ titleText }}&lt;/h1&gt;</code>",
    "text": "<h1 [title]=\"titleText\">{{ titleText }}</h1>"
   },
   {
    "isCorrect": false,
    "html": "<code>&lt;h1 titleText&gt;{{ titleText }}&lt;/h1&gt;</code>",
    "text": "<h1 titleText>{{ titleText }}</h1>"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/interpolation\">Angular.io - String Interpolation</a></p>",
   "text": "Angular.io - String Interpolation"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q18. What are Angular lifecycle hooks?\n\n- [ ] loggers for tracking the health of an Angular app\n- [ ] providers that can be used to track the instances of components\n- [ ] built-in pipes that can be used in templates for DOM events\n- [x] reserved named methods for components and directives that Angular will call during set times in its execution, and can be used to tap into those lifecycle moments\n\n[Angular.io - Lifecycle hooks](https://angular.io/guide/lifecycle-hooks)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q18. What are Angular lifecycle hooks?</h4>",
   "text": "Q18. What are Angular lifecycle hooks?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "loggers for tracking the health of an Angular app",
    "text": "loggers for tracking the health of an Angular app"
   },
   {
    "isCorrect": false,
    "html": "providers that can be used to track the instances of components",
    "text": "providers that can be used to track the instances of components"
   },
   {
    "isCorrect": false,
    "html": "built-in pipes that can be used in templates for DOM events",
    "text": "built-in pipes that can be used in templates for DOM events"
   },
   {
    "isCorrect": true,
    "html": "reserved named methods for components and directives that Angular will call during set times in its execution, and can be used to tap into those lifecycle moments",
    "text": "reserved named methods for components and directives that Angular will call during set times in its execution, and can be used to tap into those lifecycle moments"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/lifecycle-hooks\">Angular.io - Lifecycle hooks</a></p>",
   "text": "Angular.io - Lifecycle hooks"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q19. Pick the best description for this template syntax code:\n\n```html\n<span>Boss: {{job?.bossName}} </span>\n```\n\n- [ ] The ? is shorthand for the async pipe. The job value must be an Observable.\n- [x] It is using the safe navigation operator (?) on the job field. If the job field is undefined, the access to the bossName will be ignored and no error will occur.\n- [ ] There is an error in the template syntax. The ? is not valid here.\n- [ ] It is diplaying the job value if it has one; otherwise it is displaying the bossName.\n\n[StackOverflow](https://stackoverflow.com/a/60182134)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q19. Pick the best description for this template syntax code:</h4>",
   "text": "Q19. Pick the best description for this template syntax code:"
  },
  "preformated": {
   "language": "html",
   "html": "<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>Boss: {{job?.bossName}} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
   "text": "<span>Boss: {{job?.bossName}} </span>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The ? is shorthand for the async pipe. The job value must be an Observable.",
    "text": "The ? is shorthand for the async pipe. The job value must be an Observable."
   },
   {
    "isCorrect": true,
    "html": "It is using the safe navigation operator (?) on the job field. If the job field is undefined, the access to the bossName will be ignored and no error will occur.",
    "text": "It is using the safe navigation operator (?) on the job field. If the job field is undefined, the access to the bossName will be ignored and no error will occur."
   },
   {
    "isCorrect": false,
    "html": "There is an error in the template syntax. The ? is not valid here.",
    "text": "There is an error in the template syntax. The ? is not valid here."
   },
   {
    "isCorrect": false,
    "html": "It is diplaying the job value if it has one; otherwise it is displaying the bossName.",
    "text": "It is diplaying the job value if it has one; otherwise it is displaying the bossName."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/a/60182134\">StackOverflow</a></p>",
   "text": "StackOverflow"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q20. How would you configure a route definition for a UserDetailComponent that supports the URL path user/23 (where 23 represents the id of the requested user)?\n\n- [x] `{ path: 'user/:id', component: UserDetailComponent }`\n- [ ] `{ url: 'user/:id', routedComponent: UserDetailComponent }`\n- [ ] `{ routedPath: 'user/:id', component: UserDetailComponent }`\n- [ ] `{ destination: new UserDetailComponent(), route: 'user/:id' }`\n\n[CodeCraft - Parameterised Routes](https://codecraft.tv/courses/angular/routing/parameterised-routes/#_configuration)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q20. How would you configure a route definition for a UserDetailComponent that supports the URL path user/23 (where 23 represents the id of the requested user)?</h4>",
   "text": "Q20. How would you configure a route definition for a UserDetailComponent that supports the URL path user/23 (where 23 represents the id of the requested user)?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "<code>{ path: 'user/:id', component: UserDetailComponent }</code>",
    "text": "{ path: 'user/:id', component: UserDetailComponent }"
   },
   {
    "isCorrect": false,
    "html": "<code>{ url: 'user/:id', routedComponent: UserDetailComponent }</code>",
    "text": "{ url: 'user/:id', routedComponent: UserDetailComponent }"
   },
   {
    "isCorrect": false,
    "html": "<code>{ routedPath: 'user/:id', component: UserDetailComponent }</code>",
    "text": "{ routedPath: 'user/:id', component: UserDetailComponent }"
   },
   {
    "isCorrect": false,
    "html": "<code>{ destination: new UserDetailComponent(), route: 'user/:id' }</code>",
    "text": "{ destination: new UserDetailComponent(), route: 'user/:id' }"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://codecraft.tv/courses/angular/routing/parameterised-routes/#_configuration\">CodeCraft - Parameterised Routes</a></p>",
   "text": "CodeCraft - Parameterised Routes"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q21. What are the HostListener decorators and the HostBinding decorator doing in this directive?\n\n```ts\n@Directive({\n  selector: '[appCallout]',\n})\nexport class CalloutDirective {\n  @HostBinding('style.font-weight') fontWeight = 'normal';\n\n  @HostListener('mouseenter')\n  onMouseEnter() {\n    this.fontWeight = 'bold';\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave() {\n    this.fontWeight = 'normal';\n  }\n}\n```\n\n- [x] They are setting the CalloutDirective.fontWeight field based on whether or not the mouse is over the DOM element. The HostListener then sets the font-weight CSS property to the fontWeight value.\n- [ ] They are setting up the directive to check the DOM element that it is on. If it has event bindings added for mouse enter and leave it will use this code. Otherwise nothing will happen.\n- [ ] This is an incorrect use of HostListener and HostBinding. The HostListener and HostBinding decorators do not do anything on directives; they work only when used on components.\n- [ ] If the DOM element that this directive is placed on has the CSS property font-weight set on it, the mouseenter and mouseleave events will get raised.\n\n[DigitalOcean](https://www.digitalocean.com/community/tutorials/angular-hostbinding-hostlistener)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q21. What are the HostListener decorators and the HostBinding decorator doing in this directive?</h4>",
   "text": "Q21. What are the HostListener decorators and the HostBinding decorator doing in this directive?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Directive</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'[appCallout]'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalloutDirective</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">HostBinding</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'style.font-weight'</span><span class=\"token punctuation\">)</span> fontWeight <span class=\"token operator\">=</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">HostListener</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseenter'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">onMouseEnter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fontWeight <span class=\"token operator\">=</span> <span class=\"token string\">'bold'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">HostListener</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseleave'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">onMouseLeave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fontWeight <span class=\"token operator\">=</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Directive({\n  selector: '[appCallout]',\n})\nexport class CalloutDirective {\n  @HostBinding('style.font-weight') fontWeight = 'normal';\n\n  @HostListener('mouseenter')\n  onMouseEnter() {\n    this.fontWeight = 'bold';\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave() {\n    this.fontWeight = 'normal';\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "They are setting the CalloutDirective.fontWeight field based on whether or not the mouse is over the DOM element. The HostListener then sets the font-weight CSS property to the fontWeight value.",
    "text": "They are setting the CalloutDirective.fontWeight field based on whether or not the mouse is over the DOM element. The HostListener then sets the font-weight CSS property to the fontWeight value."
   },
   {
    "isCorrect": false,
    "html": "They are setting up the directive to check the DOM element that it is on. If it has event bindings added for mouse enter and leave it will use this code. Otherwise nothing will happen.",
    "text": "They are setting up the directive to check the DOM element that it is on. If it has event bindings added for mouse enter and leave it will use this code. Otherwise nothing will happen."
   },
   {
    "isCorrect": false,
    "html": "This is an incorrect use of HostListener and HostBinding. The HostListener and HostBinding decorators do not do anything on directives; they work only when used on components.",
    "text": "This is an incorrect use of HostListener and HostBinding. The HostListener and HostBinding decorators do not do anything on directives; they work only when used on components."
   },
   {
    "isCorrect": false,
    "html": "If the DOM element that this directive is placed on has the CSS property font-weight set on it, the mouseenter and mouseleave events will get raised.",
    "text": "If the DOM element that this directive is placed on has the CSS property font-weight set on it, the mouseenter and mouseleave events will get raised."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.digitalocean.com/community/tutorials/angular-hostbinding-hostlistener\">DigitalOcean</a></p>",
   "text": "DigitalOcean"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q22. What Angular template syntax can you use on this template-driven form field to access the field value and check for validation within the template markup?\n\n```html\n<input type=\"text\" ngModel name=\"firstName\" required minlength=\"4\" />\n<span *ngIf=\"\">Invalid field data</span>\n```\n\n- [x] You can make use of a template reference variable and the exportAs feature that the ngModel directive has.\n- [ ] You can use the ngModel directive in combination with the input field name.\n- [ ] You can use a template reference variable for the HTML input element and then check the valid property off of that.\n- [ ] It is not possible to get access to the field value with template-driven forms. You must use reactive forms for that.\n\n1. [Angular.io -Show and hide validation error ](https://angular.io/guide/forms#show-and-hide-validation-error-messages)\n2. [Medium](https://medium.com/@agoiabeladeyemi/template-driven-forms-in-angular-4a3a5ad960de)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q22. What Angular template syntax can you use on this template-driven form field to access the field value and check for validation within the template markup?</h4>",
   "text": "Q22. What Angular template syntax can you use on this template-driven form field to access the field value and check for validation within the template markup?"
  },
  "preformated": {
   "language": "html",
   "html": "<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">minlength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Invalid field data<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
   "text": "<input type=\"text\" ngModel name=\"firstName\" required minlength=\"4\" />\n<span *ngIf=\"\">Invalid field data</span>\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "You can make use of a template reference variable and the exportAs feature that the ngModel directive has.",
    "text": "You can make use of a template reference variable and the exportAs feature that the ngModel directive has."
   },
   {
    "isCorrect": false,
    "html": "You can use the ngModel directive in combination with the input field name.",
    "text": "You can use the ngModel directive in combination with the input field name."
   },
   {
    "isCorrect": false,
    "html": "You can use a template reference variable for the HTML input element and then check the valid property off of that.",
    "text": "You can use a template reference variable for the HTML input element and then check the valid property off of that."
   },
   {
    "isCorrect": false,
    "html": "It is not possible to get access to the field value with template-driven forms. You must use reactive forms for that.",
    "text": "It is not possible to get access to the field value with template-driven forms. You must use reactive forms for that."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q23. What is the value type that will be stored in the headerText template reference variable in this markup?\n\n```html\n<h1 #headerText>User List</h1>\n```\n\n- [x] an Angular ElementRef, a wrapper around a native element\n- [ ] the inner text of the `<h1>` element\n- [ ] a header component class\n- [ ] the native DOM element type of HTMLHeadingElement\n\n[Pluralsight - Template reference variable](https://www.pluralsight.com/guides/how-to-use-template-reference-variables-in-angular)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q23. What is the value type that will be stored in the headerText template reference variable in this markup?</h4>",
   "text": "Q23. What is the value type that will be stored in the headerText template reference variable in this markup?"
  },
  "preformated": {
   "language": "html",
   "html": "<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">#headerText</span><span class=\"token punctuation\">&gt;</span></span>User List<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
   "text": "<h1 #headerText>User List</h1>\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "an Angular ElementRef, a wrapper around a native element",
    "text": "an Angular ElementRef, a wrapper around a native element"
   },
   {
    "isCorrect": false,
    "html": "the inner text of the <code>&lt;h1&gt;</code> element",
    "text": "the inner text of the <h1> element"
   },
   {
    "isCorrect": false,
    "html": "a header component class",
    "text": "a header component class"
   },
   {
    "isCorrect": false,
    "html": "the native DOM element type of HTMLHeadingElement",
    "text": "the native DOM element type of HTMLHeadingElement"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://www.pluralsight.com/guides/how-to-use-template-reference-variables-in-angular\">Pluralsight - Template reference variable</a></p>",
   "text": "Pluralsight - Template reference variable"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q24. What is the difference, if any, of the resulting code logic based on these two provider configurations?\n\n```ts\n[{ provide: FormattedLogger, useClass: Logger }][{ provide: FormattedLogger, useExisting: Logger }];\n```\n\n- [ ] They are the same. Both will result in a new instance of Logger that is bound to the FormattedLogger token.\n- [x] The useClass syntax tells the injector to make a new instance of Logger and bind that instance to the FormattedLogger token. The useExisting syntax refers to an already existing object instance declared as Logger.\n- [ ] Both of them are wrong. A strong type connot be used for useClass or useExisting.\n- [ ] They are the same. Both will result in the FormattedLogger token being an alias for the instance of Logger.\n\n1. [Angular.io - Dependency Providers](https://angular.io/guide/dependency-injection-providers#defining-providers)\n2. [TektutorialHub](https://www.tektutorialshub.com/angular/angular-providers/)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q24. What is the difference, if any, of the resulting code logic based on these two provider configurations?</h4>",
   "text": "Q24. What is the difference, if any, of the resulting code logic based on these two provider configurations?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> provide<span class=\"token operator\">:</span> FormattedLogger<span class=\"token punctuation\">,</span> useClass<span class=\"token operator\">:</span> Logger <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> provide<span class=\"token operator\">:</span> FormattedLogger<span class=\"token punctuation\">,</span> useExisting<span class=\"token operator\">:</span> Logger <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "[{ provide: FormattedLogger, useClass: Logger }][{ provide: FormattedLogger, useExisting: Logger }];\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "They are the same. Both will result in a new instance of Logger that is bound to the FormattedLogger token.",
    "text": "They are the same. Both will result in a new instance of Logger that is bound to the FormattedLogger token."
   },
   {
    "isCorrect": true,
    "html": "The useClass syntax tells the injector to make a new instance of Logger and bind that instance to the FormattedLogger token. The useExisting syntax refers to an already existing object instance declared as Logger.",
    "text": "The useClass syntax tells the injector to make a new instance of Logger and bind that instance to the FormattedLogger token. The useExisting syntax refers to an already existing object instance declared as Logger."
   },
   {
    "isCorrect": false,
    "html": "Both of them are wrong. A strong type connot be used for useClass or useExisting.",
    "text": "Both of them are wrong. A strong type connot be used for useClass or useExisting."
   },
   {
    "isCorrect": false,
    "html": "They are the same. Both will result in the FormattedLogger token being an alias for the instance of Logger.",
    "text": "They are the same. Both will result in the FormattedLogger token being an alias for the instance of Logger."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q25. What is the purpose of the data property (seen in the example below) in a route configuration?\n\n```ts\n   {\n       path: 'customers',\n       component: CustomerListComponent,\n       data: { accountSection: true }\n   }\n```\n\n- [ ] a key/value mapping for setting @Input values on the routed component instance\n- [x] a way to include static, read-only data associated with the route that can be retrieved from the ActivatedRoute\n- [ ] a property on the route that can be used to load dynamic data for the route\n- [ ] an object that will get auto-injected into the routed component's constructor.\n\n1. [TektutorialsHub](https://www.tektutorialshub.com/angular/angular-pass-data-to-route/#:~:text=Angular%20allows%20us%20to%20pass,of%20the%20history%20state%20object)\n2. [StackOverflow](https://stackoverflow.com/a/36835156)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q25. What is the purpose of the data property (seen in the example below) in a route configuration?</h4>",
   "text": "Q25. What is the purpose of the data property (seen in the example below) in a route configuration?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\">   <span class=\"token punctuation\">{</span>\n       path<span class=\"token operator\">:</span> <span class=\"token string\">'customers'</span><span class=\"token punctuation\">,</span>\n       component<span class=\"token operator\">:</span> CustomerListComponent<span class=\"token punctuation\">,</span>\n       data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> accountSection<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "   {\n       path: 'customers',\n       component: CustomerListComponent,\n       data: { accountSection: true }\n   }\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "a key/value mapping for setting @Input values on the routed component instance",
    "text": "a key/value mapping for setting @Input values on the routed component instance"
   },
   {
    "isCorrect": true,
    "html": "a way to include static, read-only data associated with the route that can be retrieved from the ActivatedRoute",
    "text": "a way to include static, read-only data associated with the route that can be retrieved from the ActivatedRoute"
   },
   {
    "isCorrect": false,
    "html": "a property on the route that can be used to load dynamic data for the route",
    "text": "a property on the route that can be used to load dynamic data for the route"
   },
   {
    "isCorrect": false,
    "html": "an object that will get auto-injected into the routed component's constructor.",
    "text": "an object that will get auto-injected into the routed component's constructor."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q26. How does the built-in `ngIf` structural directive change the rendered DOM based on this template syntax?\n\n```ts\n@Component({\n  selector: 'app-product',\n  template: '<div *ngIf=\"product\">{{ product.name }}</div>',\n})\nexport class ProductComponent {\n  @Input() product;\n}\n```\n\n- [ ] The `<div>` acts as a placeholder. If the product class field is \"truthy,\" the `<div>` will get replaced by just the `product.name` value; if not, then nothing will get rendered.\n- [ ] The `<div>` will always be rendered, and if the product field is \"truthy,\" the `<div>` element will contain the `product.name` value; otherwise it will render the `<div>` element with no value in it.\n- [ ] It produces an error, since ngIf is not a built-in structural directive.\n- [x] If the product class field is \"truthy,\" then the rendered DOM will include the `<div>` with the value of the `product.name` field. If it is not \"truthy,' the rendered DOM will not contain the `<div>` element.\n\n[Reference (angular.io)](https://angular.io/api/common/NgIf)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q26. How does the built-in <code>ngIf</code> structural directive change the rendered DOM based on this template syntax?</h4>",
   "text": "Q26. How does the built-in ngIf structural directive change the rendered DOM based on this template syntax?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-product'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;div *ngIf=\"product\"&gt;{{ product.name }}&lt;/div&gt;'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Input</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> product<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Component({\n  selector: 'app-product',\n  template: '<div *ngIf=\"product\">{{ product.name }}</div>',\n})\nexport class ProductComponent {\n  @Input() product;\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The <code>&lt;div&gt;</code> acts as a placeholder. If the product class field is \"truthy,\" the <code>&lt;div&gt;</code> will get replaced by just the <code>product.name</code> value; if not, then nothing will get rendered.",
    "text": "The <div> acts as a placeholder. If the product class field is \"truthy,\" the <div> will get replaced by just the product.name value; if not, then nothing will get rendered."
   },
   {
    "isCorrect": false,
    "html": "The <code>&lt;div&gt;</code> will always be rendered, and if the product field is \"truthy,\" the <code>&lt;div&gt;</code> element will contain the <code>product.name</code> value; otherwise it will render the <code>&lt;div&gt;</code> element with no value in it.",
    "text": "The <div> will always be rendered, and if the product field is \"truthy,\" the <div> element will contain the product.name value; otherwise it will render the <div> element with no value in it."
   },
   {
    "isCorrect": false,
    "html": "It produces an error, since ngIf is not a built-in structural directive.",
    "text": "It produces an error, since ngIf is not a built-in structural directive."
   },
   {
    "isCorrect": true,
    "html": "If the product class field is \"truthy,\" then the rendered DOM will include the <code>&lt;div&gt;</code> with the value of the <code>product.name</code> field. If it is not \"truthy,' the rendered DOM will not contain the <code>&lt;div&gt;</code> element.",
    "text": "If the product class field is \"truthy,\" then the rendered DOM will include the <div> with the value of the product.name field. If it is not \"truthy,' the rendered DOM will not contain the <div> element."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/api/common/NgIf\">Reference (angular.io)</a></p>",
   "text": "Reference (angular.io)"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q27. What does this code accomplish?\n\n```ts\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\n- [ ] It executes a unit test for an NgModule.\n- [ ] It provides a way to code the document structure of an Angular application. The @NgModule is a form of inline code commenting that gets ignored by the TypeScript compiler but will show up with special formatting in code editor applications.\n- [ ] It declares an Angular module named AppModule and makes it available for lazy loading throughout the application.\n- [x] It declares an Angular module named AppModule that contains a bootstrapped component named AppComponent. Then it registers that module with Angular, so the app can start up.\n\n[Angular.io - The basic NgModule](https://angular.io/guide/ngmodules#the-basic-ngmodule)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q27. What does this code accomplish?</h4>",
   "text": "Q27. What does this code accomplish?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>BrowserModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  bootstrap<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">platformBrowserDynamic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bootstrapModule</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It executes a unit test for an NgModule.",
    "text": "It executes a unit test for an NgModule."
   },
   {
    "isCorrect": false,
    "html": "It provides a way to code the document structure of an Angular application. The @NgModule is a form of inline code commenting that gets ignored by the TypeScript compiler but will show up with special formatting in code editor applications.",
    "text": "It provides a way to code the document structure of an Angular application. The @NgModule is a form of inline code commenting that gets ignored by the TypeScript compiler but will show up with special formatting in code editor applications."
   },
   {
    "isCorrect": false,
    "html": "It declares an Angular module named AppModule and makes it available for lazy loading throughout the application.",
    "text": "It declares an Angular module named AppModule and makes it available for lazy loading throughout the application."
   },
   {
    "isCorrect": true,
    "html": "It declares an Angular module named AppModule that contains a bootstrapped component named AppComponent. Then it registers that module with Angular, so the app can start up.",
    "text": "It declares an Angular module named AppModule that contains a bootstrapped component named AppComponent. Then it registers that module with Angular, so the app can start up."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/ngmodules#the-basic-ngmodule\">Angular.io - The basic NgModule</a></p>",
   "text": "Angular.io - The basic NgModule"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q28. Which choice best describes what the _resolve_ property does in this route configuration?\n\n```ts\n{\n   path: ':id',\n   component: UserComponent,\n   resolve: {\n     user: UserResolverService\n   }\n}\n```\n\n- [x] Prior to loading the _UserComponent_, the router will subscribe to the _Observable_ returned by a _resolve_ method in the _UserResolverService_. This technique can be used to get preloaded data for a _route_.\n- [ ] After the _route_ is done resolving, and the component is loaded and rendered, the _UserResolverService_ will have a method named _user_ run that will clean up any open data connections.\n- [ ] There is an error. The correct property name is _onResolve_.\n- [ ] The _UserComponent_ will have a parameter in its constructor for _user_, and the _router_ will handle injecting in a value for that from a call to a _user_ method in the _UserResolverService_.\n\n[angular.io](https://angular.io/api/router/Resolve)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q28. Which choice best describes what the <em>resolve</em> property does in this route configuration?</h4>",
   "text": "Q28. Which choice best describes what the resolve property does in this route configuration?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n   path<span class=\"token operator\">:</span> <span class=\"token string\">':id'</span><span class=\"token punctuation\">,</span>\n   component<span class=\"token operator\">:</span> UserComponent<span class=\"token punctuation\">,</span>\n   resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     user<span class=\"token operator\">:</span> UserResolverService\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "{\n   path: ':id',\n   component: UserComponent,\n   resolve: {\n     user: UserResolverService\n   }\n}\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "Prior to loading the <em>UserComponent</em>, the router will subscribe to the <em>Observable</em> returned by a <em>resolve</em> method in the <em>UserResolverService</em>. This technique can be used to get preloaded data for a <em>route</em>.",
    "text": "Prior to loading the UserComponent, the router will subscribe to the Observable returned by a resolve method in the UserResolverService. This technique can be used to get preloaded data for a route."
   },
   {
    "isCorrect": false,
    "html": "After the <em>route</em> is done resolving, and the component is loaded and rendered, the <em>UserResolverService</em> will have a method named <em>user</em> run that will clean up any open data connections.",
    "text": "After the route is done resolving, and the component is loaded and rendered, the UserResolverService will have a method named user run that will clean up any open data connections."
   },
   {
    "isCorrect": false,
    "html": "There is an error. The correct property name is <em>onResolve</em>.",
    "text": "There is an error. The correct property name is onResolve."
   },
   {
    "isCorrect": false,
    "html": "The <em>UserComponent</em> will have a parameter in its constructor for <em>user</em>, and the <em>router</em> will handle injecting in a value for that from a call to a <em>user</em> method in the <em>UserResolverService</em>.",
    "text": "The UserComponent will have a parameter in its constructor for user, and the router will handle injecting in a value for that from a call to a user method in the UserResolverService."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/api/router/Resolve\">angular.io</a></p>",
   "text": "angular.io"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q29. What is the purpose of the ContentChildren decorator in this component class?\n\n```ts\n@Component({\n . . .\n template: '<ng-content></ng-content›'\n})\nexport class TabsListComponent {\n @ContentChildren(TabComponent) tabs;\n}\n```\n\n- [ ] If any _TabsComponent_ elements are added to the _TabsListComponent_ template, they will get put into the <ng-content> element at runtime.\n- [ ] It creates _TabComponent_ components in the _TabsListComponent_ template when a _TabsListComponent_ is instantiated.\n- [x] It provides access from within the component class to any _TabComponent_ components that were content projected into the <ng-content> for this component.\n- [ ] It restricts the allowed elements that can be put into a _TabsListComponent_ element to allow only _TabComponent_ elements.\n\n[betterprogramming.pub](https://betterprogramming.pub/understanding-contentchildren-with-an-example-e76ce78968db)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q29. What is the purpose of the ContentChildren decorator in this component class?</h4>",
   "text": "Q29. What is the purpose of the ContentChildren decorator in this component class?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;ng-content&gt;&lt;/ng-content›'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TabsListComponent</span> <span class=\"token punctuation\">{</span>\n <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ContentChildren</span></span><span class=\"token punctuation\">(</span>TabComponent<span class=\"token punctuation\">)</span> tabs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Component({\n . . .\n template: '<ng-content></ng-content›'\n})\nexport class TabsListComponent {\n @ContentChildren(TabComponent) tabs;\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "If any <em>TabsComponent</em> elements are added to the <em>TabsListComponent</em> template, they will get put into the &lt;ng-content&gt; element at runtime.",
    "text": "If any TabsComponent elements are added to the TabsListComponent template, they will get put into the <ng-content> element at runtime."
   },
   {
    "isCorrect": false,
    "html": "It creates <em>TabComponent</em> components in the <em>TabsListComponent</em> template when a <em>TabsListComponent</em> is instantiated.",
    "text": "It creates TabComponent components in the TabsListComponent template when a TabsListComponent is instantiated."
   },
   {
    "isCorrect": true,
    "html": "It provides access from within the component class to any <em>TabComponent</em> components that were content projected into the &lt;ng-content&gt; for this component.",
    "text": "It provides access from within the component class to any TabComponent components that were content projected into the <ng-content> for this component."
   },
   {
    "isCorrect": false,
    "html": "It restricts the allowed elements that can be put into a <em>TabsListComponent</em> element to allow only <em>TabComponent</em> elements.",
    "text": "It restricts the allowed elements that can be put into a TabsListComponent element to allow only TabComponent elements."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://betterprogramming.pub/understanding-contentchildren-with-an-example-e76ce78968db\">betterprogramming.pub</a></p>",
   "text": "betterprogramming.pub"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q30. In order for Angular to process components in an application, where do the component types need to be registered?\n\n- [ ] within a script tag in the index.html file\n- [ ] in an NgModule decorator metadata tag named _components_\n- [ ] No registration is needed simply include the component files in an app directory.\n- [x] in an NgModule decorator metadata property named _declarations_\n\n[angular.io](https://angular.io/guide/ngmodule-api#ngmodule-metadata)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q30. In order for Angular to process components in an application, where do the component types need to be registered?</h4>",
   "text": "Q30. In order for Angular to process components in an application, where do the component types need to be registered?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "within a script tag in the index.html file",
    "text": "within a script tag in the index.html file"
   },
   {
    "isCorrect": false,
    "html": "in an NgModule decorator metadata tag named <em>components</em>",
    "text": "in an NgModule decorator metadata tag named components"
   },
   {
    "isCorrect": false,
    "html": "No registration is needed simply include the component files in an app directory.",
    "text": "No registration is needed simply include the component files in an app directory."
   },
   {
    "isCorrect": true,
    "html": "in an NgModule decorator metadata property named <em>declarations</em>",
    "text": "in an NgModule decorator metadata property named declarations"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/ngmodule-api#ngmodule-metadata\">angular.io</a></p>",
   "text": "angular.io"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q31. What is the purpose of the `fixture.detectChanges()` call in this unit test?\n\n```ts\nTestBed.configureTestingModule({\n  declarations: [UserCardComponent],\n});\nlet fixture = TestBed.createComponent(UserCardComponent);\n\nfixture.detectChanges();\n\nexpect(fixture.nativeElement.querySelector('h1').textContent).toContain(\n  fixture.componentInstance.title,\n);\n```\n\n- [ ] It tracks any potential Ul changes and will fail the unit test if any are made.\n- [ ] It is used to ensure component template stability across multiple unit tests in the entire test suite.\n- [x] It forces Angular to perform change detection, which will render the _UserCardComponent_ before you can validate its template.\n- [ ] It is used to log change-detection events to the console during unit test runs.\n\n[angular.io](https://angular.io/api/core/testing/ComponentFixture#detectChanges)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q31. What is the purpose of the <code>fixture.detectChanges()</code> call in this unit test?</h4>",
   "text": "Q31. What is the purpose of the fixture.detectChanges() call in this unit test?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\">TestBed<span class=\"token punctuation\">.</span><span class=\"token function\">configureTestingModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>UserCardComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> fixture <span class=\"token operator\">=</span> TestBed<span class=\"token punctuation\">.</span><span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>UserCardComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfixture<span class=\"token punctuation\">.</span><span class=\"token function\">detectChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fixture<span class=\"token punctuation\">.</span>nativeElement<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>\n  fixture<span class=\"token punctuation\">.</span>componentInstance<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "TestBed.configureTestingModule({\n  declarations: [UserCardComponent],\n});\nlet fixture = TestBed.createComponent(UserCardComponent);\n\nfixture.detectChanges();\n\nexpect(fixture.nativeElement.querySelector('h1').textContent).toContain(\n  fixture.componentInstance.title,\n);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It tracks any potential Ul changes and will fail the unit test if any are made.",
    "text": "It tracks any potential Ul changes and will fail the unit test if any are made."
   },
   {
    "isCorrect": false,
    "html": "It is used to ensure component template stability across multiple unit tests in the entire test suite.",
    "text": "It is used to ensure component template stability across multiple unit tests in the entire test suite."
   },
   {
    "isCorrect": true,
    "html": "It forces Angular to perform change detection, which will render the <em>UserCardComponent</em> before you can validate its template.",
    "text": "It forces Angular to perform change detection, which will render the UserCardComponent before you can validate its template."
   },
   {
    "isCorrect": false,
    "html": "It is used to log change-detection events to the console during unit test runs.",
    "text": "It is used to log change-detection events to the console during unit test runs."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/api/core/testing/ComponentFixture#detectChanges\">angular.io</a></p>",
   "text": "angular.io"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q32. What will the URL segment look like based on the following call to the `Router.navigate` method when goToUser is passed the value 15?\n\n```ts\nexport class ToolsComponent {\n  constructor(private router: Router) {}\n  goToUser(id: number) {\n    this.router.navigate(['user', id]);\n  }\n}\n```\n\n- [x] /user/15\n- [ ] /user?id=15\n- [ ] /user:15\n- [ ] /user;id=15\n\n[angular.io](https://angular.io/api/router/Router#navigate)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q32. What will the URL segment look like based on the following call to the <code>Router.navigate</code> method when goToUser is passed the value 15?</h4>",
   "text": "Q32. What will the URL segment look like based on the following call to the Router.navigate method when goToUser is passed the value 15?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToolsComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> router<span class=\"token operator\">:</span> Router<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">goToUser</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "export class ToolsComponent {\n  constructor(private router: Router) {}\n  goToUser(id: number) {\n    this.router.navigate(['user', id]);\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "/user/15",
    "text": "/user/15"
   },
   {
    "isCorrect": false,
    "html": "/user?id=15",
    "text": "/user?id=15"
   },
   {
    "isCorrect": false,
    "html": "/user:15",
    "text": "/user:15"
   },
   {
    "isCorrect": false,
    "html": "/user;id=15",
    "text": "/user;id=15"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/api/router/Router#navigate\">angular.io</a></p>",
   "text": "angular.io"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q33. When a service is provided for root and is also added to the provider's configuration for a lazy-loaded module, what instance of that service does the injector provide to constructors in the lazy-loaded module?\n\n- [x] A new instance of that service is created when the module is lazy loaded.\n- [ ] Providing a service of the same type at a lazy-loaded module level is not allowed.\n- [ ] If an instance of the service has not been created at the root level yet. it will create one there and then use it.\n- [ ] A single instance of that service is always instantiated at root and is the only one ever used, including within lazy modules.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q33. When a service is provided for root and is also added to the provider's configuration for a lazy-loaded module, what instance of that service does the injector provide to constructors in the lazy-loaded module?</h4>",
   "text": "Q33. When a service is provided for root and is also added to the provider's configuration for a lazy-loaded module, what instance of that service does the injector provide to constructors in the lazy-loaded module?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "A new instance of that service is created when the module is lazy loaded.",
    "text": "A new instance of that service is created when the module is lazy loaded."
   },
   {
    "isCorrect": false,
    "html": "Providing a service of the same type at a lazy-loaded module level is not allowed.",
    "text": "Providing a service of the same type at a lazy-loaded module level is not allowed."
   },
   {
    "isCorrect": false,
    "html": "If an instance of the service has not been created at the root level yet. it will create one there and then use it.",
    "text": "If an instance of the service has not been created at the root level yet. it will create one there and then use it."
   },
   {
    "isCorrect": false,
    "html": "A single instance of that service is always instantiated at root and is the only one ever used, including within lazy modules.",
    "text": "A single instance of that service is always instantiated at root and is the only one ever used, including within lazy modules."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q34. What is the HostBinding decorator doing in this directive?\n\n```ts\n@Directive({\n  selector: ' [appHighlight] ',\n})\nexport class HighlightDirective {\n  @HostBinding('class.highlighted') highlight = true;\n}\n```\n\n- [x] It is adding the CSS class named highlighted to any DOM element that has the appHighlight directive on it.\n- [ ] HostBinding does not do anything on directives, only on components.\n- [ ] It is specifying if the host element gets the highlighted class added to its class attribute, then the directive class field highlight will get set to true; and if it is not added on the host it will get set to false.\n- [ ] It is creating an inline style on the host element with a CSS property named highlight set to true.\n\n[StackOverflow](https://stackoverflow.com/a/46207423)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q34. What is the HostBinding decorator doing in this directive?</h4>",
   "text": "Q34. What is the HostBinding decorator doing in this directive?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Directive</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">' [appHighlight] '</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HighlightDirective</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">HostBinding</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'class.highlighted'</span><span class=\"token punctuation\">)</span> highlight <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Directive({\n  selector: ' [appHighlight] ',\n})\nexport class HighlightDirective {\n  @HostBinding('class.highlighted') highlight = true;\n}\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "It is adding the CSS class named highlighted to any DOM element that has the appHighlight directive on it.",
    "text": "It is adding the CSS class named highlighted to any DOM element that has the appHighlight directive on it."
   },
   {
    "isCorrect": false,
    "html": "HostBinding does not do anything on directives, only on components.",
    "text": "HostBinding does not do anything on directives, only on components."
   },
   {
    "isCorrect": false,
    "html": "It is specifying if the host element gets the highlighted class added to its class attribute, then the directive class field highlight will get set to true; and if it is not added on the host it will get set to false.",
    "text": "It is specifying if the host element gets the highlighted class added to its class attribute, then the directive class field highlight will get set to true; and if it is not added on the host it will get set to false."
   },
   {
    "isCorrect": false,
    "html": "It is creating an inline style on the host element with a CSS property named highlight set to true.",
    "text": "It is creating an inline style on the host element with a CSS property named highlight set to true."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/a/46207423\">StackOverflow</a></p>",
   "text": "StackOverflow"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q35. In reactive forms, what Angular form class type is used on the native DOM <form> element to wire it up?\n\n- [ ] `FormArray`\n- [ ] `FormControl`\n- [x] `FormGroup`\n- [ ] `all of these answers`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q35. In reactive forms, what Angular form class type is used on the native DOM &lt;form&gt; element to wire it up?</h4>",
   "text": "Q35. In reactive forms, what Angular form class type is used on the native DOM <form> element to wire it up?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>FormArray</code>",
    "text": "FormArray"
   },
   {
    "isCorrect": false,
    "html": "<code>FormControl</code>",
    "text": "FormControl"
   },
   {
    "isCorrect": true,
    "html": "<code>FormGroup</code>",
    "text": "FormGroup"
   },
   {
    "isCorrect": false,
    "html": "<code>all of these answers</code>",
    "text": "all of these answers"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q36. Assuming the username FormControl has been configured with a minLength validator, how can you set up an error display in the following reactive forms markup for the username field?\n\n```html\n<form [formGroup]=\"form\"›\n  <input type=\"text\" formControlName= \"username\"›\n  ...\n</form>\n```\n\n- [ ] A\n\n```ts\n    <span *ngIf=\"username.minLength.invalid\"›\n        Username length is not valid\n    </span>\n```\n\n- [ ] B\n\n```ts\n<input type=\"text\" formControlName=\"username\" [showMinLength]=\"true\"›\n```\n\n- [ ] C\n\n```ts\n    <span *ngIf=\"form.get('username').getError('minLength') as minLengthError\">\n      Username must be at least {{ minLengthError.requiredLength }} characters.\n    </span>\n```\n\n- [x] D\n\n```ts\n<input type=\"text\" formControlName=\"username\" #userName=\"ngModer\">\n    <span *ngIf=\"userName.errors.minlength\"›\n      Username must be at least {{ userName.errors.minlength.requiredLength }} characters.\n    </span>\n```\n\n[Codecraft](https://codecraft.tv/courses/angular/forms/template-driven/)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q36. Assuming the username FormControl has been configured with a minLength validator, how can you set up an error display in the following reactive forms markup for the username field?</h4>",
   "text": "Q36. Assuming the username FormControl has been configured with a minLength validator, how can you set up an error display in the following reactive forms markup for the username field?"
  },
  "preformated": {
   "language": "html",
   "html": "<pre><code class=\"language-html\">&lt;form [formGroup]=\"form\"›\n  &lt;input type=\"text\" formControlName= \"username\"›\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
   "text": "<form [formGroup]=\"form\"›\n  <input type=\"text\" formControlName= \"username\"›\n  ...\n</form>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-ts\">    <span class=\"token operator\">&lt;</span>span <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"username.minLength.invalid\"</span>›\n        Username length <span class=\"token keyword\">is</span> not valid\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "A    <span *ngIf=\"username.minLength.invalid\"›\n        Username length is not valid\n    </span>\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> formControlName<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token punctuation\">[</span>showMinLength<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span>›\n</code></pre>",
    "text": "B<input type=\"text\" formControlName=\"username\" [showMinLength]=\"true\"›\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-ts\">    <span class=\"token operator\">&lt;</span>span <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"form.get('username').getError('minLength') as minLengthError\"</span><span class=\"token operator\">&gt;</span>\n      Username must be at least <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> minLengthError<span class=\"token punctuation\">.</span>requiredLength <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> characters<span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "C    <span *ngIf=\"form.get('username').getError('minLength') as minLengthError\">\n      Username must be at least {{ minLengthError.requiredLength }} characters.\n    </span>\n"
   },
   {
    "isCorrect": true,
    "html": "D<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> formControlName<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> #userName<span class=\"token operator\">=</span><span class=\"token string\">\"ngModer\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>span <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"userName.errors.minlength\"</span>›\n      Username must be at least <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> userName<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span>minlength<span class=\"token punctuation\">.</span>requiredLength <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> characters<span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "D<input type=\"text\" formControlName=\"username\" #userName=\"ngModer\">\n    <span *ngIf=\"userName.errors.minlength\"›\n      Username must be at least {{ userName.errors.minlength.requiredLength }} characters.\n    </span>\n"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://codecraft.tv/courses/angular/forms/template-driven/\">Codecraft</a></p>",
   "text": "Codecraft"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q37. How does the emulated view encapsulation mode handle CSS for a component?\n\n- [ ] It renders the CSS exactly how you wrote it without any changes.\n- [ ] It makes use of shadow DOM markup and CSS.\n- [x] It creates unique attributes for DOM elements and scopes the CSS selectors you write to those attribute ids.\n- [ ] It renders all of the CSS rules you write as inline CSS on all of the DOM elements you use them on in the template.\n\n[Angular.io](https://angular.io/guide/view-encapsulation#inspecting-generated-css)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q37. How does the emulated view encapsulation mode handle CSS for a component?</h4>",
   "text": "Q37. How does the emulated view encapsulation mode handle CSS for a component?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It renders the CSS exactly how you wrote it without any changes.",
    "text": "It renders the CSS exactly how you wrote it without any changes."
   },
   {
    "isCorrect": false,
    "html": "It makes use of shadow DOM markup and CSS.",
    "text": "It makes use of shadow DOM markup and CSS."
   },
   {
    "isCorrect": true,
    "html": "It creates unique attributes for DOM elements and scopes the CSS selectors you write to those attribute ids.",
    "text": "It creates unique attributes for DOM elements and scopes the CSS selectors you write to those attribute ids."
   },
   {
    "isCorrect": false,
    "html": "It renders all of the CSS rules you write as inline CSS on all of the DOM elements you use them on in the template.",
    "text": "It renders all of the CSS rules you write as inline CSS on all of the DOM elements you use them on in the template."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/view-encapsulation#inspecting-generated-css\">Angular.io</a></p>",
   "text": "Angular.io"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q38. With the following TestBed setup, what can be used to access the rendered DOM for the UserCardComponent?\n\n```ts\nTestBed.configureTestingModule({\n  declarations: [UserCardComponent],\n});\nlet fixture = TestBed.createComponent(UserCardComponent);\n```\n\n- [ ] `fixture.componentTemplate`\n- [ ] `fixture.getComponentHtml()`\n- [x] `fixture.nativeElement`\n- [ ] `fixture.componentInstance.template `\n\n1. [StackOverflow](https://stackoverflow.com/a/56504773)\n2. [Angular.io](https://angular.io/guide/testing-components-basics#nativeelement)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q38. With the following TestBed setup, what can be used to access the rendered DOM for the UserCardComponent?</h4>",
   "text": "Q38. With the following TestBed setup, what can be used to access the rendered DOM for the UserCardComponent?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\">TestBed<span class=\"token punctuation\">.</span><span class=\"token function\">configureTestingModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>UserCardComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> fixture <span class=\"token operator\">=</span> TestBed<span class=\"token punctuation\">.</span><span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>UserCardComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "TestBed.configureTestingModule({\n  declarations: [UserCardComponent],\n});\nlet fixture = TestBed.createComponent(UserCardComponent);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>fixture.componentTemplate</code>",
    "text": "fixture.componentTemplate"
   },
   {
    "isCorrect": false,
    "html": "<code>fixture.getComponentHtml()</code>",
    "text": "fixture.getComponentHtml()"
   },
   {
    "isCorrect": true,
    "html": "<code>fixture.nativeElement</code>",
    "text": "fixture.nativeElement"
   },
   {
    "isCorrect": false,
    "html": "<code>fixture.componentInstance.template</code>",
    "text": "fixture.componentInstance.template"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q39. Given these two components, what will get rendered to the DOM based on the markup usage?\n\n```ts\n@Component({\n selector: 'app-card',\n template: '<h1>Data Card</h1><ng-content></ng-content>'\n})\nexport class CardComponent { }\n\n@Component({\n selector: 'app-bio',\n template: '<ng-content></ng-content>.\n})\nexport class BioComponent { }\n\n// markup usage:\n<app-card><app-bio>Been around for four years.</app-bio></app-card>\n```\n\n- [x] A\n\n```ts\n <app-card>\n  <h1>Data Card</hl>\n  <app-bio>\n   Been around for four years.\n  </app-bio>\n </app-card>\n```\n\n- [ ] B\n\n```ts\n<h1>Data Card</h1>\n <app-bio>\n  Been around for four years.\n </app-bio>\n```\n\n- [ ] C\n\n```ts\n<app-card>\n  <h1>Data Card</hl>\n  <ng-content></ng-content>\n  <app-bio>\n   Been around for four years.\n   <ng-content></ng-content>\n  </app-bio>\n</app-card>\n```\n\n- [ ] D\n\n```ts\n<app-card>\n  <h1>Data Card</hl>\n</app-card>\n```\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q39. Given these two components, what will get rendered to the DOM based on the markup usage?</h4>",
   "text": "Q39. Given these two components, what will get rendered to the DOM based on the markup usage?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-card'</span><span class=\"token punctuation\">,</span>\n template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;h1&gt;Data Card&lt;/h1&gt;&lt;ng-content&gt;&lt;/ng-content&gt;'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CardComponent</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-bio'</span><span class=\"token punctuation\">,</span>\n template<span class=\"token operator\">:</span> '<span class=\"token operator\">&lt;</span>ng<span class=\"token operator\">-</span>content<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ng<span class=\"token operator\">-</span>content<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BioComponent</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// markup usage:</span>\n<span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>bio<span class=\"token operator\">&gt;</span>Been around <span class=\"token keyword\">for</span> four years<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>bio<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "@Component({\n selector: 'app-card',\n template: '<h1>Data Card</h1><ng-content></ng-content>'\n})\nexport class CardComponent { }\n\n@Component({\n selector: 'app-bio',\n template: '<ng-content></ng-content>.\n})\nexport class BioComponent { }\n\n// markup usage:\n<app-card><app-bio>Been around for four years.</app-bio></app-card>\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "A<br><pre><code class=\"language-ts\"> <span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Data Card<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>hl<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>bio<span class=\"token operator\">&gt;</span>\n   Been around <span class=\"token keyword\">for</span> four years<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>bio<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "A <app-card>\n  <h1>Data Card</hl>\n  <app-bio>\n   Been around for four years.\n  </app-bio>\n </app-card>\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Data Card<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>bio<span class=\"token operator\">&gt;</span>\n  Been around <span class=\"token keyword\">for</span> four years<span class=\"token punctuation\">.</span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>bio<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "B<h1>Data Card</h1>\n <app-bio>\n  Been around for four years.\n </app-bio>\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Data Card<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>hl<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>ng<span class=\"token operator\">-</span>content<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ng<span class=\"token operator\">-</span>content<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>bio<span class=\"token operator\">&gt;</span>\n   Been around <span class=\"token keyword\">for</span> four years<span class=\"token punctuation\">.</span>\n   <span class=\"token operator\">&lt;</span>ng<span class=\"token operator\">-</span>content<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ng<span class=\"token operator\">-</span>content<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>bio<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "C<app-card>\n  <h1>Data Card</hl>\n  <ng-content></ng-content>\n  <app-bio>\n   Been around for four years.\n   <ng-content></ng-content>\n  </app-bio>\n</app-card>\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Data Card<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>hl<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "D<app-card>\n  <h1>Data Card</hl>\n</app-card>\n"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q40. Given the app-title-card component in the code below, what DOM will the app-user-card component render?\n\n```ts\n@Component({\n   selector: 'app-user-card',\n   template: '<app-title-card></app-title-card><p>Jenny Smith</p>'\n})\n\n@Component({\n   selector: 'app-title-card',\n   template: '<h1>User Data</hl>'\n})\n\n// usage of user card component in parent component html\n<app-user-card></app-user-card>\n```\n\n- [x] A\n\n```ts\n<app-user-card>\n  <app-title-card>\n    <h1>User Data</h1>\n  </app-title-card>\n  <p>Jenny Smith</p>\n</app-user-card>\n```\n\n- [ ] B\n\n```ts\n<h1>User Data</h1>\n<p>Jenny Smith<p>\n```\n\n- [ ] C\n\n```ts\n<app-user-card>\n  <app-title-card></app-title-card>\n</app-user-card>\n```\n\n- [ ] D\n\n```ts\n<div app-user-card>\n  <h1 app-title-card>User Data</h1>\n  <p>Jenny Smith</p>\n</div>\n```\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q40. Given the app-title-card component in the code below, what DOM will the app-user-card component render?</h4>",
   "text": "Q40. Given the app-title-card component in the code below, what DOM will the app-user-card component render?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-user-card'</span><span class=\"token punctuation\">,</span>\n   template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;app-title-card&gt;&lt;/app-title-card&gt;&lt;p&gt;Jenny Smith&lt;/p&gt;'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-title-card'</span><span class=\"token punctuation\">,</span>\n   template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;h1&gt;User Data&lt;/hl&gt;'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// usage of user card component in parent component html</span>\n<span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "@Component({\n   selector: 'app-user-card',\n   template: '<app-title-card></app-title-card><p>Jenny Smith</p>'\n})\n\n@Component({\n   selector: 'app-title-card',\n   template: '<h1>User Data</hl>'\n})\n\n// usage of user card component in parent component html\n<app-user-card></app-user-card>\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "A<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>title<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>User Data<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>title<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Jenny Smith<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "A<app-user-card>\n  <app-title-card>\n    <h1>User Data</h1>\n  </app-title-card>\n  <p>Jenny Smith</p>\n</app-user-card>\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>User Data<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Jenny Smith<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "B<h1>User Data</h1>\n<p>Jenny Smith<p>\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>app<span class=\"token operator\">-</span>title<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>title<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>app<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "C<app-user-card>\n  <app-title-card></app-title-card>\n</app-user-card>\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>div app<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h1 app<span class=\"token operator\">-</span>title<span class=\"token operator\">-</span>card<span class=\"token operator\">&gt;</span>User Data<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Jenny Smith<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "D<div app-user-card>\n  <h1 app-title-card>User Data</h1>\n  <p>Jenny Smith</p>\n</div>\n"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q41. Pick the matching code for the custom provider registration that the @Inject () decorator is looking for:\n\n```ts\nconstructor(@Inject('Logger') private logger) { }\n```\n\n- [ ] A\n\n```ts\nproviders: [Logger];\n```\n\n- [x] B\n\n```ts\nproviders: [{ provide: 'Logger', useClass: Logger }];\n```\n\n- [ ] C\n\n```ts\n@Injectable({\n    providedln: 'root'\n})\n```\n\n- [ ] D\n\n```ts\nproviders: [{ provide: 'Logger' }];\n```\n\n1. [StackOverflow](https://stackoverflow.com/a/37315355)\n2. [TektutorialHub](https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/)\n3. [Angular.io - Dependency Injection In Action](https://angular.io/guide/dependency-injection-in-action#supply-a-custom-provider-with-inject)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q41. Pick the matching code for the custom provider registration that the @Inject () decorator is looking for:</h4>",
   "text": "Q41. Pick the matching code for the custom provider registration that the @Inject () decorator is looking for:"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Inject</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Logger'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> logger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "constructor(@Inject('Logger') private logger) { }\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-ts\">providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Logger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>",
    "text": "Aproviders: [Logger];\n"
   },
   {
    "isCorrect": true,
    "html": "B<br><pre><code class=\"language-ts\">providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> provide<span class=\"token operator\">:</span> <span class=\"token string\">'Logger'</span><span class=\"token punctuation\">,</span> useClass<span class=\"token operator\">:</span> Logger <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>",
    "text": "Bproviders: [{ provide: 'Logger', useClass: Logger }];\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    providedln<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>",
    "text": "C@Injectable({\n    providedln: 'root'\n})\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-ts\">providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> provide<span class=\"token operator\">:</span> <span class=\"token string\">'Logger'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>",
    "text": "Dproviders: [{ provide: 'Logger' }];\n"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q42. Which choice best describes the following usage of the HttpClient.get method in the getsettings class method?\n\n```ts\nexport class SettingsService {\n    constructor(private httpClient: HttpClient) { }\n    ...\n\ngetSettings()\n{\n    return this.httpClient.get<Settings>(this.settingsUrl)\n        .pipe(\n            retry(3)\n        );\n}}\n```\n\n- [ ] The RxJs pipe method is an alias for the subscribe method, so a call to `getSettings` will execute the get query. The retry operator is used to tell the pipe call to retry the get query three times.\n- [ ] It will produce an error at runtime because the pipe method is not available off of the `Httpclient.get` call.\n- [ ] Every single call to the getSettings method will result in the Httpclient making three total get requests to the settingsUrl, which is not ideal because there will always be two extra calls that are not needed. The retry operator should not be used in this manner.\n- [x] When the result of the getSettings method is subscribed to, the HTTP GET call will be made; if it fails, it will be retried up to three times before it gives up and returns an error.\n\n1. [learnrxjs.io](https://www.learnrxjs.io/learn-rxjs/operators/error_handling/retry)\n2. [dev.to](https://dev.to/gparlakov/how-does-rxjs-retry-work-412p)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q42. Which choice best describes the following usage of the HttpClient.get method in the getsettings class method?</h4>",
   "text": "Q42. Which choice best describes the following usage of the HttpClient.get method in the getsettings class method?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SettingsService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> httpClient<span class=\"token operator\">:</span> HttpClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n\n<span class=\"token function\">getSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpClient<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Settings<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>settingsUrl<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "export class SettingsService {\n    constructor(private httpClient: HttpClient) { }\n    ...\n\ngetSettings()\n{\n    return this.httpClient.get<Settings>(this.settingsUrl)\n        .pipe(\n            retry(3)\n        );\n}}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The RxJs pipe method is an alias for the subscribe method, so a call to <code>getSettings</code> will execute the get query. The retry operator is used to tell the pipe call to retry the get query three times.",
    "text": "The RxJs pipe method is an alias for the subscribe method, so a call to getSettings will execute the get query. The retry operator is used to tell the pipe call to retry the get query three times."
   },
   {
    "isCorrect": false,
    "html": "It will produce an error at runtime because the pipe method is not available off of the <code>Httpclient.get</code> call.",
    "text": "It will produce an error at runtime because the pipe method is not available off of the Httpclient.get call."
   },
   {
    "isCorrect": false,
    "html": "Every single call to the getSettings method will result in the Httpclient making three total get requests to the settingsUrl, which is not ideal because there will always be two extra calls that are not needed. The retry operator should not be used in this manner.",
    "text": "Every single call to the getSettings method will result in the Httpclient making three total get requests to the settingsUrl, which is not ideal because there will always be two extra calls that are not needed. The retry operator should not be used in this manner."
   },
   {
    "isCorrect": true,
    "html": "When the result of the getSettings method is subscribed to, the HTTP GET call will be made; if it fails, it will be retried up to three times before it gives up and returns an error.",
    "text": "When the result of the getSettings method is subscribed to, the HTTP GET call will be made; if it fails, it will be retried up to three times before it gives up and returns an error."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q43. When a service requires some setup to initialize its default state through a method, how can you make sure that said method is invoked before the service gets injected anywhere?\n\n- [ ] Put the logic of that service method into the service constructor instead.\n- [x] Use a factory provider at the root AppModule level that depends on the service to call that service method.\n- [ ] it is not possible to do it at application start; you can do it only at a component level.\n- [ ] Instantiate an instance of the service at the global level (window scope) and then call that method.\n\n1. [Angular.io](https://angular.io/guide/dependency-injection-providers)\n2. [Stackoverflow](https://stackoverflow.com/questions/39803876/how-to-use-factory-provider)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q43. When a service requires some setup to initialize its default state through a method, how can you make sure that said method is invoked before the service gets injected anywhere?</h4>",
   "text": "Q43. When a service requires some setup to initialize its default state through a method, how can you make sure that said method is invoked before the service gets injected anywhere?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "Put the logic of that service method into the service constructor instead.",
    "text": "Put the logic of that service method into the service constructor instead."
   },
   {
    "isCorrect": true,
    "html": "Use a factory provider at the root AppModule level that depends on the service to call that service method.",
    "text": "Use a factory provider at the root AppModule level that depends on the service to call that service method."
   },
   {
    "isCorrect": false,
    "html": "it is not possible to do it at application start; you can do it only at a component level.",
    "text": "it is not possible to do it at application start; you can do it only at a component level."
   },
   {
    "isCorrect": false,
    "html": "Instantiate an instance of the service at the global level (window scope) and then call that method.",
    "text": "Instantiate an instance of the service at the global level (window scope) and then call that method."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q44. What statement best describes this usage of the TestBed?\n\n```ts\nconst spy = jasmine.createSpyObj('DataService', ['getUsersFromApi']);\nTestBed.configureTestingModule({\n  providers: [UserService, { provide: DataService, useValue: spy }],\n});\nconst userService = TestBed.get(UserService);\n```\n\n- [ ] The TestBed is required anytime you want to make use of a spy object in a unit test for an Angular provider.\n- [ ] The TestBed is being used to test a component's view.\n- [x] The TestBed scaffolds an NgModule with two providers and handles any dependency injection. If any Angular class requests the DataService in its constructor, the TestBed will inject spy in that constructor.\n- [ ] The TestBed is configuring the test runner to tell it to only execute tests for the two providers listed in its providers array.\n- `All other tests be ignored, including tests that assert results against one of these providers and a non-defined provider.`\n  `Although it will work when multiple providers in this configuration are asserted against in a single test.`\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q44. What statement best describes this usage of the TestBed?</h4>",
   "text": "Q44. What statement best describes this usage of the TestBed?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token keyword\">const</span> spy <span class=\"token operator\">=</span> jasmine<span class=\"token punctuation\">.</span><span class=\"token function\">createSpyObj</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DataService'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'getUsersFromApi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nTestBed<span class=\"token punctuation\">.</span><span class=\"token function\">configureTestingModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>UserService<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> provide<span class=\"token operator\">:</span> DataService<span class=\"token punctuation\">,</span> useValue<span class=\"token operator\">:</span> spy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> userService <span class=\"token operator\">=</span> TestBed<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>UserService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "const spy = jasmine.createSpyObj('DataService', ['getUsersFromApi']);\nTestBed.configureTestingModule({\n  providers: [UserService, { provide: DataService, useValue: spy }],\n});\nconst userService = TestBed.get(UserService);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The TestBed is required anytime you want to make use of a spy object in a unit test for an Angular provider.",
    "text": "The TestBed is required anytime you want to make use of a spy object in a unit test for an Angular provider."
   },
   {
    "isCorrect": false,
    "html": "The TestBed is being used to test a component's view.",
    "text": "The TestBed is being used to test a component's view."
   },
   {
    "isCorrect": true,
    "html": "The TestBed scaffolds an NgModule with two providers and handles any dependency injection. If any Angular class requests the DataService in its constructor, the TestBed will inject spy in that constructor.",
    "text": "The TestBed scaffolds an NgModule with two providers and handles any dependency injection. If any Angular class requests the DataService in its constructor, the TestBed will inject spy in that constructor."
   },
   {
    "isCorrect": false,
    "html": "The TestBed is configuring the test runner to tell it to only execute tests for the two providers listed in its providers array.",
    "text": "The TestBed is configuring the test runner to tell it to only execute tests for the two providers listed in its providers array."
   },
   {
    "isCorrect": false,
    "html": "e&gt;All other tests be ignored, including tests that assert results against one of these providers and a non-defined provider.\n<code>Although it will work when multiple providers in this configuration are asserted against in a single test.</code>",
    "text": "e>All other tests be ignored, including tests that assert results against one of these providers and a non-defined provider.\nAlthough it will work when multiple providers in this configuration are asserted against in a single test."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q45. What is the primary difference between a component and a directive?\n\n- [ ] A component uses a selector metadata property and a directive does not.\n- [ ] A directive can be used for adding custom events to the DOM and a component cannot.\n- [x] A component has a template and a directive does not.\n- [ ] A directive can target only native DOM elements.\n\n[StackOverflow](https://stackoverflow.com/a/34616190)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q45. What is the primary difference between a component and a directive?</h4>",
   "text": "Q45. What is the primary difference between a component and a directive?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A component uses a selector metadata property and a directive does not.",
    "text": "A component uses a selector metadata property and a directive does not."
   },
   {
    "isCorrect": false,
    "html": "A directive can be used for adding custom events to the DOM and a component cannot.",
    "text": "A directive can be used for adding custom events to the DOM and a component cannot."
   },
   {
    "isCorrect": true,
    "html": "A component has a template and a directive does not.",
    "text": "A component has a template and a directive does not."
   },
   {
    "isCorrect": false,
    "html": "A directive can target only native DOM elements.",
    "text": "A directive can target only native DOM elements."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/a/34616190\">StackOverflow</a></p>",
   "text": "StackOverflow"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q46. What could you add to this directive class to allow the truncate length to be set during directive usage in markup?\n\n```ts\n@Directive({\n    selector: '[appTruncate]'\n})\nexport class TruncateDirective {\n    . . .\n}\n\n// example of desired usage:\n<p [appTruncate]=\"10\">Some very long text here</p>\n```\n\n- [x] `@Input() appTruncate: number;`\n- [ ] `@Output() appTruncate;`\n- [ ] `constructor(maxLength: number) { }`\n- [ ] `Nothing. The directive selector cannot be used to pass in values to the directive.`\n\n1. [Angular.io](https://angular.io/guide/attribute-directives#passing-values-into-an-attribute-directive)\n2. [StackOverflow](https://stackoverflow.com/a/46303049)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q46. What could you add to this directive class to allow the truncate length to be set during directive usage in markup?</h4>",
   "text": "Q46. What could you add to this directive class to allow the truncate length to be set during directive usage in markup?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Directive</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token operator\">:</span> <span class=\"token string\">'[appTruncate]'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TruncateDirective</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// example of desired usage:</span>\n<span class=\"token operator\">&lt;</span>p <span class=\"token punctuation\">[</span>appTruncate<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"10\"</span><span class=\"token operator\">&gt;</span>Some very long text here<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "@Directive({\n    selector: '[appTruncate]'\n})\nexport class TruncateDirective {\n    . . .\n}\n\n// example of desired usage:\n<p [appTruncate]=\"10\">Some very long text here</p>\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "<code>@Input() appTruncate: number;</code>",
    "text": "@Input() appTruncate: number;"
   },
   {
    "isCorrect": false,
    "html": "<code>@Output() appTruncate;</code>",
    "text": "@Output() appTruncate;"
   },
   {
    "isCorrect": false,
    "html": "<code>constructor(maxLength: number) { }</code>",
    "text": "constructor(maxLength: number) { }"
   },
   {
    "isCorrect": false,
    "html": "<code>Nothing. The directive selector cannot be used to pass in values to the directive.</code>",
    "text": "Nothing. The directive selector cannot be used to pass in values to the directive."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q47. How can you pass query parameters to this `HttpClient.get` request?\n\n```ts\nexport class OrderService {\n  constructor(private httpClient: HttpClient) {}\n\n  getOrdersByYear(year: number): Observable<Order[]> {\n    return this.httpClient.get<Order[]>(this.ordersUrl);\n  }\n}\n```\n\n- [ ] A `return this.httpClient.get<Order[]>(this.ordersUrl, {'year': year})`\n- [ ] B `return this.httpClient.get<Order[]>(this.ordersUrl, year)`\n- [x] C\n\n```ts\nconst options = { params: new HttpParams().set('year', year) };\nreturn this.httpClient.get<Order[]>(this.ordersUrl, options);\n```\n\n- [ ] D\n\n```ts\ngetOrdersByYear(year: number): Observable<Order[]> {\n    return this.httpClient.addParam('year', year).get<Order[]>(this.ordersUrl, year);\n}\n```\n\n1. [StackOverflow](https://stackoverflow.com/a/34475594)\n2. [TektutorialHub](https://www.tektutorialshub.com/angular/angular-pass-url-parameters-query-strings/#httpparams)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q47. How can you pass query parameters to this <code>HttpClient.get</code> request?</h4>",
   "text": "Q47. How can you pass query parameters to this HttpClient.get request?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> httpClient<span class=\"token operator\">:</span> HttpClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getOrdersByYear</span><span class=\"token punctuation\">(</span>year<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span>Order<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpClient<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Order<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ordersUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "export class OrderService {\n  constructor(private httpClient: HttpClient) {}\n\n  getOrdersByYear(year: number): Observable<Order[]> {\n    return this.httpClient.get<Order[]>(this.ordersUrl);\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A <code>return this.httpClient.get&lt;Order[]&gt;(this.ordersUrl, {'year': year})</code>",
    "text": "A return this.httpClient.get<Order[]>(this.ordersUrl, {'year': year})"
   },
   {
    "isCorrect": false,
    "html": "B <code>return this.httpClient.get&lt;Order[]&gt;(this.ordersUrl, year)</code>",
    "text": "B return this.httpClient.get<Order[]>(this.ordersUrl, year)"
   },
   {
    "isCorrect": true,
    "html": "C<br><pre><code class=\"language-ts\"><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'year'</span><span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpClient<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Order<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ordersUrl<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
    "text": "Cconst options = { params: new HttpParams().set('year', year) };\nreturn this.httpClient.get<Order[]>(this.ordersUrl, options);\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-ts\"><span class=\"token function\">getOrdersByYear</span><span class=\"token punctuation\">(</span>year<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span>Order<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">addParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">'year'</span><span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Order<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ordersUrl<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "DgetOrdersByYear(year: number): Observable<Order[]> {\n    return this.httpClient.addParam('year', year).get<Order[]>(this.ordersUrl, year);\n}\n"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q48. Assuming the `DataService` has been registered in the providers for the application, which answer best describes what happens based on this component's constructor?\n\n```ts\n@Component({\n    ...\n})\nexport class OrderHistoryComponent {\n    constructor(private dataService: DataService) {}\n    ...\n}\n```\n\n- [ ] It is declaring that the `OrderHistoryComponent` will have its own version of a `DataService` and that it should never use any existing instances. The `DataService` would need to be instantiated within the class as a private field for this code to be complete and working.\n- [x] When Angular creates a new instance of the `OrderHistoryComponent`, the injector will provide an instance of a `DataService` class to the component constructor's first argument. The constructor's `dataService` parameter will be used to set a private instance field with the same name on the instance.\n- [ ] It provides a way to do component testing only; the constructor has no usage in the actual run of the Angular application.\n- [ ] It enables the custom element that the component targets to have a custom property named `dataService` that can be used to bind an existing `DataService` instance to.\n\n1. [StackOverflow](https://stackoverflow.com/a/49755822)\n2. [Angular.io - Dependency Injection](https://angular.io/guide/dependency-injection)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q48. Assuming the <code>DataService</code> has been registered in the providers for the application, which answer best describes what happens based on this component's constructor?</h4>",
   "text": "Q48. Assuming the DataService has been registered in the providers for the application, which answer best describes what happens based on this component's constructor?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderHistoryComponent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> dataService<span class=\"token operator\">:</span> DataService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Component({\n    ...\n})\nexport class OrderHistoryComponent {\n    constructor(private dataService: DataService) {}\n    ...\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It is declaring that the <code>OrderHistoryComponent</code> will have its own version of a <code>DataService</code> and that it should never use any existing instances. The <code>DataService</code> would need to be instantiated within the class as a private field for this code to be complete and working.",
    "text": "It is declaring that the OrderHistoryComponent will have its own version of a DataService and that it should never use any existing instances. The DataService would need to be instantiated within the class as a private field for this code to be complete and working."
   },
   {
    "isCorrect": true,
    "html": "When Angular creates a new instance of the <code>OrderHistoryComponent</code>, the injector will provide an instance of a <code>DataService</code> class to the component constructor's first argument. The constructor's <code>dataService</code> parameter will be used to set a private instance field with the same name on the instance.",
    "text": "When Angular creates a new instance of the OrderHistoryComponent, the injector will provide an instance of a DataService class to the component constructor's first argument. The constructor's dataService parameter will be used to set a private instance field with the same name on the instance."
   },
   {
    "isCorrect": false,
    "html": "It provides a way to do component testing only; the constructor has no usage in the actual run of the Angular application.",
    "text": "It provides a way to do component testing only; the constructor has no usage in the actual run of the Angular application."
   },
   {
    "isCorrect": false,
    "html": "It enables the custom element that the component targets to have a custom property named <code>dataService</code> that can be used to bind an existing <code>DataService</code> instance to.",
    "text": "It enables the custom element that the component targets to have a custom property named dataService that can be used to bind an existing DataService instance to."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q49. Finish this markup using the `ngIf` directive to implement an else case that will display the text \"User is not active\":\n\n```ts\n<div *ngIf=\"userIsActive; else inactive\">\n  Currently active!\n</div>\n```\n\n- [ ] A\n\n```ts\n<div #inactive>User is not active.</div>\n```\n\n- [ ] B\n\n```ts\n<div *ngIf=\"inactive\">\n  User is not active.\n</div>\n```\n\n- [ ] C\n\n```ts\n<ng-template #else=\"inactive\">\n  <div>User is not active.</div>\n</ng-template>\n```\n\n- [x] D\n\n```ts\n<ng-template #inactive>\n  <div>User is not active.</div>\n</ng-template>\n```\n\n[Angular.io](https://angular.io/api/common/NgIf)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q49. Finish this markup using the <code>ngIf</code> directive to implement an else case that will display the text \"User is not active\":</h4>",
   "text": "Q49. Finish this markup using the ngIf directive to implement an else case that will display the text \"User is not active\":"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"userIsActive; else inactive\"</span><span class=\"token operator\">&gt;</span>\n  Currently active<span class=\"token operator\">!</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<div *ngIf=\"userIsActive; else inactive\">\n  Currently active!\n</div>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>div #inactive<span class=\"token operator\">&gt;</span>User <span class=\"token keyword\">is</span> not active<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "A<div #inactive>User is not active.</div>\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"inactive\"</span><span class=\"token operator\">&gt;</span>\n  User <span class=\"token keyword\">is</span> not active<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "B<div *ngIf=\"inactive\">\n  User is not active.\n</div>\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>ng<span class=\"token operator\">-</span>template #<span class=\"token keyword\">else</span><span class=\"token operator\">=</span><span class=\"token string\">\"inactive\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>User <span class=\"token keyword\">is</span> not active<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ng<span class=\"token operator\">-</span>template<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "C<ng-template #else=\"inactive\">\n  <div>User is not active.</div>\n</ng-template>\n"
   },
   {
    "isCorrect": true,
    "html": "D<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>ng<span class=\"token operator\">-</span>template #inactive<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>User <span class=\"token keyword\">is</span> not active<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ng<span class=\"token operator\">-</span>template<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "D<ng-template #inactive>\n  <div>User is not active.</div>\n</ng-template>\n"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/api/common/NgIf\">Angular.io</a></p>",
   "text": "Angular.io"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q50. What is the correct syntax for a route definition to lazy load a feature module?\n\n- [ ] A\n\n```ts\n{\n    path: 'users',\n    lazy: './users/users.module#UsersModule'\n}\n```\n\n- [x] B\n\n```ts\n{\n    path: 'users',\n    loadChildren: () => import('./users/users.module').then(m => m.UserModule)\n}\n```\n\n- [ ] C\n\n```ts\n{\n    path: 'users',\n    loadChildren: './users/users.module#UsersModule'\n}\n```\n\n- [ ] D\n\n```ts\n{\n    path: 'users',\n    module: UsersModule\n}\n```\n\n[Angular.io - Lazy Loading Modules](https://angular.io/guide/lazy-loading-ngmodules)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q50. What is the correct syntax for a route definition to lazy load a feature module?</h4>",
   "text": "Q50. What is the correct syntax for a route definition to lazy load a feature module?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span>\n    lazy<span class=\"token operator\">:</span> <span class=\"token string\">'./users/users.module#UsersModule'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "{\n    path: 'users',\n    lazy: './users/users.module#UsersModule'\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span>\n    lazy<span class=\"token operator\">:</span> <span class=\"token string\">'./users/users.module#UsersModule'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "A{\n    path: 'users',\n    lazy: './users/users.module#UsersModule'\n}\n"
   },
   {
    "isCorrect": true,
    "html": "B<br><pre><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">loadChildren</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./users/users.module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=&gt;</span> m<span class=\"token punctuation\">.</span>UserModule<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "B{\n    path: 'users',\n    loadChildren: () => import('./users/users.module').then(m => m.UserModule)\n}\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span>\n    loadChildren<span class=\"token operator\">:</span> <span class=\"token string\">'./users/users.module#UsersModule'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "C{\n    path: 'users',\n    loadChildren: './users/users.module#UsersModule'\n}\n"
   },
   {
    "isCorrect": false,
    "html": "D<br><pre><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token operator\">:</span> UsersModule\n<span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "D{\n    path: 'users',\n    module: UsersModule\n}\n"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/lazy-loading-ngmodules\">Angular.io - Lazy Loading Modules</a></p>",
   "text": "Angular.io - Lazy Loading Modules"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q51. Describe how the validation is set up and configured in this reactive forms example:\n\n```ts\nexport class UserFormControl implements OnInit {\n    ...\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            username: this.formBuilder.control('',\n                [Validators.required, Validators.minLength(5), this.unique]),\n        )};\n    }\n    unique(control: FormControl) {\n        return control.value !== 'admin' ? null: {notUnique: true};\n    }\n}\n```\n\n- [ ] The `FormControl` for `username` is getting configured to exclude three validators from the validators that it is allowed to use.\n- [ ] The `FormControl` for `username` is getting configured to allow three possible validators to be used: `required, maxLength`, and a custom one named `unique`. To enable these `validators`, a validator directive would need to be put on the form fields in the markup.\n- [ ] Validation cannot be set up this way in reactive forms.\n- [x] The `FormControl` for `username` is getting configured with three validators: the `required` and `minLength` validators that come from Angular, and a custom validator function named `unique` that checks for the value not equal to the string `admin`.\n\n1. [Angular.io - Form Validation](https://angular.io/guide/form-validation)\n2. [Angular University Blog](https://blog.angular-university.io/angular-custom-validators/)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q51. Describe how the validation is set up and configured in this reactive forms example:</h4>",
   "text": "Q51. Describe how the validation is set up and configured in this reactive forms example:"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFormControl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            username<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">control</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span>Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span><span class=\"token function\">minLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>control<span class=\"token operator\">:</span> FormControl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> control<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> <span class=\"token string\">'admin'</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>notUnique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "export class UserFormControl implements OnInit {\n    ...\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            username: this.formBuilder.control('',\n                [Validators.required, Validators.minLength(5), this.unique]),\n        )};\n    }\n    unique(control: FormControl) {\n        return control.value !== 'admin' ? null: {notUnique: true};\n    }\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The <code>FormControl</code> for <code>username</code> is getting configured to exclude three validators from the validators that it is allowed to use.",
    "text": "The FormControl for username is getting configured to exclude three validators from the validators that it is allowed to use."
   },
   {
    "isCorrect": false,
    "html": "The <code>FormControl</code> for <code>username</code> is getting configured to allow three possible validators to be used: <code>required, maxLength</code>, and a custom one named <code>unique</code>. To enable these <code>validators</code>, a validator directive would need to be put on the form fields in the markup.",
    "text": "The FormControl for username is getting configured to allow three possible validators to be used: required, maxLength, and a custom one named unique. To enable these validators, a validator directive would need to be put on the form fields in the markup."
   },
   {
    "isCorrect": false,
    "html": "Validation cannot be set up this way in reactive forms.",
    "text": "Validation cannot be set up this way in reactive forms."
   },
   {
    "isCorrect": true,
    "html": "The <code>FormControl</code> for <code>username</code> is getting configured with three validators: the <code>required</code> and <code>minLength</code> validators that come from Angular, and a custom validator function named <code>unique</code> that checks for the value not equal to the string <code>admin</code>.",
    "text": "The FormControl for username is getting configured with three validators: the required and minLength validators that come from Angular, and a custom validator function named unique that checks for the value not equal to the string admin."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q52. What does the Injectable decorator do on this service class?\n\n```ts\n@Injectable({\n    providedIn: 'root'\n)}\nexport class DataService { }\n```\n\n- [ ] It registers a provider for the service that is available only at the root module level, not to any children modules.\n- [x] It registers a provider for the service in the root application injector, making a single instance of it available throughout the application.\n- [ ] It makes it so the service can be injected only in the bootstrapped component for the application.\n- [ ] It sets up a compile time rule that allows you to put the service type only in the providers metadata property of the root NgModule.\n\n[Angular.io](https://angular.io/guide/providers#providing-a-service)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q52. What does the Injectable decorator do on this service class?</h4>",
   "text": "Q52. What does the Injectable decorator do on this service class?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    providedIn<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataService</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Injectable({\n    providedIn: 'root'\n)}\nexport class DataService { }\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It registers a provider for the service that is available only at the root module level, not to any children modules.",
    "text": "It registers a provider for the service that is available only at the root module level, not to any children modules."
   },
   {
    "isCorrect": true,
    "html": "It registers a provider for the service in the root application injector, making a single instance of it available throughout the application.",
    "text": "It registers a provider for the service in the root application injector, making a single instance of it available throughout the application."
   },
   {
    "isCorrect": false,
    "html": "It makes it so the service can be injected only in the bootstrapped component for the application.",
    "text": "It makes it so the service can be injected only in the bootstrapped component for the application."
   },
   {
    "isCorrect": false,
    "html": "It sets up a compile time rule that allows you to put the service type only in the providers metadata property of the root NgModule.",
    "text": "It sets up a compile time rule that allows you to put the service type only in the providers metadata property of the root NgModule."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/providers#providing-a-service\">Angular.io</a></p>",
   "text": "Angular.io"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q53. Describe the usage of this code\n\n```ts\nexport interface AppSettings {\n  title: string;\n  version: number;\n}\nexport const APP_SETTINGS = new InjectionToken<AppSettings>('app.settings');\n```\n\n- [ ] The InjectionToken is adding an instance of the AppSettings to the root provider via the InjectionToken constructor call, making it automatically available to all NgModules, services and components throughout the Angular application without the need to inject it anywhere.\n- [x] The InjectionToken is used to create a provider token for a non-class dependency. An Object literal can be provider as a value for the APP_SETTINGS dependency provider type that can then be injected into components, services, etc ..\n- [ ] The InjectionToken is used to create a dynamic decorator for the AppSettings that can be used on constructor parameters via an @AppSettings decorator.\n- [ ] This code has an error since you cannot use a TypeScript interface for the generic type on the InjectionToken\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q53. Describe the usage of this code</h4>",
   "text": "Q53. Describe the usage of this code"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AppSettings</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  version<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">APP_SETTINGS</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InjectionToken<span class=\"token operator\">&lt;</span>AppSettings<span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'app.settings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "export interface AppSettings {\n  title: string;\n  version: number;\n}\nexport const APP_SETTINGS = new InjectionToken<AppSettings>('app.settings');\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "The InjectionToken is adding an instance of the AppSettings to the root provider via the InjectionToken constructor call, making it automatically available to all NgModules, services and components throughout the Angular application without the need to inject it anywhere.",
    "text": "The InjectionToken is adding an instance of the AppSettings to the root provider via the InjectionToken constructor call, making it automatically available to all NgModules, services and components throughout the Angular application without the need to inject it anywhere."
   },
   {
    "isCorrect": true,
    "html": "The InjectionToken is used to create a provider token for a non-class dependency. An Object literal can be provider as a value for the APP_SETTINGS dependency provider type that can then be injected into components, services, etc ..",
    "text": "The InjectionToken is used to create a provider token for a non-class dependency. An Object literal can be provider as a value for the APP_SETTINGS dependency provider type that can then be injected into components, services, etc .."
   },
   {
    "isCorrect": false,
    "html": "The InjectionToken is used to create a dynamic decorator for the AppSettings that can be used on constructor parameters via an @AppSettings decorator.",
    "text": "The InjectionToken is used to create a dynamic decorator for the AppSettings that can be used on constructor parameters via an @AppSettings decorator."
   },
   {
    "isCorrect": false,
    "html": "This code has an error since you cannot use a TypeScript interface for the generic type on the InjectionToken",
    "text": "This code has an error since you cannot use a TypeScript interface for the generic type on the InjectionToken"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q54. For the following template-driven forms example, what argument can be passed to the submit method in the click event to submit the data for the form?\n\n```ts\n<form #form=\"ngForm\">\n\t<input type=\"text\" ngModel=\"firstName\">\n\t<input type=\"text\" ngModel=\"lastName\">\n\t<button (click)=\"submit()\">Save</button>\n</form>\n```\n\n- [x] submit(form.value)\n- [ ] submit($event)\n- [ ] submit(ngForm.value)\n- [ ] submit(FirstName, lastName)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q54. For the following template-driven forms example, what argument can be passed to the submit method in the click event to submit the data for the form?</h4>",
   "text": "Q54. For the following template-driven forms example, what argument can be passed to the submit method in the click event to submit the data for the form?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>form #form<span class=\"token operator\">=</span><span class=\"token string\">\"ngForm\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> ngModel<span class=\"token operator\">=</span><span class=\"token string\">\"firstName\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> ngModel<span class=\"token operator\">=</span><span class=\"token string\">\"lastName\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token function\">button</span> <span class=\"token punctuation\">(</span>click<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit()\"</span><span class=\"token operator\">&gt;</span>Save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<form #form=\"ngForm\">\n    <input type=\"text\" ngModel=\"firstName\">\n    <input type=\"text\" ngModel=\"lastName\">\n    <button (click)=\"submit()\">Save</button>\n</form>\n"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "submit(form.value)",
    "text": "submit(form.value)"
   },
   {
    "isCorrect": false,
    "html": "submit($event)",
    "text": "submit($event)"
   },
   {
    "isCorrect": false,
    "html": "submit(ngForm.value)",
    "text": "submit(ngForm.value)"
   },
   {
    "isCorrect": false,
    "html": "submit(FirstName, lastName)",
    "text": "submit(FirstName, lastName)"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q55. What is the purpose of the `prelodingStrategy` property configuration in this router code?\n\n```ts\nRouterModule.forRoot(\n  ...{\n    preloadingStrategy: PreloadAllModules,\n  },\n);\n```\n\n- [ ] It enables the option to flag individual routes for preloading.\n- [ ] It preloads all dependencies for routes, creating instances of services when the app first starts up\n- [ ] It ensures all modules get built into a single app module bundle file.\n- [x] It configures the router to immediately load all routes that have a loadChildren property(routes that are typically loaded when requested)\n\nReferences:\n\n- [Angular Router, PreloadAllModules](https://angular.io/api/router/PreloadAllModules)\n- [Route preloading in Angular](https://web.dev/route-preloading-in-angular/)\n- [Preloading strategy](https://www.tektutorialshub.com/angular/angular-preloading-strategy/)\n- [Custom preloading strategy](https://www.concretepage.com/angular-2/angular-custom-preloading-strategy#Preloading)\n- [Preloading strategy, save loading time](https://medium.com/geekculture/preloading-strategy-in-angularsave-loading-time-ca791074fe28)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q55. What is the purpose of the <code>prelodingStrategy</code> property configuration in this router code?</h4>",
   "text": "Q55. What is the purpose of the prelodingStrategy property configuration in this router code?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\">RouterModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">{</span>\n    preloadingStrategy<span class=\"token operator\">:</span> PreloadAllModules<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
   "text": "RouterModule.forRoot(\n  ...{\n    preloadingStrategy: PreloadAllModules,\n  },\n);\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It enables the option to flag individual routes for preloading.",
    "text": "It enables the option to flag individual routes for preloading."
   },
   {
    "isCorrect": false,
    "html": "It preloads all dependencies for routes, creating instances of services when the app first starts up",
    "text": "It preloads all dependencies for routes, creating instances of services when the app first starts up"
   },
   {
    "isCorrect": false,
    "html": "It ensures all modules get built into a single app module bundle file.",
    "text": "It ensures all modules get built into a single app module bundle file."
   },
   {
    "isCorrect": true,
    "html": "It configures the router to immediately load all routes that have a loadChildren property(routes that are typically loaded when requested)",
    "text": "It configures the router to immediately load all routes that have a loadChildren property(routes that are typically loaded when requested)"
   },
   {
    "isCorrect": false,
    "html": "ref=\"https://angular.io/api/router/PreloadAllModules\"&gt;Angular Router, PreloadAllModules",
    "text": "ref=\"https://angular.io/api/router/PreloadAllModules\">Angular Router, PreloadAllModules"
   },
   {
    "isCorrect": false,
    "html": "ref=\"https://web.dev/route-preloading-in-angular/\"&gt;Route preloading in Angular",
    "text": "ref=\"https://web.dev/route-preloading-in-angular/\">Route preloading in Angular"
   },
   {
    "isCorrect": false,
    "html": "ref=\"https://www.tektutorialshub.com/angular/angular-preloading-strategy/\"&gt;Preloading strategy",
    "text": "ref=\"https://www.tektutorialshub.com/angular/angular-preloading-strategy/\">Preloading strategy"
   },
   {
    "isCorrect": false,
    "html": "ref=\"https://www.concretepage.com/angular-2/angular-custom-preloading-strategy#Preloading\"&gt;Custom preloading strategy",
    "text": "ref=\"https://www.concretepage.com/angular-2/angular-custom-preloading-strategy#Preloading\">Custom preloading strategy"
   },
   {
    "isCorrect": false,
    "html": "ref=\"https://medium.com/geekculture/preloading-strategy-in-angularsave-loading-time-ca791074fe28\"&gt;Preloading strategy, save loading time",
    "text": "ref=\"https://medium.com/geekculture/preloading-strategy-in-angularsave-loading-time-ca791074fe28\">Preloading strategy, save loading time"
   }
  ],
  "reference": {
   "html": "<p>References:</p>",
   "text": "References:"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q56. What is an alternative way to write this markup to bind the value of the class field `userName` to the `h1` element title property?\n\n```html\n<h1 [title]=\"userName\">Current user is {{ userName }}</h1>\n```\n\n- [ ] title=\"userName\"\n- [x] title=\"{{ userName }}\"\n- [ ] title=\"{{ 'userName' }}\"\n- [ ] The only way to do it is by using the square brackets.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q56. What is an alternative way to write this markup to bind the value of the class field <code>userName</code> to the <code>h1</code> element title property?</h4>",
   "text": "Q56. What is an alternative way to write this markup to bind the value of the class field userName to the h1 element title property?"
  },
  "preformated": {
   "language": "html",
   "html": "<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">[title]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Current user is {{ userName }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
   "text": "<h1 [title]=\"userName\">Current user is {{ userName }}</h1>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "title=\"userName\"",
    "text": "title=\"userName\""
   },
   {
    "isCorrect": true,
    "html": "title=\"{{ userName }}\"",
    "text": "title=\"{{ userName }}\""
   },
   {
    "isCorrect": false,
    "html": "title=\"{{ 'userName' }}\"",
    "text": "title=\"{{ 'userName' }}\""
   },
   {
    "isCorrect": false,
    "html": "The only way to do it is by using the square brackets.",
    "text": "The only way to do it is by using the square brackets."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q57. What is the `async` pipe doing in this example?\n\n```ts\n@Component({\n  selector: 'app-users',\n  template: '<div *ngFor=\"let user of users | async\">{{ user.name }}</div>',\n})\nexport class UsersComponent implements OnInit {\n  users;\n  constructor(private httpClient: HttpClient) {}\n  ngOnInit(): void {\n    this.users = this.httpClient.get<{ name: string }>('users');\n  }\n}\n```\n\n- [ ] It is doing nothing, since the async pipe cannot be used in an `ngFor` statement.\n- [ ] It is configuring the `ngFor` iteration to support multiple lists of users at the same time.\n- [x] It is subscribing to the observable returned from the `HttpClient.get` method and unwrapping the returned value so it can be iterated over in the `ngFor`.\n- [ ] It is allowing all of the users in the `users` field to be rendered concurrently to the DOM.\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q57. What is the <code>async</code> pipe doing in this example?</h4>",
   "text": "Q57. What is the async pipe doing in this example?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-users'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;div *ngFor=\"let user of users | async\"&gt;{{ user.name }}&lt;/div&gt;'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n  users<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> httpClient<span class=\"token operator\">:</span> HttpClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpClient<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Component({\n  selector: 'app-users',\n  template: '<div *ngFor=\"let user of users | async\">{{ user.name }}</div>',\n})\nexport class UsersComponent implements OnInit {\n  users;\n  constructor(private httpClient: HttpClient) {}\n  ngOnInit(): void {\n    this.users = this.httpClient.get<{ name: string }>('users');\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It is doing nothing, since the async pipe cannot be used in an <code>ngFor</code> statement.",
    "text": "It is doing nothing, since the async pipe cannot be used in an ngFor statement."
   },
   {
    "isCorrect": false,
    "html": "It is configuring the <code>ngFor</code> iteration to support multiple lists of users at the same time.",
    "text": "It is configuring the ngFor iteration to support multiple lists of users at the same time."
   },
   {
    "isCorrect": true,
    "html": "It is subscribing to the observable returned from the <code>HttpClient.get</code> method and unwrapping the returned value so it can be iterated over in the <code>ngFor</code>.",
    "text": "It is subscribing to the observable returned from the HttpClient.get method and unwrapping the returned value so it can be iterated over in the ngFor."
   },
   {
    "isCorrect": false,
    "html": "It is allowing all of the users in the <code>users</code> field to be rendered concurrently to the DOM.",
    "text": "It is allowing all of the users in the users field to be rendered concurrently to the DOM."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q58. How would you make use of this directive in markup based on its selector value\n\n```ts\n@Directive({\n\tselector: '[appTruncate]'\n})\nexport class TruncateDirective{\n\t. . .\n}\n```\n\n- [ ] `html <p data-directive=\"appTruncate\">Some long text </p> `\n- [x] `html <p appTruncate>Some long text</p> `\n- [ ] `html <p app-truncate>Some long text</p> `\n- [ ] `html <app-truncate>Some long text</app-truncate> `\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q58. How would you make use of this directive in markup based on its selector value</h4>",
   "text": "Q58. How would you make use of this directive in markup based on its selector value"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Directive</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token operator\">:</span> <span class=\"token string\">'[appTruncate]'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TruncateDirective</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Directive({\n    selector: '[appTruncate]'\n})\nexport class TruncateDirective{\n    . . .\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>html &lt;p data-directive=\"appTruncate\"&gt;Some long text &lt;/p&gt;</code>",
    "text": "html <p data-directive=\"appTruncate\">Some long text </p>"
   },
   {
    "isCorrect": true,
    "html": "<code>html &lt;p appTruncate&gt;Some long text&lt;/p&gt;</code>",
    "text": "html <p appTruncate>Some long text</p>"
   },
   {
    "isCorrect": false,
    "html": "<code>html &lt;p app-truncate&gt;Some long text&lt;/p&gt;</code>",
    "text": "html <p app-truncate>Some long text</p>"
   },
   {
    "isCorrect": false,
    "html": "<code>html &lt;app-truncate&gt;Some long text&lt;/app-truncate&gt;</code>",
    "text": "html <app-truncate>Some long text</app-truncate>"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q59. What lifecycle hook can be used on a component to monitor all changes to @Input values on that component?\n\n- [ ] ngOnInit\n- [ ] ngChanges\n- [ ] ngAfterInputChange\n- [x] ngOnChanges\n\n[How to detect when an @Input() value changes in Angular?](https://stackoverflow.com/a/44686085/1573267)\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q59. What lifecycle hook can be used on a component to monitor all changes to @Input values on that component?</h4>",
   "text": "Q59. What lifecycle hook can be used on a component to monitor all changes to @Input values on that component?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "ngOnInit",
    "text": "ngOnInit"
   },
   {
    "isCorrect": false,
    "html": "ngChanges",
    "text": "ngChanges"
   },
   {
    "isCorrect": false,
    "html": "ngAfterInputChange",
    "text": "ngAfterInputChange"
   },
   {
    "isCorrect": true,
    "html": "ngOnChanges",
    "text": "ngOnChanges"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/a/44686085/1573267\">How to detect when an @Input() value changes in Angular?</a></p>",
   "text": "How to detect when an @Input() value changes in Angular?"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q60. What would be an example template syntax usage of this custom pipe?\n\n```ts\n@Pipe({ name: 'truncate' })\nexport class TruncatePipe implements PipeTransform {\n  transform(value: string, maxLength: number, showEllipsis: boolean) {\n    const newValue = maxLength ? value.substr(0, maxLength) : value;\n    return showEllipsis ? '${newValue}...' : newValue;\n  }\n}\n```\n\n- [ ] `{{ 'some long text' | truncate:10 }}`\n- [x] `'some long text' | truncate:10:true`\n- [ ] `{{ 'some long text' | truncate }}`\n- [ ] all of these answers\n\n[How do I call an Angular 2 pipe with multiple arguments?] (https://stackoverflow.com/questions/36816788/how-do-i-call-an-angular-2-pipe-with-multiple-arguments)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q60. What would be an example template syntax usage of this custom pipe?</h4>",
   "text": "Q60. What would be an example template syntax usage of this custom pipe?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Pipe</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'truncate'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TruncatePipe</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PipeTransform</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> maxLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> showEllipsis<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newValue <span class=\"token operator\">=</span> maxLength <span class=\"token operator\">?</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> maxLength<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> showEllipsis <span class=\"token operator\">?</span> <span class=\"token string\">'${newValue}...'</span> <span class=\"token operator\">:</span> newValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Pipe({ name: 'truncate' })\nexport class TruncatePipe implements PipeTransform {\n  transform(value: string, maxLength: number, showEllipsis: boolean) {\n    const newValue = maxLength ? value.substr(0, maxLength) : value;\n    return showEllipsis ? '${newValue}...' : newValue;\n  }\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>{{ 'some long text' | truncate:10 }}</code>",
    "text": "{{ 'some long text' | truncate:10 }}"
   },
   {
    "isCorrect": true,
    "html": "<code>'some long text' | truncate:10:true</code>",
    "text": "'some long text' | truncate:10:true"
   },
   {
    "isCorrect": false,
    "html": "<code>{{ 'some long text' | truncate }}</code>",
    "text": "{{ 'some long text' | truncate }}"
   },
   {
    "isCorrect": false,
    "html": "all of these answers",
    "text": "all of these answers"
   }
  ],
  "reference": {
   "html": "<p>[How do I call an Angular 2 pipe with multiple arguments?] (https://stackoverflow.com/questions/36816788/how-do-i-call-an-angular-2-pipe-with-multiple-arguments)</p>",
   "text": "[How do I call an Angular 2 pipe with multiple arguments?] (https://stackoverflow.com/questions/36816788/how-do-i-call-an-angular-2-pipe-with-multiple-arguments)"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q61. Which Angular CLI command would you run to generate a UsersComponent and add it to the SharedModule (in file shared.module.ts in your application)?\n\n- [ ] ng generate component --newModule=shared\n- [x] ng generate component users --module=shared\n- [ ] ng generate component users --shared\n- [ ] ng generate component --add=shared\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q61. Which Angular CLI command would you run to generate a UsersComponent and add it to the SharedModule (in file shared.module.ts in your application)?</h4>",
   "text": "Q61. Which Angular CLI command would you run to generate a UsersComponent and add it to the SharedModule (in file shared.module.ts in your application)?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "ng generate component --newModule=shared",
    "text": "ng generate component --newModule=shared"
   },
   {
    "isCorrect": true,
    "html": "ng generate component users --module=shared",
    "text": "ng generate component users --module=shared"
   },
   {
    "isCorrect": false,
    "html": "ng generate component users --shared",
    "text": "ng generate component users --shared"
   },
   {
    "isCorrect": false,
    "html": "ng generate component --add=shared",
    "text": "ng generate component --add=shared"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q62. How can you rewrite this markup so the div container is not needed in the final DOM render\n\n```ts\n<div *ngIf=\"location\">\n\t<h1>{{ location.name }}</h1>\n\t<p>{{ location.description }}</p>\n</div>\n```\n\n- [ ] A\n\n```ts\n<div *ngIf=\"location\">\n\t<h1>{{ location.name }}</h1>\n\t<p>{{ location.description }}</p>\n{{ endNgIf }}\n```\n\n- [ ] B\n\n```ts\n<ng-template *ngIf=\"location\">\n\t<h1>{{ location.name }}</h1>\n\t<p>{{ location.description }}</p>\n</ng-template>\n```\n\n- [ ] C\n\n```ts\n<div *ngIf=\"location\" [display]=\" ' hidden' \">\n\t<h1>{{ location.name }}</h1>\n\t<p>{{ location.description }}</p>\n</div>\n```\n\n- [x] D\n\n```ts\n<ng-container *ngIf=\"location\">\n\t<h1>{{ location.name }}</h1>\n\t<p>{{ location.description }}</p>\n</ng-container>\n```\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q62. How can you rewrite this markup so the div container is not needed in the final DOM render</h4>",
   "text": "Q62. How can you rewrite this markup so the div container is not needed in the final DOM render"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"location\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>description <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<div *ngIf=\"location\">\n    <h1>{{ location.name }}</h1>\n    <p>{{ location.description }}</p>\n</div>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "A<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"location\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>description <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> endNgIf <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>",
    "text": "A<div *ngIf=\"location\">\n    <h1>{{ location.name }}</h1>\n    <p>{{ location.description }}</p>\n{{ endNgIf }}\n"
   },
   {
    "isCorrect": false,
    "html": "B<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>ng<span class=\"token operator\">-</span>template <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"location\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>description <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ng<span class=\"token operator\">-</span>template<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "B<ng-template *ngIf=\"location\">\n    <h1>{{ location.name }}</h1>\n    <p>{{ location.description }}</p>\n</ng-template>\n"
   },
   {
    "isCorrect": false,
    "html": "C<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"location\"</span> <span class=\"token punctuation\">[</span>display<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\" ' hidden' \"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>description <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "C<div *ngIf=\"location\" [display]=\" ' hidden' \">\n    <h1>{{ location.name }}</h1>\n    <p>{{ location.description }}</p>\n</div>\n"
   },
   {
    "isCorrect": true,
    "html": "D<br><pre><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>ng<span class=\"token operator\">-</span>container <span class=\"token operator\">*</span>ngIf<span class=\"token operator\">=</span><span class=\"token string\">\"location\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">.</span>description <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ng<span class=\"token operator\">-</span>container<span class=\"token operator\">&gt;</span>\n</code></pre>",
    "text": "D<ng-container *ngIf=\"location\">\n    <h1>{{ location.name }}</h1>\n    <p>{{ location.description }}</p>\n</ng-container>\n"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q64. What Angular utilities, if any, are required to unit test a service with no constructor dependencies?\n\n- [ ] By.css() helper method is needed\n- [ ] A text fixture is required to run the service for the unit test.\n- [ ] None. A service can be instantiated and unit tested on its own.\n- [x] The TestBed class iss needed to instantiate the service.\n\n[Angular unit tests](https://angular.io/guide/testing-services) - recheck answers\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q64. What Angular utilities, if any, are required to unit test a service with no constructor dependencies?</h4>",
   "text": "Q64. What Angular utilities, if any, are required to unit test a service with no constructor dependencies?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "By.css() helper method is needed",
    "text": "By.css() helper method is needed"
   },
   {
    "isCorrect": false,
    "html": "A text fixture is required to run the service for the unit test.",
    "text": "A text fixture is required to run the service for the unit test."
   },
   {
    "isCorrect": false,
    "html": "None. A service can be instantiated and unit tested on its own.",
    "text": "None. A service can be instantiated and unit tested on its own."
   },
   {
    "isCorrect": true,
    "html": "The TestBed class iss needed to instantiate the service.",
    "text": "The TestBed class iss needed to instantiate the service."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/guide/testing-services\">Angular unit tests</a> - recheck answers</p>",
   "text": "Angular unit tests - recheck answers"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q65. What is the difference between the CanActivate and the CanLoad route guards?\n\n- [ ] CanActivate is used to check access. CanLoad is used to preload data for the route.\n- [x] CanLoad is used at app startup to allow or deny routes to be added to the route table. CanActivate is used to manage access to routes at the time they are requested.\n- [ ] CanActivate and CanLoad do the exact same thing.\n- [ ] CanLoad prevents an entire NgModule from being delivered and loaded. CanActivate stops routing to a component in that NgModule, but that module is still loaded.\n\n[CanActivate vs Canload](https://stackoverflow.com/questions/42026045/difference-between-angulars-canload-and-canactivate#:~:text=canActivate%20is%20used%20to%20prevent,not%20authorized%20to%20do%20so.) CanActivate prevents access on routes, CanLoad prevents lazy loading.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q65. What is the difference between the CanActivate and the CanLoad route guards?</h4>",
   "text": "Q65. What is the difference between the CanActivate and the CanLoad route guards?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "CanActivate is used to check access. CanLoad is used to preload data for the route.",
    "text": "CanActivate is used to check access. CanLoad is used to preload data for the route."
   },
   {
    "isCorrect": true,
    "html": "CanLoad is used at app startup to allow or deny routes to be added to the route table. CanActivate is used to manage access to routes at the time they are requested.",
    "text": "CanLoad is used at app startup to allow or deny routes to be added to the route table. CanActivate is used to manage access to routes at the time they are requested."
   },
   {
    "isCorrect": false,
    "html": "CanActivate and CanLoad do the exact same thing.",
    "text": "CanActivate and CanLoad do the exact same thing."
   },
   {
    "isCorrect": false,
    "html": "CanLoad prevents an entire NgModule from being delivered and loaded. CanActivate stops routing to a component in that NgModule, but that module is still loaded.",
    "text": "CanLoad prevents an entire NgModule from being delivered and loaded. CanActivate stops routing to a component in that NgModule, but that module is still loaded."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/questions/42026045/difference-between-angulars-canload-and-canactivate#:~:text=canActivate%20is%20used%20to%20prevent,not%20authorized%20to%20do%20so.\">CanActivate vs Canload</a> CanActivate prevents access on routes, CanLoad prevents lazy loading.</p>",
   "text": "CanActivate vs Canload CanActivate prevents access on routes, CanLoad prevents lazy loading."
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q66. What is the outlet property used for in this router definition object?\n\n```ts\n{\n\tpath: 'document',\n\tcomponent: DocumentComponent,\n\toutlet: 'document-box'\n}\n```\n\n- [ ] it will locate all instancess of <document-box> in the DOM and inser a DocumentComponent element into them on route navigation.\n- [ ] It declares that the DocumentComponent can be used as a child to a <<document-box> element in addition ot being routed to.\n- [x] It us used to target a <router-outlet> element with the name attribute matching the string value as the location for the DocumentComponent to be rendered when routed to.\n- [ ] It is a source of power for the router. (definitely not the answer :P)\n\n[Angular-outlet](https://angular.io/api/router/RouterOutlet) - recheck answer\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q66. What is the outlet property used for in this router definition object?</h4>",
   "text": "Q66. What is the outlet property used for in this router definition object?"
  },
  "preformated": {
   "language": "TypeScript",
   "html": "<pre><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'document'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> DocumentComponent<span class=\"token punctuation\">,</span>\n    outlet<span class=\"token operator\">:</span> <span class=\"token string\">'document-box'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "{\n    path: 'document',\n    component: DocumentComponent,\n    outlet: 'document-box'\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "it will locate all instancess of &lt;document-box&gt; in the DOM and inser a DocumentComponent element into them on route navigation.",
    "text": "it will locate all instancess of <document-box> in the DOM and inser a DocumentComponent element into them on route navigation."
   },
   {
    "isCorrect": false,
    "html": "It declares that the DocumentComponent can be used as a child to a &lt;&lt;document-box&gt; element in addition ot being routed to.",
    "text": "It declares that the DocumentComponent can be used as a child to a <<document-box> element in addition ot being routed to."
   },
   {
    "isCorrect": true,
    "html": "It us used to target a &lt;router-outlet&gt; element with the name attribute matching the string value as the location for the DocumentComponent to be rendered when routed to.",
    "text": "It us used to target a <router-outlet> element with the name attribute matching the string value as the location for the DocumentComponent to be rendered when routed to."
   },
   {
    "isCorrect": false,
    "html": "It is a source of power for the router. (definitely not the answer :P)",
    "text": "It is a source of power for the router. (definitely not the answer :P)"
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/api/router/RouterOutlet\">Angular-outlet</a> - recheck answer</p>",
   "text": "Angular-outlet - recheck answer"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q67. In this template syntax, every time the items property is changed (added to, removed from, etc.), the ngFor structural directive re-runs its logic for all DOM elements in the loop. What syntax can be used to make this more performant?\n\n```javascript\n<div *ngFor=\"let item of items\">\n  {{ item.id }} - {{ item.name }}\n</div>\n```\n\n- [ ] `*ngFor=\"let item of items; let uniqueItem\"`\n- [ ] `*ngFor=\"let item of items.distinct()\"`\n- [ ] `*ngFor=\"let item of items: let i = index\"`\n- [x] `*ngFor=\"let item of items; trackBy: trackById\"`\n\n[StackOverflow - How to use `trackBy` with `ngFor`](https://stackoverflow.com/a/58025894)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q67. In this template syntax, every time the items property is changed (added to, removed from, etc.), the ngFor structural directive re-runs its logic for all DOM elements in the loop. What syntax can be used to make this more performant?</h4>",
   "text": "Q67. In this template syntax, every time the items property is changed (added to, removed from, etc.), the ngFor structural directive re-runs its logic for all DOM elements in the loop. What syntax can be used to make this more performant?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">*</span>ngFor<span class=\"token operator\">=</span><span class=\"token string\">\"let item of items\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> item<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> item<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>",
   "text": "<div *ngFor=\"let item of items\">\n  {{ item.id }} - {{ item.name }}\n</div>\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "<code>*ngFor=\"let item of items; let uniqueItem\"</code>",
    "text": "*ngFor=\"let item of items; let uniqueItem\""
   },
   {
    "isCorrect": false,
    "html": "<code>*ngFor=\"let item of items.distinct()\"</code>",
    "text": "*ngFor=\"let item of items.distinct()\""
   },
   {
    "isCorrect": false,
    "html": "<code>*ngFor=\"let item of items: let i = index\"</code>",
    "text": "*ngFor=\"let item of items: let i = index\""
   },
   {
    "isCorrect": true,
    "html": "<code>*ngFor=\"let item of items; trackBy: trackById\"</code>",
    "text": "*ngFor=\"let item of items; trackBy: trackById\""
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://stackoverflow.com/a/58025894\">StackOverflow - How to use <code>trackBy</code> with <code>ngFor</code></a></p>",
   "text": "StackOverflow - How to use trackBy with ngFor"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q68. What does this Angular CLI command do?\n\n```bash\nng build --configuration=production --progress=false\n```\n\n- [ ] It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and logs progress output to the console.\n- [ ] It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and watching files for changes.\n- [ ] It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and disables watching files for changes.\n- [x] It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and prevents progress output to the console.\n\n[Angular documentation - `ng build`](https://angular.io/cli/build#:~:text=%2D%2D-,progress,-Log%20progress%20to)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q68. What does this Angular CLI command do?</h4>",
   "text": "Q68. What does this Angular CLI command do?"
  },
  "preformated": {
   "language": "bash",
   "html": "<pre><code class=\"language-bash\">ng build <span class=\"token parameter variable\">--configuration</span><span class=\"token operator\">=</span>production <span class=\"token parameter variable\">--progress</span><span class=\"token operator\">=</span>false\n</code></pre>",
   "text": "ng build --configuration=production --progress=false\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and logs progress output to the console.",
    "text": "It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and logs progress output to the console."
   },
   {
    "isCorrect": false,
    "html": "It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and watching files for changes.",
    "text": "It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and watching files for changes."
   },
   {
    "isCorrect": false,
    "html": "It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and disables watching files for changes.",
    "text": "It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and disables watching files for changes."
   },
   {
    "isCorrect": true,
    "html": "It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and prevents progress output to the console.",
    "text": "It builds the Angular application, setting the build configuration to the \"production\" target specified in the angular.json file, and prevents progress output to the console."
   }
  ],
  "reference": {
   "html": "<p><a href=\"https://angular.io/cli/build#:~:text=%2D%2D-,progress,-Log%20progress%20to\">Angular documentation - <code>ng build</code></a></p>",
   "text": "Angular documentation - ng build"
  }
 },
 {
  "topic": "Angular",
  "raw": "#### Q69. Service classes can be registered as providers via which decorators?\n\n- [ ] @Injectable, @NgModule, @Component, and @Directive.\n- [x] @Injectable only.\n- [ ] @Injectable and @NgModule only.\n- [ ] @Service and @NgModule only.\n\n",
  "hasCode": false,
  "question": {
   "html": "<h4>Q69. Service classes can be registered as providers via which decorators?</h4>",
   "text": "Q69. Service classes can be registered as providers via which decorators?"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "@Injectable, @NgModule, @Component, and @Directive.",
    "text": "@Injectable, @NgModule, @Component, and @Directive."
   },
   {
    "isCorrect": true,
    "html": "@Injectable only.",
    "text": "@Injectable only."
   },
   {
    "isCorrect": false,
    "html": "@Injectable and @NgModule only.",
    "text": "@Injectable and @NgModule only."
   },
   {
    "isCorrect": false,
    "html": "@Service and @NgModule only.",
    "text": "@Service and @NgModule only."
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q70. What is the Input decorator used for in this component class?\n\n```javascript\n@Component({\n\tselector:'app-product-name',\n\t...\n})\nexport class ProductNameComponent {\n\t@Input() productName: string\n}\n```\n\n- [ ] It is used simply to put a comment in front of a class field for documentation.\n- [x] It provides a way to bind values to the productName field by using the component selector.\n- [ ] It autogenerates an `html\n<input type='text' id='productName'>` Dom element in the component template.\n- [ ] It provides a way to bind values to the productName instance field,just like native DOM element property bindings.\n      [Angular documentation - `Input()`](https://angular.io/guide/inputs-outputs)\n\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q70. What is the Input decorator used for in this component class?</h4>",
   "text": "Q70. What is the Input decorator used for in this component class?"
  },
  "preformated": {
   "language": "JavaScript",
   "html": "<pre><code class=\"language-javascript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">selector</span><span class=\"token operator\">:</span><span class=\"token string\">'app-product-name'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductNameComponent</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> productName<span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n</code></pre>",
   "text": "@Component({\n    selector:'app-product-name',\n    ...\n})\nexport class ProductNameComponent {\n    @Input() productName: string\n}\n"
  },
  "variants": [
   {
    "isCorrect": false,
    "html": "It is used simply to put a comment in front of a class field for documentation.",
    "text": "It is used simply to put a comment in front of a class field for documentation."
   },
   {
    "isCorrect": true,
    "html": "It provides a way to bind values to the productName field by using the component selector.",
    "text": "It provides a way to bind values to the productName field by using the component selector."
   },
   {
    "isCorrect": false,
    "html": "It autogenerates an <code>html &lt;input type='text' id='productName'&gt;</code> Dom element in the component template.",
    "text": "It autogenerates an html <input type='text' id='productName'> Dom element in the component template."
   },
   {
    "isCorrect": false,
    "html": "It provides a way to bind values to the productName instance field,just like native DOM element property bindings.\n<a href=\"https://angular.io/guide/inputs-outputs\">Angular documentation - <code>Input()</code></a>",
    "text": "It provides a way to bind values to the productName instance field,just like native DOM element property bindings.\nAngular documentation - Input()"
   }
  ]
 },
 {
  "topic": "Angular",
  "raw": "#### Q71. Which route guard can be used to mediate navigation to a route?\n\n- [x] all of these answers.\n- [ ] CanDeactivate.\n- [ ] CanLoad\n- [ ] CanActivate.\n      [Angular documentation - `Input()`](https://angular.io/guide/inputs-outputs)\n",
  "hasCode": true,
  "question": {
   "html": "<h4>Q71. Which route guard can be used to mediate navigation to a route?</h4>",
   "text": "Q71. Which route guard can be used to mediate navigation to a route?"
  },
  "variants": [
   {
    "isCorrect": true,
    "html": "all of these answers.",
    "text": "all of these answers."
   },
   {
    "isCorrect": false,
    "html": "CanDeactivate.",
    "text": "CanDeactivate."
   },
   {
    "isCorrect": false,
    "html": "CanLoad",
    "text": "CanLoad"
   },
   {
    "isCorrect": false,
    "html": "CanActivate.\n<a href=\"https://angular.io/guide/inputs-outputs\">Angular documentation - <code>Input()</code></a>",
    "text": "CanActivate.\nAngular documentation - Input()"
   }
  ]
 }
]